{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nRF52832-MDK An Open Source, Micro Development Kit for IoT Embedded Applications using nRF52832 SoC Note There are two versions of nRF52832-MDK available: V1 : with Micro USB socket and headers soldered in V2 : without headers soldered in and can be connected to PC without any cable Just choose one that's right for you! Description The nRF52832-MDK is a fully open-source, versatile single board development kit for Bluetooth \u00ae low energy, ANT and 2.4GHz proprietary applications using the nRF52832 SoC. The kit gives access to 24 I/Os and interfaces via headers and has a RGB LED which is user-programmable. It also has a 2.4GHz chip antenna onboard which is quite convenient to develop IoT wireless applications. It supports the Nordic offical SDK using GCC, Keil and IAR. Program/Debug options on the kit is DAPLink . The nRF52832-MDK can also be used to play with multi-frameworks such as: nRF5 SDK, nRF5 SDK for Mesh, Mbed OS 5, Zephyr, Mynewt, JerryScript, Espruino, MicroPython, Web Bluetooth, Eddystone, etc. Hardware Specification nRF52832-MDK provides the following hardware features: Nordic Semiconductor nRF52832 ARM\u00ae Cortex\u2122-M4F 512kB Flash Memory + 64kB RAM Bluetooth low energy, ANT and 2.4GHz NFC\u2122-A tag Program/Debug options with DAPLink MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID - CMSIS-DAP compliant debug channel Up to 24 GPIOs at headers Reset Button RGB LED 2.4GHz chip antenna 3.3V regulator with 1A peak current output VBUS VIN Power-Path Management Breadboard-friendly Two dimensions available: V1: 48mm x 18mm x 13mm with headers soldered in V2: 63mm x 18mm x 4mm without headers soldered in Pinout Diagram Powered by nRF52832 SoC The nRF52832 SoC is a powerful, highly flexible ultra-low power multiprotocol SoC ideally suited for Bluetooth\u00ae low energy, ANT and 2.4GHz ultra low-power wireless applications. The nRF52832 SoC is built around a 32-bit ARM\u00ae Cortex\u2122-M4F CPU with 512kB + 64kB RAM. The embedded 2.4GHz transceiver supports Bluetooth low energy, ANT and proprietary 2.4 GHz protocol stack. It is on air compatible with the nRF51 Series, nRF24L and nRF24AP Series products from Nordic Semiconductor. Learn more DAPLink Integrated Arm Mbed DAPLink is an open-source software project that enables programming and debugging application software on running on Arm Cortex CPUs. Commonly referred to as interface firmware, DAPLink runs on a secondary MCU that is attached to the SWD port of the application MCU. Enumerating as a USB composite device, it creates a bridge between your development computer and the CPU debug access port. DAPLink enables developers with: MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID - CMSIS-DAP compliant debug channel DAPLink repo Multi-Frameworks Supported The nRF52832-MDK can be used to play with multi-frameworks such as: nRF5 SDK , nRF5 SDK for Mesh , Mbed OS 5 , Zephyr , Mynewt , JerryScript , Espruino , MicroPython , Web Bluetooth , Eddystone .... Framework Brief Description nRF5 SDK Software Development Kit for nRF51 and nRF52 Series nRF5 SDK for Mesh Software Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series Mbed OS 5 An Open Source Embedded Operating System designed specifically for the \"things\" in the Internet of Things. Zephyr A Small, Scalable Open Source RTOS for IoT Embedded Devices. Mynewt An OS to build, deploy and securely manage billions of devices. JerryScript A Ultra-lightweight JavaScript engine for the Internet of Things. Espruino A JavaScript interpreter for microcontrollers. It is designed for devices with as little as 128kB Flash and 8kB RAM. MicroPython A lean and efficient Python implementation for microcontrollers and constrained systems. Web Bluetooth Bluetooth support for the Web. Eddystone A protocol specification that defines a Bluetooth low energy (BLE) message format for proximity beacon messages. .... Online Document The excellent project document is provided with nRF52832-MDK. It's generated by MkDocs and hosted on GitHub . Resource Releases Design Files V2.0 nRF52832-MDK V2.0 Schematic nRF52832-MDK V2.0 PCB nRF52832-MDK V2.0 3D STEP V1.1 nRF52832-MDK V1.1 Schematic nRF52832-MDK V1.1 PCB nRF52832-MDK V1.1 3D STEP V1.0 nRF52832-MDK V1.0 Schematic nRF52832-MDK V1.0 PCB nRF52832-MDK V1.0 3D STEP Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Introduction"},{"location":"#nrf52832-mdk-an-open-source-micro-development-kit-for-iot-embedded-applications-using-nrf52832-soc","text":"Note There are two versions of nRF52832-MDK available: V1 : with Micro USB socket and headers soldered in V2 : without headers soldered in and can be connected to PC without any cable Just choose one that's right for you!","title":"nRF52832-MDK An Open Source, Micro Development Kit for IoT Embedded Applications using nRF52832 SoC"},{"location":"#description","text":"The nRF52832-MDK is a fully open-source, versatile single board development kit for Bluetooth \u00ae low energy, ANT and 2.4GHz proprietary applications using the nRF52832 SoC. The kit gives access to 24 I/Os and interfaces via headers and has a RGB LED which is user-programmable. It also has a 2.4GHz chip antenna onboard which is quite convenient to develop IoT wireless applications. It supports the Nordic offical SDK using GCC, Keil and IAR. Program/Debug options on the kit is DAPLink . The nRF52832-MDK can also be used to play with multi-frameworks such as: nRF5 SDK, nRF5 SDK for Mesh, Mbed OS 5, Zephyr, Mynewt, JerryScript, Espruino, MicroPython, Web Bluetooth, Eddystone, etc.","title":"Description"},{"location":"#hardware-specification","text":"nRF52832-MDK provides the following hardware features: Nordic Semiconductor nRF52832 ARM\u00ae Cortex\u2122-M4F 512kB Flash Memory + 64kB RAM Bluetooth low energy, ANT and 2.4GHz NFC\u2122-A tag Program/Debug options with DAPLink MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID - CMSIS-DAP compliant debug channel Up to 24 GPIOs at headers Reset Button RGB LED 2.4GHz chip antenna 3.3V regulator with 1A peak current output VBUS VIN Power-Path Management Breadboard-friendly Two dimensions available: V1: 48mm x 18mm x 13mm with headers soldered in V2: 63mm x 18mm x 4mm without headers soldered in","title":"Hardware Specification"},{"location":"#pinout-diagram","text":"","title":"Pinout Diagram"},{"location":"#powered-by-nrf52832-soc","text":"The nRF52832 SoC is a powerful, highly flexible ultra-low power multiprotocol SoC ideally suited for Bluetooth\u00ae low energy, ANT and 2.4GHz ultra low-power wireless applications. The nRF52832 SoC is built around a 32-bit ARM\u00ae Cortex\u2122-M4F CPU with 512kB + 64kB RAM. The embedded 2.4GHz transceiver supports Bluetooth low energy, ANT and proprietary 2.4 GHz protocol stack. It is on air compatible with the nRF51 Series, nRF24L and nRF24AP Series products from Nordic Semiconductor. Learn more","title":"Powered by nRF52832 SoC"},{"location":"#daplink-integrated","text":"Arm Mbed DAPLink is an open-source software project that enables programming and debugging application software on running on Arm Cortex CPUs. Commonly referred to as interface firmware, DAPLink runs on a secondary MCU that is attached to the SWD port of the application MCU. Enumerating as a USB composite device, it creates a bridge between your development computer and the CPU debug access port. DAPLink enables developers with: MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID - CMSIS-DAP compliant debug channel DAPLink repo","title":"DAPLink Integrated"},{"location":"#multi-frameworks-supported","text":"The nRF52832-MDK can be used to play with multi-frameworks such as: nRF5 SDK , nRF5 SDK for Mesh , Mbed OS 5 , Zephyr , Mynewt , JerryScript , Espruino , MicroPython , Web Bluetooth , Eddystone .... Framework Brief Description nRF5 SDK Software Development Kit for nRF51 and nRF52 Series nRF5 SDK for Mesh Software Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series Mbed OS 5 An Open Source Embedded Operating System designed specifically for the \"things\" in the Internet of Things. Zephyr A Small, Scalable Open Source RTOS for IoT Embedded Devices. Mynewt An OS to build, deploy and securely manage billions of devices. JerryScript A Ultra-lightweight JavaScript engine for the Internet of Things. Espruino A JavaScript interpreter for microcontrollers. It is designed for devices with as little as 128kB Flash and 8kB RAM. MicroPython A lean and efficient Python implementation for microcontrollers and constrained systems. Web Bluetooth Bluetooth support for the Web. Eddystone A protocol specification that defines a Bluetooth low energy (BLE) message format for proximity beacon messages. ....","title":"Multi-Frameworks Supported"},{"location":"#online-document","text":"The excellent project document is provided with nRF52832-MDK. It's generated by MkDocs and hosted on GitHub .","title":"Online Document"},{"location":"#resource","text":"Releases Design Files V2.0 nRF52832-MDK V2.0 Schematic nRF52832-MDK V2.0 PCB nRF52832-MDK V2.0 3D STEP V1.1 nRF52832-MDK V1.1 Schematic nRF52832-MDK V1.1 PCB nRF52832-MDK V1.1 3D STEP V1.0 nRF52832-MDK V1.0 Schematic nRF52832-MDK V1.0 PCB nRF52832-MDK V1.0 3D STEP","title":"Resource"},{"location":"#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"CONTRIBUTING/","text":"Interested in contributing to the nRF52832-MDK project? Want to report a bug? Before you do, please read the following guidelines. Got a question or problem? For quick questions there's no need to open an issue as you can comment at the bottom of the corresponding page. Found a bug? If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. Missing a feature? You can request a new feature by submitting an issue to our GitHub Repository. Be sure that it is of use for everyone. Create an Issue","title":"Contributing"},{"location":"CONTRIBUTING/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can comment at the bottom of the corresponding page.","title":"Got a question or problem?"},{"location":"CONTRIBUTING/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix.","title":"Found a bug?"},{"location":"CONTRIBUTING/#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub Repository. Be sure that it is of use for everyone. Create an Issue","title":"Missing a feature?"},{"location":"LICENSE/","text":"MIT License Copyright 2018 makerdiary.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"how-to-buy/","text":"How to Buy nRF52832-MDK Buy Online nRF52832-MDK is available on the following channels (click to go directly to the product): Bulk Customization We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"How to Buy"},{"location":"how-to-buy/#how-to-buy-nrf52832-mdk","text":"","title":"How to Buy nRF52832-MDK"},{"location":"how-to-buy/#buy-online","text":"nRF52832-MDK is available on the following channels (click to go directly to the product):","title":"Buy Online"},{"location":"how-to-buy/#bulk-customization","text":"We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"Bulk &amp; Customization"},{"location":"cn/","text":"nRF52832-MDK \u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6 \u63d0\u793a \u76ee\u524d nRF52832-MDK \u6709\u4e24\u4e2a\u786c\u4ef6\u7248\u672c\u53ef\u7528\uff1a V1 : \u5e26\u6709 Micro USB \u63a5\u53e3\u4e14\u6392\u9488\u710a\u63a5\u5728\u677f\u4e0a V2 : \u914d\u6392\u9488\u4f46\u4e0d\u710a\u5728\u677f\u4e0a\u3001\u65e0\u9700\u6570\u636e\u7ebf\u5373\u53ef\u4e0e PC \u8fde\u63a5 nRF52832-MDK \u662f\u4e00\u6b3e\u5b8c\u5168\u5f00\u6e90\u3001\u57fa\u4e8e Nordic \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247 nRF52832 \u3001\u9762\u5411\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6\u3002 nRF52832-MDK \u63d0\u4f9b\u4e30\u5bcc\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u96c6\u6210\u591a\u529f\u80fd\u8c03\u8bd5\u5de5\u5177\uff0c\u53ef\u4ee5\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6\uff08\u5982\uff1anRF5 SDK, Mesh, Mbed OS 5, Zephyr, Mynewt, JerryScript, Espruino, MicroPython \u7b49\u7b49\uff09\u3002 nRF52832-MDK \u652f\u6301\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\u53ca\u793a\u4f8b\uff0c\u5e0c\u671b\u5e26\u6765\u5168\u65b0\u7684\u5f00\u53d1\u4f53\u9a8c\u3002 \u786c\u4ef6\u89c4\u683c Nordic \u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u84dd\u7259 SoC nRF52832 ARM\u00ae Cortex\u2122-M4F \u5185\u6838 512kB Flash + 64kB RAM \u652f\u6301\u4f4e\u529f\u8017\u84dd\u7259(BLE), ANT, 2.4GHz \u652f\u6301 NFC\u2122-A \u6807\u7b7e \u677f\u8f7d DAPLink \u591a\u529f\u80fd\u8c03\u8bd5\u5de5\u5177\uff1a MSC - \u652f\u6301\u201c\u62d6\u653e\u201d\u65b9\u5f0f\u4e0b\u8f7d\u56fa\u4ef6 CDC - \u63d0\u4f9b\u865a\u62df\u4e32\u53e3\u5de5\u5177 HID - \u517c\u5bb9 CMSIS-DAP \u4eff\u771f\u529f\u80fd \u62e5\u6709\u591a\u8fbe 24 \u4e2a\u53ef\u7f16\u7a0b GPIO \u63d0\u4f9b\u590d\u4f4d\u6309\u94ae\uff0c\u53ef\u66f4\u65b0 DAPLink \u56fa\u4ef6 \u53ef\u7f16\u7a0b RGB LED 2.4GHz \u6676\u7247\u5929\u7ebf\uff0c\u5728\u6709\u9650\u7684\u7a7a\u95f4\u5185\u63d0\u4f9b\u51fa\u8272\u7684 RF \u6027\u80fd 3.3V \u7a33\u538b\u5668\uff0c\u9ad8\u6548\u7387\u3001\u4f4e\u9759\u6001\u7535\u6d41\u3001\u53ef\u8f93\u51fa 1A \u5cf0\u503c\u7535\u6d41 VBUS VIN \u7535\u6e90\u8def\u5f84\u7ba1\u7406 \u6807\u51c6\u5f15\u811a\u95f4\u8ddd\uff0c\u53ef\u76f4\u63a5\u5b89\u88c5\u5728\u9762\u5305\u677f\u4e0a \u5c3a\u5bf8\u5c0f\u5de7 48mm x 18mm x 13mm (\u5df2\u710a\u6392\u9488)\u300163mm x 18mm x 4mm\uff08\u4e0d\u710a\u6392\u9488\uff09 \u5f15\u811a\u4f4d\u7f6e\u56fe nRF52832 SoC nRF52832 SoC \u662f Nordic Semiconductor \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u7684\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247\uff0cARM\u00ae Cortex\u2122-M4F \u5185\u6838\uff0c512kB Flash + 64kB RAM\uff0c\u652f\u6301 BLE, ANT, 2.4GHz \u534f\u8bae\u6808\u3002 \u4e86\u89e3\u66f4\u591a \u591a\u529f\u80fd\u8c03\u8bd5\u5668 nRF52832-MDK \u96c6\u6210\u4e86\u591a\u529f\u80fd\u8c03\u8bd5\u5668 DAPLink\uff0c\u5373\u63d2\u5373\u7528\uff0c\u652f\u6301\u201c\u62d6\u653e\u201d\u65b9\u5f0f\u4e0b\u8f7d\u56fa\u4ef6\u3001\u4e32\u53e3\u8c03\u8bd5\u3001CMSIS-DAP \u4eff\u771f\u8c03\u8bd5\u3002 DAPLink repo \u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6 nRF52832-MDK \u53ef\u4ee5\u7528\u6765\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6\uff1a \u5f00\u6e90\u6846\u67b6 \u7b80\u4ecb nRF5 SDK Nordic \u5b98\u65b9\u63d0\u4f9b\u7684 SDK nRF5 SDK for Mesh Nordic \u5b98\u65b9\u63d0\u4f9b\u7684\u4f4e\u529f\u8017\u84dd\u7259 Mesh \u7f51\u7edc SDK Mbed OS 5 Arm \u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf Zephyr Linux \u57fa\u91d1\u4f1a\u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf Mynewt Apache \u5f00\u6e90\u6a21\u5757\u5316\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e13\u95e8\u4e3a\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u800c\u53c8\u8981\u4ee5\u6781\u4f4e\u529f\u8017\u8fd0\u884c\u975e\u5e38\u957f\u65f6\u95f4\u7684\u7269\u8054\u7f51\u8bbe\u5907\u8bbe\u8ba1 JerryScript \u4e09\u661f\u5f00\u6e90\u7684\u9762\u5411\u7269\u8054\u7f51\u7684\u8f7b\u91cf\u7ea7 JavaScript \u5f15\u64ce Espruino \u8fd0\u884c\u5728\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u7684 MCU \u4e0a\u7684 JavaScrupt \u5f15\u64ce MicroPython \u9762\u5411\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u8f7b\u91cf\u7ea7 Python Web Bluetooth \u57fa\u4e8e Web \u7684\u4f4e\u529f\u8017\u84dd\u7259 API Eddystone Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae .... \u5728\u7ebf\u6587\u6863 nRF52832-MDK \u63d0\u4f9b\u4f18\u79c0\u7684\u5728\u7ebf\u6587\u6863\uff0c\u4f7f\u7528 MkDocs \u751f\u6210\u6587\u6863\uff0c\u5e76\u6258\u7ba1\u5728 GitHub \u4e0a\u3002 \u76f8\u5173\u8d44\u6e90 \u7248\u672c \u8bbe\u8ba1\u6587\u6863 V2.0 nRF52832-MDK V2.0 Schematic nRF52832-MDK V2.0 PCB nRF52832-MDK V2.0 3D STEP V1.1 nRF52832-MDK V1.1 Schematic nRF52832-MDK V1.1 PCB nRF52832-MDK V1.1 3D STEP V1.0 nRF52832-MDK V1.0 Schematic nRF52832-MDK V1.0 PCB nRF52832-MDK V1.0 3D STEP \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u7b80\u4ecb"},{"location":"cn/#nrf52832-mdk","text":"\u63d0\u793a \u76ee\u524d nRF52832-MDK \u6709\u4e24\u4e2a\u786c\u4ef6\u7248\u672c\u53ef\u7528\uff1a V1 : \u5e26\u6709 Micro USB \u63a5\u53e3\u4e14\u6392\u9488\u710a\u63a5\u5728\u677f\u4e0a V2 : \u914d\u6392\u9488\u4f46\u4e0d\u710a\u5728\u677f\u4e0a\u3001\u65e0\u9700\u6570\u636e\u7ebf\u5373\u53ef\u4e0e PC \u8fde\u63a5 nRF52832-MDK \u662f\u4e00\u6b3e\u5b8c\u5168\u5f00\u6e90\u3001\u57fa\u4e8e Nordic \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247 nRF52832 \u3001\u9762\u5411\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6\u3002 nRF52832-MDK \u63d0\u4f9b\u4e30\u5bcc\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u96c6\u6210\u591a\u529f\u80fd\u8c03\u8bd5\u5de5\u5177\uff0c\u53ef\u4ee5\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6\uff08\u5982\uff1anRF5 SDK, Mesh, Mbed OS 5, Zephyr, Mynewt, JerryScript, Espruino, MicroPython \u7b49\u7b49\uff09\u3002 nRF52832-MDK \u652f\u6301\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\u53ca\u793a\u4f8b\uff0c\u5e0c\u671b\u5e26\u6765\u5168\u65b0\u7684\u5f00\u53d1\u4f53\u9a8c\u3002","title":"nRF52832-MDK \u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6"},{"location":"cn/#_1","text":"Nordic \u9ad8\u6027\u80fd\u4f4e\u529f\u8017\u84dd\u7259 SoC nRF52832 ARM\u00ae Cortex\u2122-M4F \u5185\u6838 512kB Flash + 64kB RAM \u652f\u6301\u4f4e\u529f\u8017\u84dd\u7259(BLE), ANT, 2.4GHz \u652f\u6301 NFC\u2122-A \u6807\u7b7e \u677f\u8f7d DAPLink \u591a\u529f\u80fd\u8c03\u8bd5\u5de5\u5177\uff1a MSC - \u652f\u6301\u201c\u62d6\u653e\u201d\u65b9\u5f0f\u4e0b\u8f7d\u56fa\u4ef6 CDC - \u63d0\u4f9b\u865a\u62df\u4e32\u53e3\u5de5\u5177 HID - \u517c\u5bb9 CMSIS-DAP \u4eff\u771f\u529f\u80fd \u62e5\u6709\u591a\u8fbe 24 \u4e2a\u53ef\u7f16\u7a0b GPIO \u63d0\u4f9b\u590d\u4f4d\u6309\u94ae\uff0c\u53ef\u66f4\u65b0 DAPLink \u56fa\u4ef6 \u53ef\u7f16\u7a0b RGB LED 2.4GHz \u6676\u7247\u5929\u7ebf\uff0c\u5728\u6709\u9650\u7684\u7a7a\u95f4\u5185\u63d0\u4f9b\u51fa\u8272\u7684 RF \u6027\u80fd 3.3V \u7a33\u538b\u5668\uff0c\u9ad8\u6548\u7387\u3001\u4f4e\u9759\u6001\u7535\u6d41\u3001\u53ef\u8f93\u51fa 1A \u5cf0\u503c\u7535\u6d41 VBUS VIN \u7535\u6e90\u8def\u5f84\u7ba1\u7406 \u6807\u51c6\u5f15\u811a\u95f4\u8ddd\uff0c\u53ef\u76f4\u63a5\u5b89\u88c5\u5728\u9762\u5305\u677f\u4e0a \u5c3a\u5bf8\u5c0f\u5de7 48mm x 18mm x 13mm (\u5df2\u710a\u6392\u9488)\u300163mm x 18mm x 4mm\uff08\u4e0d\u710a\u6392\u9488\uff09","title":"\u786c\u4ef6\u89c4\u683c"},{"location":"cn/#_2","text":"","title":"\u5f15\u811a\u4f4d\u7f6e\u56fe"},{"location":"cn/#nrf52832-soc","text":"nRF52832 SoC \u662f Nordic Semiconductor \u65b0\u4e00\u4ee3\u9ad8\u6027\u80fd\u7684\u4f4e\u529f\u8017\u84dd\u7259\u7cfb\u7edf\u7ea7\u82af\u7247\uff0cARM\u00ae Cortex\u2122-M4F \u5185\u6838\uff0c512kB Flash + 64kB RAM\uff0c\u652f\u6301 BLE, ANT, 2.4GHz \u534f\u8bae\u6808\u3002 \u4e86\u89e3\u66f4\u591a","title":"nRF52832 SoC"},{"location":"cn/#_3","text":"nRF52832-MDK \u96c6\u6210\u4e86\u591a\u529f\u80fd\u8c03\u8bd5\u5668 DAPLink\uff0c\u5373\u63d2\u5373\u7528\uff0c\u652f\u6301\u201c\u62d6\u653e\u201d\u65b9\u5f0f\u4e0b\u8f7d\u56fa\u4ef6\u3001\u4e32\u53e3\u8c03\u8bd5\u3001CMSIS-DAP \u4eff\u771f\u8c03\u8bd5\u3002 DAPLink repo","title":"\u591a\u529f\u80fd\u8c03\u8bd5\u5668"},{"location":"cn/#_4","text":"nRF52832-MDK \u53ef\u4ee5\u7528\u6765\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6\uff1a \u5f00\u6e90\u6846\u67b6 \u7b80\u4ecb nRF5 SDK Nordic \u5b98\u65b9\u63d0\u4f9b\u7684 SDK nRF5 SDK for Mesh Nordic \u5b98\u65b9\u63d0\u4f9b\u7684\u4f4e\u529f\u8017\u84dd\u7259 Mesh \u7f51\u7edc SDK Mbed OS 5 Arm \u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf Zephyr Linux \u57fa\u91d1\u4f1a\u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf Mynewt Apache \u5f00\u6e90\u6a21\u5757\u5316\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e13\u95e8\u4e3a\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u800c\u53c8\u8981\u4ee5\u6781\u4f4e\u529f\u8017\u8fd0\u884c\u975e\u5e38\u957f\u65f6\u95f4\u7684\u7269\u8054\u7f51\u8bbe\u5907\u8bbe\u8ba1 JerryScript \u4e09\u661f\u5f00\u6e90\u7684\u9762\u5411\u7269\u8054\u7f51\u7684\u8f7b\u91cf\u7ea7 JavaScript \u5f15\u64ce Espruino \u8fd0\u884c\u5728\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u7684 MCU \u4e0a\u7684 JavaScrupt \u5f15\u64ce MicroPython \u9762\u5411\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u8f7b\u91cf\u7ea7 Python Web Bluetooth \u57fa\u4e8e Web \u7684\u4f4e\u529f\u8017\u84dd\u7259 API Eddystone Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae ....","title":"\u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6"},{"location":"cn/#_5","text":"nRF52832-MDK \u63d0\u4f9b\u4f18\u79c0\u7684\u5728\u7ebf\u6587\u6863\uff0c\u4f7f\u7528 MkDocs \u751f\u6210\u6587\u6863\uff0c\u5e76\u6258\u7ba1\u5728 GitHub \u4e0a\u3002","title":"\u5728\u7ebf\u6587\u6863"},{"location":"cn/#_6","text":"\u7248\u672c \u8bbe\u8ba1\u6587\u6863 V2.0 nRF52832-MDK V2.0 Schematic nRF52832-MDK V2.0 PCB nRF52832-MDK V2.0 3D STEP V1.1 nRF52832-MDK V1.1 Schematic nRF52832-MDK V1.1 PCB nRF52832-MDK V1.1 3D STEP V1.0 nRF52832-MDK V1.0 Schematic nRF52832-MDK V1.0 PCB nRF52832-MDK V1.0 3D STEP","title":"\u76f8\u5173\u8d44\u6e90"},{"location":"cn/#_7","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/CONTRIBUTING/","text":"\u5982\u679c\u4f60\u5bf9 nRF52832-MDK \u9879\u76ee\u611f\u5174\u8da3\uff0c\u6b22\u8fce\u52a0\u5165\u6211\u4eec\uff0c\u4e00\u8d77\u505a\u51fa\u6709\u8da3\u7684\u4e1c\u897f\u3002 \u4efb\u4f55\u7591\u95ee \u5982\u679c\u6709\u4efb\u4f55\u9700\u8981\u5feb\u901f\u89e3\u7b54\u7684\u7591\u95ee\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5bf9\u5e94\u9875\u9762\u4e0b\u65b9\u7684\u8bc4\u8bba\u7a97\u53e3\u53cd\u9988\u3002 \u63d0\u4ea4 Bug \u5982\u679c\u4f60\u53d1\u73b0\u67d0\u4e9b Bug\uff0c\u53ef\u4ee5\u901a\u8fc7 issue tracker \u63d0\u4ea4\u7ed9\u6211\u4eec\uff0c\u4e00\u8d77\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u66f4\u597d\u3002 \u589e\u52a0\u65b0\u529f\u80fd \u5982\u679c\u4f60\u89c9\u5f97\u53ef\u4ee5\u589e\u52a0\u4e00\u4e9b\u6709\u8da3\u7684\u65b0\u529f\u80fd\u3001\u65b0\u6848\u4f8b\uff0c\u53ef\u4ee5\u5728 GitHub \u521b\u5efa Issue\uff0c\u5411\u66f4\u591a\u4eba\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\u3002 \u521b\u5efa Issue","title":"\u53cd\u9988&\u8d21\u732e"},{"location":"cn/CONTRIBUTING/#_1","text":"\u5982\u679c\u6709\u4efb\u4f55\u9700\u8981\u5feb\u901f\u89e3\u7b54\u7684\u7591\u95ee\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5bf9\u5e94\u9875\u9762\u4e0b\u65b9\u7684\u8bc4\u8bba\u7a97\u53e3\u53cd\u9988\u3002","title":"\u4efb\u4f55\u7591\u95ee"},{"location":"cn/CONTRIBUTING/#bug","text":"\u5982\u679c\u4f60\u53d1\u73b0\u67d0\u4e9b Bug\uff0c\u53ef\u4ee5\u901a\u8fc7 issue tracker \u63d0\u4ea4\u7ed9\u6211\u4eec\uff0c\u4e00\u8d77\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u66f4\u597d\u3002","title":"\u63d0\u4ea4 Bug"},{"location":"cn/CONTRIBUTING/#_2","text":"\u5982\u679c\u4f60\u89c9\u5f97\u53ef\u4ee5\u589e\u52a0\u4e00\u4e9b\u6709\u8da3\u7684\u65b0\u529f\u80fd\u3001\u65b0\u6848\u4f8b\uff0c\u53ef\u4ee5\u5728 GitHub \u521b\u5efa Issue\uff0c\u5411\u66f4\u591a\u4eba\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\u3002 \u521b\u5efa Issue","title":"\u589e\u52a0\u65b0\u529f\u80fd"},{"location":"cn/LICENSE/","text":"MIT License Copyright 2018 makerdiary.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"cn/about/","text":"\u8ba2\u9605\u66f4\u591a \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8ba2\u9605\u3001\u5173\u6ce8\u6211\u4eec\uff0c\u4e00\u8d77\u4ea4\u6d41\u3001\u5b66\u4e60\u3001\u6210\u957f\uff1a \u521b\u5ba2\u65e5\u8bb0 \u77e5\u4e4e\u4e13\u680f \u5fae\u4fe1 - \u9020\u7269\u90a6","title":"\u8ba2\u9605"},{"location":"cn/about/#_1","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8ba2\u9605\u3001\u5173\u6ce8\u6211\u4eec\uff0c\u4e00\u8d77\u4ea4\u6d41\u3001\u5b66\u4e60\u3001\u6210\u957f\uff1a \u521b\u5ba2\u65e5\u8bb0 \u77e5\u4e4e\u4e13\u680f \u5fae\u4fe1 - \u9020\u7269\u90a6","title":"\u8ba2\u9605\u66f4\u591a"},{"location":"cn/how-to-buy/","text":"\u5982\u4f55\u8d2d\u4e70 nRF52832-MDK\uff1f \u8d2d\u4e70\u6e20\u9053 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8d2d\u4e70\u6e20\u9053\u83b7\u5f97 nRF52832-MDK \u76f8\u5173\u786c\u4ef6\uff1a \u5fae\u4fe1-\u9020\u7269\u5c0f\u5e97 \u6279\u91cf \u5b9a\u5236\u5316 \u5982\u679c\u4f60\u6709\u6279\u91cf\u6216\u8005\u5b9a\u5236\u5316\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8054\u7cfb\u6211\u4eec\uff01 Email Us","title":"\u5982\u4f55\u8d2d\u4e70"},{"location":"cn/how-to-buy/#nrf52832-mdk","text":"","title":"\u5982\u4f55\u8d2d\u4e70 nRF52832-MDK\uff1f"},{"location":"cn/how-to-buy/#_1","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8d2d\u4e70\u6e20\u9053\u83b7\u5f97 nRF52832-MDK \u76f8\u5173\u786c\u4ef6\uff1a \u5fae\u4fe1-\u9020\u7269\u5c0f\u5e97","title":"\u8d2d\u4e70\u6e20\u9053"},{"location":"cn/how-to-buy/#_2","text":"\u5982\u679c\u4f60\u6709\u6279\u91cf\u6216\u8005\u5b9a\u5236\u5316\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8054\u7cfb\u6211\u4eec\uff01 Email Us","title":"\u6279\u91cf&amp;\u5b9a\u5236\u5316"},{"location":"cn/daplink/","text":"Arm Mbed DAPLink Arm Mbed \u5f00\u6e90\u7684 Cortex \u82af\u7247\u8c03\u8bd5\u5de5\u5177 \u7b80\u4ecb DAPLink \u662f Arm Mbed \u5f00\u6e90\u7684\u3001\u9488\u5bf9 Cortex-M \u82af\u7247\u7684\u8c03\u8bd5\u5de5\u5177\uff0c\u5176\u76ee\u7684\u662f\u901a\u8fc7 Cortex \u8c03\u8bd5\u5668\u6765\u5b9e\u73b0\u4ee3\u7801\u4e0b\u8f7d\u5230\u76ee\u6807\u8bbe\u5907\u3002 DAPLink \u6709\u4e09\u4e2a\u4e3b\u8981\u7279\u6027\uff1a HID \u63a5\u53e3\u5b9e\u73b0\uff0c\u57fa\u4e8e CMSIS-DAP \u8c03\u8bd5\u534f\u8bae\uff0cHID \u63a5\u53e3\u5141\u8bb8\u5e38\u7528\u7684\u5de5\u5177\u94fe\u6765\u5bf9\u8bbe\u5907\u8fdb\u884c\u7f16\u7a0b\u53ca\u8c03\u8bd5\uff0c\u76ee\u524d\u652f\u6301\u7684\u5de5\u5177\u94fe\u5305\u62ec MDK\u3001IAR \u53ca pyOCD\uff1b \u62d6\u653e\u7f16\u7a0b\u652f\u6301\uff0c\u901a\u8fc7\u5c06 \u56fa\u4ef6\u62d6\u653e\u5230 USB \u78c1\u76d8\u5185\u5373\u5b9e\u73b0\u7f16\u7a0b \u5b9e\u73b0 USB \u4e32\u53e3\u901a\u4fe1\u529f\u80fd\u3002 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u8bbf\u95ee Arm Mbed DAPLink \u5b98\u7f51 \u3002 \u529f\u80fd\u6846\u56fe \u4ee5\u4e0b\u662f DAPLink \u7684\u529f\u80fd\u6846\u56fe\uff0c\u4f7f\u7528 Cortex-M0 \u5185\u6838\u7684 LPC11U35 \u5b9e\u73b0\uff1a \u5982\u4f55\u66f4\u65b0 DAPLink \u56fa\u4ef6\uff1f DAPLink \u4f1a\u4e0d\u65ad\u4f18\u5316\u4ee5\u53ca\u589e\u52a0\u65b0\u7684\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u56fa\u4ef6\u6765\u83b7\u5f97\u8fd9\u4e9b\u65b0\u529f\u80fd\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u53ef\u5b8c\u6210\u66f4\u65b0\uff1a \u6309\u4e0b RESET \u6309\u952e\uff0c\u8fde\u63a5\u5230 PC\uff0cDAPLink \u5c06\u8fdb\u5165 Bootloader \u6a21\u5f0f\uff0c\u7cfb\u7edf\u51fa\u73b0\u540d\u4e3a CRP DISABLD \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\uff1b \u5220\u9664 CRP DISABLD \u53ef\u79fb\u52a8\u78c1\u76d8\u4e2d\u7684 firmware.bin \u6587\u4ef6\uff1b \u4e0b\u8f7d \u6700\u65b0\u7684 DAPLink \u56fa\u4ef6 \u5c06\u56fa\u4ef6\u76f4\u63a5\u62f7\u8d1d\u5230 CRP DISABLD \u53ef\u79fb\u52a8\u78c1\u76d8\uff1b \u62f7\u8d1d\u5b8c\u6210\u540e\uff0c\u91cd\u65b0\u62d4\u63d2\u677f\u5b50\uff0c\u5373\u53ef\u5b8c\u6210\u66f4\u65b0\uff0c\u65b0\u7248\u672c\u53f7\u4ece DAPLink \u78c1\u76d8\u4e2d\u63cf\u8ff0\u6587\u4ef6\u4e2d\u83b7\u5f97\u3002 \u5982\u4f55\u7f16\u8bd1 DAPLink? \u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u7f16\u8bd1 DAPLink\uff0c\u4ee5\u4e0b\u5185\u5bb9\u5c06\u505a\u7b80\u5355\u4ecb\u7ecd\uff1a \u5b89\u88c5\u4f9d\u8d56\u5de5\u5177 \u63d0\u524d\u5b89\u88c5\u597d\u4ee5\u4e0b\u9700\u8981\u7528\u5230\u7684\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a Python 2, 2.7.9+ Git Keil MDK-ARM \u4e0b\u8f7d\u6e90\u7801 \u4ece Arm Mbed \u5b98\u65b9\u4ed3\u5e93\u514b\u9686 DAPLink \u6e90\u7801\uff1a $ git clone https://github.com/ARMmbed/DAPLink $ cd DAPLink $ pip install virtualenv $ virtualenv venv \u521b\u5efa\u7f16\u8bd1\u73af\u5883 \u4f7f\u7528 Python \u865a\u62df\u73af\u5883\uff0c\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\uff0c\u5e76\u751f\u6210 Keil \u5de5\u7a0b\uff1a $ ./venv/Scripts/activate $ pip install -r requirements.txt $ progen generate -t uvision $ ./venv/Scripts/deactivate \u7f16\u8bd1 DAPLink \u5728 projectfiles/uvision/ your-project \u76ee\u5f55\u6253\u5f00 Keil \u5de5\u7a0b\uff0c\u76f4\u63a5\u70b9\u51fb \u7f16\u8bd1 \u6309\u94ae\u5373\u53ef\u3002 \u53c2\u8003\u8d44\u6e90 Arm Mbed DAPLink \u4ed3\u5e93 \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"DAPLink"},{"location":"cn/daplink/#arm-mbed-daplinkarm-mbed-cortex","text":"","title":"Arm Mbed DAPLinkArm Mbed \u5f00\u6e90\u7684 Cortex \u82af\u7247\u8c03\u8bd5\u5de5\u5177"},{"location":"cn/daplink/#_1","text":"DAPLink \u662f Arm Mbed \u5f00\u6e90\u7684\u3001\u9488\u5bf9 Cortex-M \u82af\u7247\u7684\u8c03\u8bd5\u5de5\u5177\uff0c\u5176\u76ee\u7684\u662f\u901a\u8fc7 Cortex \u8c03\u8bd5\u5668\u6765\u5b9e\u73b0\u4ee3\u7801\u4e0b\u8f7d\u5230\u76ee\u6807\u8bbe\u5907\u3002 DAPLink \u6709\u4e09\u4e2a\u4e3b\u8981\u7279\u6027\uff1a HID \u63a5\u53e3\u5b9e\u73b0\uff0c\u57fa\u4e8e CMSIS-DAP \u8c03\u8bd5\u534f\u8bae\uff0cHID \u63a5\u53e3\u5141\u8bb8\u5e38\u7528\u7684\u5de5\u5177\u94fe\u6765\u5bf9\u8bbe\u5907\u8fdb\u884c\u7f16\u7a0b\u53ca\u8c03\u8bd5\uff0c\u76ee\u524d\u652f\u6301\u7684\u5de5\u5177\u94fe\u5305\u62ec MDK\u3001IAR \u53ca pyOCD\uff1b \u62d6\u653e\u7f16\u7a0b\u652f\u6301\uff0c\u901a\u8fc7\u5c06 \u56fa\u4ef6\u62d6\u653e\u5230 USB \u78c1\u76d8\u5185\u5373\u5b9e\u73b0\u7f16\u7a0b \u5b9e\u73b0 USB \u4e32\u53e3\u901a\u4fe1\u529f\u80fd\u3002 \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u8bbf\u95ee Arm Mbed DAPLink \u5b98\u7f51 \u3002","title":"\u7b80\u4ecb"},{"location":"cn/daplink/#_2","text":"\u4ee5\u4e0b\u662f DAPLink \u7684\u529f\u80fd\u6846\u56fe\uff0c\u4f7f\u7528 Cortex-M0 \u5185\u6838\u7684 LPC11U35 \u5b9e\u73b0\uff1a","title":"\u529f\u80fd\u6846\u56fe"},{"location":"cn/daplink/#daplink","text":"DAPLink \u4f1a\u4e0d\u65ad\u4f18\u5316\u4ee5\u53ca\u589e\u52a0\u65b0\u7684\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u56fa\u4ef6\u6765\u83b7\u5f97\u8fd9\u4e9b\u65b0\u529f\u80fd\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u53ef\u5b8c\u6210\u66f4\u65b0\uff1a \u6309\u4e0b RESET \u6309\u952e\uff0c\u8fde\u63a5\u5230 PC\uff0cDAPLink \u5c06\u8fdb\u5165 Bootloader \u6a21\u5f0f\uff0c\u7cfb\u7edf\u51fa\u73b0\u540d\u4e3a CRP DISABLD \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\uff1b \u5220\u9664 CRP DISABLD \u53ef\u79fb\u52a8\u78c1\u76d8\u4e2d\u7684 firmware.bin \u6587\u4ef6\uff1b \u4e0b\u8f7d \u6700\u65b0\u7684 DAPLink \u56fa\u4ef6 \u5c06\u56fa\u4ef6\u76f4\u63a5\u62f7\u8d1d\u5230 CRP DISABLD \u53ef\u79fb\u52a8\u78c1\u76d8\uff1b \u62f7\u8d1d\u5b8c\u6210\u540e\uff0c\u91cd\u65b0\u62d4\u63d2\u677f\u5b50\uff0c\u5373\u53ef\u5b8c\u6210\u66f4\u65b0\uff0c\u65b0\u7248\u672c\u53f7\u4ece DAPLink \u78c1\u76d8\u4e2d\u63cf\u8ff0\u6587\u4ef6\u4e2d\u83b7\u5f97\u3002","title":"\u5982\u4f55\u66f4\u65b0 DAPLink \u56fa\u4ef6\uff1f"},{"location":"cn/daplink/#daplink_1","text":"\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u7f16\u8bd1 DAPLink\uff0c\u4ee5\u4e0b\u5185\u5bb9\u5c06\u505a\u7b80\u5355\u4ecb\u7ecd\uff1a","title":"\u5982\u4f55\u7f16\u8bd1 DAPLink?"},{"location":"cn/daplink/#_3","text":"\u63d0\u524d\u5b89\u88c5\u597d\u4ee5\u4e0b\u9700\u8981\u7528\u5230\u7684\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a Python 2, 2.7.9+ Git Keil MDK-ARM","title":"\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177"},{"location":"cn/daplink/#_4","text":"\u4ece Arm Mbed \u5b98\u65b9\u4ed3\u5e93\u514b\u9686 DAPLink \u6e90\u7801\uff1a $ git clone https://github.com/ARMmbed/DAPLink $ cd DAPLink $ pip install virtualenv $ virtualenv venv","title":"\u4e0b\u8f7d\u6e90\u7801"},{"location":"cn/daplink/#_5","text":"\u4f7f\u7528 Python \u865a\u62df\u73af\u5883\uff0c\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\uff0c\u5e76\u751f\u6210 Keil \u5de5\u7a0b\uff1a $ ./venv/Scripts/activate $ pip install -r requirements.txt $ progen generate -t uvision $ ./venv/Scripts/deactivate","title":"\u521b\u5efa\u7f16\u8bd1\u73af\u5883"},{"location":"cn/daplink/#daplink_2","text":"\u5728 projectfiles/uvision/ your-project \u76ee\u5f55\u6253\u5f00 Keil \u5de5\u7a0b\uff0c\u76f4\u63a5\u70b9\u51fb \u7f16\u8bd1 \u6309\u94ae\u5373\u53ef\u3002","title":"\u7f16\u8bd1 DAPLink"},{"location":"cn/daplink/#_6","text":"Arm Mbed DAPLink \u4ed3\u5e93","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/daplink/#_7","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/espruino/","text":"Espruino \u8fd0\u884c\u5728\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u7684 MCU \u4e0a\u7684 JavaScrupt \u5f15\u64ce \u7b80\u4ecb Espruino \u662f\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u5f15\u64ce\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash 8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\u3002 \u76f8\u6bd4\u4e8e\u5176\u4ed6 JavaScript \u5f15\u64ce\uff0cEspruino \u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u8f7b\u91cf\u7ea7 \u2014\u2014 \u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash 8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\uff1b \u4e8b\u4ef6\u9a71\u52a8 \u2014\u2014 \u4e0e node.js \u7c7b\u4f3c\uff0cEspruino \u91c7\u7528\u4e8b\u4ef6\u9a71\u52a8\u673a\u5236\uff0c\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff1b \u7b80\u5355\u6613\u7528 \u2014\u2014 Espruino \u63d0\u4f9b\u4e30\u5bcc\u7684\u5916\u8bbe\u5e93\uff0c\u5bf9\u786c\u4ef6\u5c42\u505a\u4e86\u5f88\u597d\u7684\u62bd\u8c61\uff0c\u53ea\u8981\u4f1a\u5199 JavaScript \u5c31\u80fd\u7528\u5b83\u6765\u63a7\u5236\u786c\u4ef6\uff1b \u8de8\u5e73\u53f0\u5f00\u53d1 \u2014\u2014 Espruino \u63d0\u4f9b\u4e00\u4e2a\u57fa\u4e8e Chrome \u6d4f\u89c8\u7684 Web IDE\uff0c\u53ef\u4ee5\u8fdb\u884c\u8de8\u5e73\u53f0\u5f00\u53d1\uff1b \u65e0\u7ebf\u8c03\u8bd5 \u2014\u2014 Espruino Web IDE \u4f7f\u7528 Web Bluetooth API\uff0c\u53ef\u4ee5\u63d0\u4f9b\u65e0\u7ebf\u4e0b\u8f7d\u8c03\u8bd5 JavaScript \u4ee3\u7801\u529f\u80fd\u3002 \u4e86\u89e3\u66f4\u591a\u5185\u5bb9\uff0c\u53ef\u4ee5\u8bbf\u95ee Espruino \u5b98\u7f51 \u3002 \u5feb\u901f\u5165\u95e8 \u4e0b\u9762\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u5728 nRF52832-MDK \u4e0a\u8fd0\u884c\u4f7f\u7528 Espruino\u3002 \u4e0b\u8f7d Espruino \u56fa\u4ef6 \u6211\u4eec\u5df2\u7ecf\u4e3a nRF52832-MDK \u63d0\u4f9b\u4e86 Espruino \u56fa\u4ef6\uff0c\u56fa\u4ef6\u4ee5 espruino_x.x_nrf52832_mdk.hex \u65b9\u5f0f\u547d\u540d\uff0c\u4f4d\u4e8e ./nrf52832-mdk/firmware/espruino/ \u76ee\u5f55\u3002 \u8fde\u63a5 nRF52832-MDK\uff0c\u76f4\u63a5\u5c06\u8be5\u56fa\u4ef6\u62d6\u52a8\u5230 DAPLINK \u53ef\u79fb\u52a8\u78c1\u76d8\u5373\u53ef\u5b8c\u6210\u4e0b\u8f7d\uff1a \u5b89\u88c5 Espruino Web IDE Espruino \u5b98\u65b9\u63d0\u4f9b\u4e86 IDE\uff0c\u5f00\u53d1\u8d77\u6765\u975e\u5e38\u65b9\u4fbf\uff0c\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528 Chrome Web App\uff0c\u5b89\u88c5\u6b65\u9aa4\u5982\u4e0b\uff1a \u5b89\u88c5 Chrome \u6d4f\u89c8\u5668 \uff1b \u5b89\u88c5 Espruino Web IDE \u5e94\u7528\uff1b \u5728\u6d4f\u89c8\u5668\u6807\u7b7e\u680f\u6253\u5f00 \u5e94\u7528 \u56fe\u6807\u53ef\u53d1\u73b0 Espruino Web IDE \u5e94\u7528 \u8fde\u63a5 nRF52832-MDK \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5f00\u59cb\u5728 Espruino Web IDE \u4e0a\u8fde\u63a5 nRF52832-MDK\uff0c\u70b9\u51fb IDE \u5de6\u4e0a\u89d2 \u8fde\u63a5 \u56fe\u6807\uff0c\u9009\u62e9 Web Bluetooth \u6216\u4e32\u53e3\u8fdb\u884c\u8fde\u63a5\uff1a \u5bf9\u4e8e Web Bluetooth \u8fde\u63a5\uff0c\u9700\u8981\u5148\u914d\u5bf9\uff1a \u6210\u529f\u8fde\u63a5\uff0cIDE \u4f1a\u6709\u72b6\u6001\u63d0\u793a\uff1a \u8fd0\u884c\u4f60\u7684\u4ee3\u7801 \u8fde\u63a5\u6210\u529f\u540e\uff0c\u8bbe\u5907\u5373\u8fdb\u5165 REPL \u6a21\u5f0f\uff0c\u53ef\u4ee5\u5728\u5de6\u8fb9\u7a97\u53e3\u8f93\u5165\u4e00\u4e9b JavaScript \u4ee3\u7801\uff1a 1 +1 digitalWrite ( LED1,1 ) digitalWrite ( LED1,0 ) \u4e5f\u53ef\u4ee5\u5728\u53f3\u8fb9\u4ee3\u7801\u7f16\u8f91\u5668\u7a97\u53e3\u8f93\u5165 JavaScript \u4ee3\u7801\uff0c\u70b9\u51fb \u4e0a\u4f20 \u5373\u53ef\u81ea\u52a8\u52a0\u8f7d\u811a\u672c\uff1a var on = false ; setInterval ( function () { on = ! on ; LED1 . write ( on ); }, 500 ); \u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\uff0c\u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5\u67e5\u9605 Espruino \u7684\u76f8\u5173 API\uff0c\u7f16\u5199\u66f4\u6709\u8da3\u7684\u5e94\u7528\u3002 \u65e0\u7ebf\u66f4\u65b0 Espruino \u56fa\u4ef6 \u9664\u4e86\u524d\u9762\u4ecb\u7ecd\u7684\u201c\u62d6\u653e\u201d\u4e0b\u8f7d Espruino \u56fa\u4ef6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u65e0\u7ebf DFU \u7684\u65b9\u5f0f\u8fdb\u884c\u56fa\u4ef6\u66f4\u65b0\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u6253\u5f00 Chrome \u6d4f\u89c8\u5668\uff0c\u524d\u5f80 Web Bluetooth Secure DFU \u9875\u9762\uff1b \u5148\u5c06 nRF52832-MDK \u4e0a\u7684 P18 \u4e0e 3V3 \u5f15\u811a\u77ed\u63a5\uff0c\u518d\u4e0a\u7535\uff0c\u7ea2\u84dd\u706f\u4e00\u8d77\u4eae\uff0c\u65ad\u5f00 P18 \u4e0e 3V3 \uff0c\u84dd\u8272\u706f\u4eae\uff0c\u6b64\u65f6\u8bbe\u5907\u5373\u8fdb\u5165 DFU \u6a21\u5f0f\uff1b \u5728\u6d4f\u89c8\u5668\u9875\u9762\u9009\u62e9\u76f8\u5173\u56fa\u4ef6\u5305\uff0c\u56fa\u4ef6\u4f4d\u4e8e nrf52832-mdk/firmware/espruino/ \uff0c\u4ee5 espruino_x.x_nrf52832_mdk.zip \u65b9\u5f0f\u547d\u540d\uff1b \u8fde\u63a5\u540d\u4e3a DfuTarg \u7684\u8bbe\u5907\uff0c\u7b49\u5f85\u66f4\u65b0\u5b8c\u6210\u5373\u53ef\uff0c\u5982\u679c\u4e2d\u9014\u4e0d\u614e\u4e2d\u65ad\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u5373\u53ef\u3002 \u5982\u4f55\u7f16\u8bd1 Espruino\uff1f \u8fd9\u90e8\u5206\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u81ea\u5df1\u52a8\u624b\u7f16\u8bd1 Espruino\uff0c\u4ee5 macOS \u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5176\u4ed6\u5e73\u53f0\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002 \u642d\u5efa\u7f16\u8bd1\u73af\u5883 \u4e0b\u8f7d\u5b89\u88c5 GNU Arm Embedded toolchains\uff0c\u5e76\u786e\u4fdd\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff1a path to install directory /gcc-arm-none-eabi-6-2017-q1-update/bin \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\uff1a $ arm-none-eabi-gcc --version \u6ce8\u610f \u6700\u65b0\u7248 GNU Arm Embedded toolchains \u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u652f\u6301 nRF52832-MDK \u9996\u5148\uff0c\u514b\u9686 Espruino \u6e90\u7801\u5230\u672c\u5730\uff1a $ git clone https://github.com/espruino/Espruino.git \u4e3a\u4e86\u652f\u6301 nRF52832-MDK \u786c\u4ef6\uff0c\u9700\u8981\u5728 ./Espruino/boards/ \u76ee\u5f55\u6dfb\u52a0 NRF52832_MDK.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import pinutils ; info = { name : nRF52832-MDK , link : [ https://wiki.makerdiary.com/nrf52832-mdk/ ], # This is the nRF52832-MDK default_console : EV_SERIAL1 , default_console_tx : D20 , default_console_rx : D19 , default_console_baudrate : 9600 , variables : 2250 , # How many variables are allocated for Espruino to use. RAM will be overflowed if this number is too high and code won t compile. bootloader : 1 , binary_name : espruino_%v_nrf52832_mdk.hex , build : { optimizeflags : -Os , libraries : [ BLUETOOTH , NET , GRAPHICS , CRYPTO , NFC , NEOPIXEL ], makefile : [ DEFINES+=-DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1 , # Looks like proper production nRF52s had this issue DEFINES+=-DCONFIG_GPIO_AS_PINRESET , # Allow the reset pin to work DEFINES+=-DBLUETOOTH_NAME_PREFIX= \\ nRF52832-MDK \\ , DFU_PRIVATE_KEY=targets/nrf5x_dfu/dfu_private_key.pem , DFU_SETTINGS=--application-version 0xff --hw-version 52 --sd-req 0x8C ] } }; chip = { part : NRF52832 , family : NRF52 , package : QFN48 , ram : 64 , flash : 512 , speed : 64 , usart : 1 , spi : 3 , i2c : 2 , adc : 1 , dac : 0 , saved_code : { address : (( 118 - 10 ) * 4096 ), # Bootloader takes pages 120-127, FS takes 118-119 page_size : 4096 , pages : 10 , flash_available : 512 - (( 31 + 8 + 2 + 10 ) * 4 ) # Softdevice uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb. }, }; devices = { BTN1 : { pin : D18 , pinstate : IN_PULLDOWN }, # Pin negated in software LED1 : { pin : D22 , inverted : False }, # Pin negated in software LED2 : { pin : D23 , inverted : False }, # Pin negated in software LED3 : { pin : D24 , inverted : False }, # Pin negated in software RX_PIN_NUMBER : { pin : D19 }, TX_PIN_NUMBER : { pin : D20 }, CTS_PIN_NUMBER : { pin : D7 }, RTS_PIN_NUMBER : { pin : D5 }, # Pin D22 is used for clock when driving neopixels - as not specifying a pin seems to break things }; # left-right, or top-bottom order board = { left : [ VIN , 5V , GND , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PD16 , PD17 , PD18 ], right : [ 3V3 , GND , RST , CLK , DIO , TDO , TDI , TXD , RXD , PD3 , PD2 , PD31 , PD30 , PD29 , PD28 , PD27 , PD26 , PD25 ], }; board [ _css ] = ; def get_pins (): pins = pinutils . generate_pins ( 0 , 31 ) # 32 General Purpose I/O Pins. pinutils . findpin ( pins , PD0 , True )[ functions ][ XL1 ] = 0 ; pinutils . findpin ( pins , PD1 , True )[ functions ][ XL2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD6 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD7 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD8 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD9 , True )[ functions ][ NFC1 ] = 0 ; pinutils . findpin ( pins , PD10 , True )[ functions ][ NFC2 ] = 0 ; pinutils . findpin ( pins , PD13 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD14 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD15 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD16 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD17 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD18 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD19 , True )[ functions ][ RXD ] = 0 ; pinutils . findpin ( pins , PD20 , True )[ functions ][ TXD ] = 0 ; pinutils . findpin ( pins , PD22 , True )[ functions ][ LED_1 ] = 0 ; pinutils . findpin ( pins , PD23 , True )[ functions ][ LED_2 ] = 0 ; pinutils . findpin ( pins , PD24 , True )[ functions ][ LED_3 ] = 0 ; pinutils . findpin ( pins , PD2 , True )[ functions ][ ADC1_IN0 ] = 0 ; pinutils . findpin ( pins , PD3 , True )[ functions ][ ADC1_IN1 ] = 0 ; pinutils . findpin ( pins , PD4 , True )[ functions ][ ADC1_IN2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ ADC1_IN3 ] = 0 ; pinutils . findpin ( pins , PD28 , True )[ functions ][ ADC1_IN4 ] = 0 ; pinutils . findpin ( pins , PD29 , True )[ functions ][ ADC1_IN5 ] = 0 ; pinutils . findpin ( pins , PD30 , True )[ functions ][ ADC1_IN6 ] = 0 ; pinutils . findpin ( pins , PD31 , True )[ functions ][ ADC1_IN7 ] = 0 ; # everything is non-5v tolerant for pin in pins : pin [ functions ][ 3.3 ] = 0 ; #The boot/reset button will function as a reset button in normal operation. Pin reset on PD21 needs to be enabled on the nRF52832 device for this to work. return pins \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u6211\u4eec\u4fee\u6539\u597d\u7684\u4ed3\u5e93\uff1a $ git clone https://github.com/makerdiary/Espruino.git \u7f16\u8bd1 Espruino \u56fa\u4ef6 \u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1 Espruino\uff0c\u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230 Espruino \u76ee\u5f55\uff1a $ cd Espruino git clone location /Espruino \u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u53ef\u4ee5\u7f16\u8bd1\u5b8c\u6574\u56fa\u4ef6\uff0c\u5c06\u751f\u6210 .hex \u6587\u4ef6\uff1a $ make clean BOARD = NRF52832_MDK RELEASE = 1 make \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u53ef\u4ee5\u7f16\u8bd1 DFU \u56fa\u4ef6\uff0c\u5c06\u751f\u6210 .zip \u6587\u4ef6\uff1a $ make clean DFU_UPDATE_BUILD = 1 BOARD = NRF52832_MDK RELEASE = 1 make \u53c2\u8003\u8d44\u6e90 Espruino \u5b98\u7f51 Espruino API \u6587\u6863 Espruino \u6a21\u5757 Espruino \u5b98\u65b9\u4ed3\u5e93 makerdiary/Espruino \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"Espruino"},{"location":"cn/espruino/#espruino-mcu-javascrupt","text":"","title":"Espruino\u8fd0\u884c\u5728\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u7684 MCU \u4e0a\u7684 JavaScrupt \u5f15\u64ce"},{"location":"cn/espruino/#_1","text":"Espruino \u662f\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u5f15\u64ce\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash 8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\u3002 \u76f8\u6bd4\u4e8e\u5176\u4ed6 JavaScript \u5f15\u64ce\uff0cEspruino \u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u8f7b\u91cf\u7ea7 \u2014\u2014 \u53ef\u4ee5\u8fd0\u884c\u5728 128KB Flash 8KB RAM \u7684\u5fae\u63a7\u5236\u5668 (MCU) \u4e0a\uff1b \u4e8b\u4ef6\u9a71\u52a8 \u2014\u2014 \u4e0e node.js \u7c7b\u4f3c\uff0cEspruino \u91c7\u7528\u4e8b\u4ef6\u9a71\u52a8\u673a\u5236\uff0c\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff1b \u7b80\u5355\u6613\u7528 \u2014\u2014 Espruino \u63d0\u4f9b\u4e30\u5bcc\u7684\u5916\u8bbe\u5e93\uff0c\u5bf9\u786c\u4ef6\u5c42\u505a\u4e86\u5f88\u597d\u7684\u62bd\u8c61\uff0c\u53ea\u8981\u4f1a\u5199 JavaScript \u5c31\u80fd\u7528\u5b83\u6765\u63a7\u5236\u786c\u4ef6\uff1b \u8de8\u5e73\u53f0\u5f00\u53d1 \u2014\u2014 Espruino \u63d0\u4f9b\u4e00\u4e2a\u57fa\u4e8e Chrome \u6d4f\u89c8\u7684 Web IDE\uff0c\u53ef\u4ee5\u8fdb\u884c\u8de8\u5e73\u53f0\u5f00\u53d1\uff1b \u65e0\u7ebf\u8c03\u8bd5 \u2014\u2014 Espruino Web IDE \u4f7f\u7528 Web Bluetooth API\uff0c\u53ef\u4ee5\u63d0\u4f9b\u65e0\u7ebf\u4e0b\u8f7d\u8c03\u8bd5 JavaScript \u4ee3\u7801\u529f\u80fd\u3002 \u4e86\u89e3\u66f4\u591a\u5185\u5bb9\uff0c\u53ef\u4ee5\u8bbf\u95ee Espruino \u5b98\u7f51 \u3002","title":"\u7b80\u4ecb"},{"location":"cn/espruino/#_2","text":"\u4e0b\u9762\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u5728 nRF52832-MDK \u4e0a\u8fd0\u884c\u4f7f\u7528 Espruino\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"cn/espruino/#espruino","text":"\u6211\u4eec\u5df2\u7ecf\u4e3a nRF52832-MDK \u63d0\u4f9b\u4e86 Espruino \u56fa\u4ef6\uff0c\u56fa\u4ef6\u4ee5 espruino_x.x_nrf52832_mdk.hex \u65b9\u5f0f\u547d\u540d\uff0c\u4f4d\u4e8e ./nrf52832-mdk/firmware/espruino/ \u76ee\u5f55\u3002 \u8fde\u63a5 nRF52832-MDK\uff0c\u76f4\u63a5\u5c06\u8be5\u56fa\u4ef6\u62d6\u52a8\u5230 DAPLINK \u53ef\u79fb\u52a8\u78c1\u76d8\u5373\u53ef\u5b8c\u6210\u4e0b\u8f7d\uff1a","title":"\u4e0b\u8f7d Espruino \u56fa\u4ef6"},{"location":"cn/espruino/#espruino-web-ide","text":"Espruino \u5b98\u65b9\u63d0\u4f9b\u4e86 IDE\uff0c\u5f00\u53d1\u8d77\u6765\u975e\u5e38\u65b9\u4fbf\uff0c\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528 Chrome Web App\uff0c\u5b89\u88c5\u6b65\u9aa4\u5982\u4e0b\uff1a \u5b89\u88c5 Chrome \u6d4f\u89c8\u5668 \uff1b \u5b89\u88c5 Espruino Web IDE \u5e94\u7528\uff1b \u5728\u6d4f\u89c8\u5668\u6807\u7b7e\u680f\u6253\u5f00 \u5e94\u7528 \u56fe\u6807\u53ef\u53d1\u73b0 Espruino Web IDE \u5e94\u7528","title":"\u5b89\u88c5 Espruino Web IDE"},{"location":"cn/espruino/#nrf52832-mdk","text":"\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5f00\u59cb\u5728 Espruino Web IDE \u4e0a\u8fde\u63a5 nRF52832-MDK\uff0c\u70b9\u51fb IDE \u5de6\u4e0a\u89d2 \u8fde\u63a5 \u56fe\u6807\uff0c\u9009\u62e9 Web Bluetooth \u6216\u4e32\u53e3\u8fdb\u884c\u8fde\u63a5\uff1a \u5bf9\u4e8e Web Bluetooth \u8fde\u63a5\uff0c\u9700\u8981\u5148\u914d\u5bf9\uff1a \u6210\u529f\u8fde\u63a5\uff0cIDE \u4f1a\u6709\u72b6\u6001\u63d0\u793a\uff1a","title":"\u8fde\u63a5 nRF52832-MDK"},{"location":"cn/espruino/#_3","text":"\u8fde\u63a5\u6210\u529f\u540e\uff0c\u8bbe\u5907\u5373\u8fdb\u5165 REPL \u6a21\u5f0f\uff0c\u53ef\u4ee5\u5728\u5de6\u8fb9\u7a97\u53e3\u8f93\u5165\u4e00\u4e9b JavaScript \u4ee3\u7801\uff1a 1 +1 digitalWrite ( LED1,1 ) digitalWrite ( LED1,0 ) \u4e5f\u53ef\u4ee5\u5728\u53f3\u8fb9\u4ee3\u7801\u7f16\u8f91\u5668\u7a97\u53e3\u8f93\u5165 JavaScript \u4ee3\u7801\uff0c\u70b9\u51fb \u4e0a\u4f20 \u5373\u53ef\u81ea\u52a8\u52a0\u8f7d\u811a\u672c\uff1a var on = false ; setInterval ( function () { on = ! on ; LED1 . write ( on ); }, 500 ); \u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\uff0c\u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5\u67e5\u9605 Espruino \u7684\u76f8\u5173 API\uff0c\u7f16\u5199\u66f4\u6709\u8da3\u7684\u5e94\u7528\u3002","title":"\u8fd0\u884c\u4f60\u7684\u4ee3\u7801"},{"location":"cn/espruino/#espruino_1","text":"\u9664\u4e86\u524d\u9762\u4ecb\u7ecd\u7684\u201c\u62d6\u653e\u201d\u4e0b\u8f7d Espruino \u56fa\u4ef6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u65e0\u7ebf DFU \u7684\u65b9\u5f0f\u8fdb\u884c\u56fa\u4ef6\u66f4\u65b0\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u6253\u5f00 Chrome \u6d4f\u89c8\u5668\uff0c\u524d\u5f80 Web Bluetooth Secure DFU \u9875\u9762\uff1b \u5148\u5c06 nRF52832-MDK \u4e0a\u7684 P18 \u4e0e 3V3 \u5f15\u811a\u77ed\u63a5\uff0c\u518d\u4e0a\u7535\uff0c\u7ea2\u84dd\u706f\u4e00\u8d77\u4eae\uff0c\u65ad\u5f00 P18 \u4e0e 3V3 \uff0c\u84dd\u8272\u706f\u4eae\uff0c\u6b64\u65f6\u8bbe\u5907\u5373\u8fdb\u5165 DFU \u6a21\u5f0f\uff1b \u5728\u6d4f\u89c8\u5668\u9875\u9762\u9009\u62e9\u76f8\u5173\u56fa\u4ef6\u5305\uff0c\u56fa\u4ef6\u4f4d\u4e8e nrf52832-mdk/firmware/espruino/ \uff0c\u4ee5 espruino_x.x_nrf52832_mdk.zip \u65b9\u5f0f\u547d\u540d\uff1b \u8fde\u63a5\u540d\u4e3a DfuTarg \u7684\u8bbe\u5907\uff0c\u7b49\u5f85\u66f4\u65b0\u5b8c\u6210\u5373\u53ef\uff0c\u5982\u679c\u4e2d\u9014\u4e0d\u614e\u4e2d\u65ad\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u5373\u53ef\u3002","title":"\u65e0\u7ebf\u66f4\u65b0 Espruino \u56fa\u4ef6"},{"location":"cn/espruino/#espruino_2","text":"\u8fd9\u90e8\u5206\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u81ea\u5df1\u52a8\u624b\u7f16\u8bd1 Espruino\uff0c\u4ee5 macOS \u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5176\u4ed6\u5e73\u53f0\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002","title":"\u5982\u4f55\u7f16\u8bd1 Espruino\uff1f"},{"location":"cn/espruino/#_4","text":"\u4e0b\u8f7d\u5b89\u88c5 GNU Arm Embedded toolchains\uff0c\u5e76\u786e\u4fdd\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff1a path to install directory /gcc-arm-none-eabi-6-2017-q1-update/bin \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\uff1a $ arm-none-eabi-gcc --version \u6ce8\u610f \u6700\u65b0\u7248 GNU Arm Embedded toolchains \u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002","title":"\u642d\u5efa\u7f16\u8bd1\u73af\u5883"},{"location":"cn/espruino/#nrf52832-mdk_1","text":"\u9996\u5148\uff0c\u514b\u9686 Espruino \u6e90\u7801\u5230\u672c\u5730\uff1a $ git clone https://github.com/espruino/Espruino.git \u4e3a\u4e86\u652f\u6301 nRF52832-MDK \u786c\u4ef6\uff0c\u9700\u8981\u5728 ./Espruino/boards/ \u76ee\u5f55\u6dfb\u52a0 NRF52832_MDK.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import pinutils ; info = { name : nRF52832-MDK , link : [ https://wiki.makerdiary.com/nrf52832-mdk/ ], # This is the nRF52832-MDK default_console : EV_SERIAL1 , default_console_tx : D20 , default_console_rx : D19 , default_console_baudrate : 9600 , variables : 2250 , # How many variables are allocated for Espruino to use. RAM will be overflowed if this number is too high and code won t compile. bootloader : 1 , binary_name : espruino_%v_nrf52832_mdk.hex , build : { optimizeflags : -Os , libraries : [ BLUETOOTH , NET , GRAPHICS , CRYPTO , NFC , NEOPIXEL ], makefile : [ DEFINES+=-DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1 , # Looks like proper production nRF52s had this issue DEFINES+=-DCONFIG_GPIO_AS_PINRESET , # Allow the reset pin to work DEFINES+=-DBLUETOOTH_NAME_PREFIX= \\ nRF52832-MDK \\ , DFU_PRIVATE_KEY=targets/nrf5x_dfu/dfu_private_key.pem , DFU_SETTINGS=--application-version 0xff --hw-version 52 --sd-req 0x8C ] } }; chip = { part : NRF52832 , family : NRF52 , package : QFN48 , ram : 64 , flash : 512 , speed : 64 , usart : 1 , spi : 3 , i2c : 2 , adc : 1 , dac : 0 , saved_code : { address : (( 118 - 10 ) * 4096 ), # Bootloader takes pages 120-127, FS takes 118-119 page_size : 4096 , pages : 10 , flash_available : 512 - (( 31 + 8 + 2 + 10 ) * 4 ) # Softdevice uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb. }, }; devices = { BTN1 : { pin : D18 , pinstate : IN_PULLDOWN }, # Pin negated in software LED1 : { pin : D22 , inverted : False }, # Pin negated in software LED2 : { pin : D23 , inverted : False }, # Pin negated in software LED3 : { pin : D24 , inverted : False }, # Pin negated in software RX_PIN_NUMBER : { pin : D19 }, TX_PIN_NUMBER : { pin : D20 }, CTS_PIN_NUMBER : { pin : D7 }, RTS_PIN_NUMBER : { pin : D5 }, # Pin D22 is used for clock when driving neopixels - as not specifying a pin seems to break things }; # left-right, or top-bottom order board = { left : [ VIN , 5V , GND , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PD16 , PD17 , PD18 ], right : [ 3V3 , GND , RST , CLK , DIO , TDO , TDI , TXD , RXD , PD3 , PD2 , PD31 , PD30 , PD29 , PD28 , PD27 , PD26 , PD25 ], }; board [ _css ] = ; def get_pins (): pins = pinutils . generate_pins ( 0 , 31 ) # 32 General Purpose I/O Pins. pinutils . findpin ( pins , PD0 , True )[ functions ][ XL1 ] = 0 ; pinutils . findpin ( pins , PD1 , True )[ functions ][ XL2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD6 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD7 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD8 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD9 , True )[ functions ][ NFC1 ] = 0 ; pinutils . findpin ( pins , PD10 , True )[ functions ][ NFC2 ] = 0 ; pinutils . findpin ( pins , PD13 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD14 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD15 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD16 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD17 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD18 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD19 , True )[ functions ][ RXD ] = 0 ; pinutils . findpin ( pins , PD20 , True )[ functions ][ TXD ] = 0 ; pinutils . findpin ( pins , PD22 , True )[ functions ][ LED_1 ] = 0 ; pinutils . findpin ( pins , PD23 , True )[ functions ][ LED_2 ] = 0 ; pinutils . findpin ( pins , PD24 , True )[ functions ][ LED_3 ] = 0 ; pinutils . findpin ( pins , PD2 , True )[ functions ][ ADC1_IN0 ] = 0 ; pinutils . findpin ( pins , PD3 , True )[ functions ][ ADC1_IN1 ] = 0 ; pinutils . findpin ( pins , PD4 , True )[ functions ][ ADC1_IN2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ ADC1_IN3 ] = 0 ; pinutils . findpin ( pins , PD28 , True )[ functions ][ ADC1_IN4 ] = 0 ; pinutils . findpin ( pins , PD29 , True )[ functions ][ ADC1_IN5 ] = 0 ; pinutils . findpin ( pins , PD30 , True )[ functions ][ ADC1_IN6 ] = 0 ; pinutils . findpin ( pins , PD31 , True )[ functions ][ ADC1_IN7 ] = 0 ; # everything is non-5v tolerant for pin in pins : pin [ functions ][ 3.3 ] = 0 ; #The boot/reset button will function as a reset button in normal operation. Pin reset on PD21 needs to be enabled on the nRF52832 device for this to work. return pins \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u6211\u4eec\u4fee\u6539\u597d\u7684\u4ed3\u5e93\uff1a $ git clone https://github.com/makerdiary/Espruino.git","title":"\u652f\u6301 nRF52832-MDK"},{"location":"cn/espruino/#espruino_3","text":"\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1 Espruino\uff0c\u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230 Espruino \u76ee\u5f55\uff1a $ cd Espruino git clone location /Espruino \u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u53ef\u4ee5\u7f16\u8bd1\u5b8c\u6574\u56fa\u4ef6\uff0c\u5c06\u751f\u6210 .hex \u6587\u4ef6\uff1a $ make clean BOARD = NRF52832_MDK RELEASE = 1 make \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u53ef\u4ee5\u7f16\u8bd1 DFU \u56fa\u4ef6\uff0c\u5c06\u751f\u6210 .zip \u6587\u4ef6\uff1a $ make clean DFU_UPDATE_BUILD = 1 BOARD = NRF52832_MDK RELEASE = 1 make","title":"\u7f16\u8bd1 Espruino \u56fa\u4ef6"},{"location":"cn/espruino/#_5","text":"Espruino \u5b98\u7f51 Espruino API \u6587\u6863 Espruino \u6a21\u5757 Espruino \u5b98\u65b9\u4ed3\u5e93 makerdiary/Espruino","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/espruino/#_6","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/getting-started/","text":"nRF52832-MDK \u5feb\u901f\u5165\u95e8\u6307\u5357 \u611f\u8c22\u4f7f\u7528 nRF52832-MDK! \u672c\u6307\u5357\u5c06\u6307\u5f15\u4f60\u5982\u4f55\u5feb\u901f\u5f00\u59cb nRF52832-MDK \u5f00\u53d1\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5927\u6982\u9700\u8981 20 \u5206\u949f\u3002 \u7b2c\u4e00\u6b65\uff1a\u8fde\u63a5 nRF52832-MDK \u4f7f\u7528 Micro USB \u6570\u636e\u7ebf\uff0c\u5c06 nRF52832-MDK \u8fde\u63a5\u81f3 PC\uff0c\u7eff\u8272\u7535\u6e90\u6307\u793a\u706f\u5c06\u5e38\u4eae\uff0c\u53e6\u5916\u7684\u7eff\u8272 LED \u5e38\u4eae\u8868\u793a\u84dd\u7259\u6b63\u5728\u5e7f\u64ad\uff1a \u6253\u5f00 PC \u7684\u8d44\u6e90\u6d4f\u89c8\u5668\uff0cnRF52832-MDK \u5c06\u88ab\u8bc6\u522b\u6210\u4e00\u4e2a\u540d\u4e3a DAPLINK \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\u8bbe\u5907\uff1a \u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u4e32\u53e3\u7ec8\u7aef Windows \u5728 Windows \u73af\u5883\u4e0b\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4e32\u53e3\u9a71\u52a8\uff0c \u70b9\u51fb\u4e0b\u8f7d \u5e76\u5b89\u88c5\u9a71\u52a8\u3002 \u63d0\u793a \u5bf9\u4e8e Windows 10 \u4ee5\u4e0a\u7cfb\u7edf\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5b89\u88c5\u9a71\u52a8\u3002 \u4e32\u53e3\u5de5\u5177\u5efa\u8bae\u4f7f\u7528\u514d\u8d39\u7684 PuTTY \uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff0c\u4e32\u53e3\u53f7\u53ef\u4ee5\u5728 \u8bbe\u5907\u7ba1\u7406\u5668 \u4e2d\u67e5\u770b\uff1a macOS macOS \u7528\u6237\u53ef\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u7684\u7ec8\u7aef\u5de5\u5177 screen , \u5177\u4f53\u547d\u4ee4\u5982\u4e0b\uff1a $ screen /dev/cu.usbmodem1412 115200 \u5c0f\u6280\u5de7 \u53ef\u4ee5\u5728\u7ec8\u7aef\u5148\u8f93\u5165 screen /dev/cu.usb \uff0c\u7136\u540e\u6309\u4e0b tab \uff0c\u8bbe\u5907\u540d\u79f0\u5c06\u81ea\u52a8\u8865\u9f50\u3002 \u6309\u4e0b Ctrl + A \uff0c\u518d\u6309\u4e0b K \uff0c\u5728\u7a97\u53e3\u5e95\u90e8\u4f1a\u51fa\u73b0\u63d0\u793a\u7b26 [y/n] \uff0c\u8f93\u5165 y \u5373\u53ef\u9000\u51fa\u4e32\u53e3\u7ec8\u7aef\u3002 Linux \u5728 Linux \u73af\u5883\u4e0b\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 screen \u5de5\u5177\uff0c\u8fd9\u91cc\u4ee5 Ubuntu 16.04 \u4e3a\u4f8b\uff1a $ sudo apt-get install screen $ sudo screen /dev/ttyACM0 115200 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528 nRF Connect \u4ece App Store \u6216 Google Play \u4e0b\u8f7d nRF Connect \u5e94\u7528\uff1b \u6253\u5f00 app\uff0c\u626b\u63cf\u8bbe\u5907\uff0c\u4f60\u5c06\u770b\u5230\u540d\u4e3a nRF52832-MDK \u7684\u8bbe\u5907\u6b63\u5728\u5e7f\u64ad\uff0c\u8fde\u63a5\u8be5\u8bbe\u5907\uff1b \u84dd\u8272 LED \u4eae\u3001\u7eff\u8272 LED \u706d\uff0c\u8868\u660e\u8bbe\u5907\u4ece\u5e7f\u64ad\u6001\u8fdb\u5165\u8fde\u63a5\u6001\uff0c\u540c\u65f6\u53ef\u4ee5\u89c2\u5bdf\u5230\u8be5\u8bbe\u5907\u80fd\u591f\u63d0\u4f9b\u7684\u670d\u52a1\uff1b \u5148\u540e\u5bf9 Nordic Blinky LED \u5c5e\u6027 (0x1525) \u5199\u5165 01 \u3001 00 \uff0c\u53ef\u89c2\u5bdf\u5230 LED \u7684\u72b6\u6001\u53d8\u5316\u3002 \u63d0\u793a \u8be5\u6f14\u793a demo \u6e90\u7801\u4f4d\u4e8e ./nrf52832-mdk/examples/nrf5-sdk/ble_app_blinky \u3002 \u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f nRF52832-MDK \u677f\u4e0a\u96c6\u6210\u4e86 DAPLink \u591a\u529f\u80fd\u8c03\u8bd5\u5668\uff0c\u53ef\u7528\u4e8e\u4e0b\u8f7d\u56fa\u4ef6\u3001\u8c03\u8bd5\u4ee3\u7801\u3001\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u4e0b\u8f7d\u65b9\u5f0f\uff1a \u201c\u62d6\u653e\u201d\u4e0b\u8f7d \u4f7f\u7528 pyOCD \u4e0b\u8f7d \u201c\u62d6\u653e\u201d\u4e0b\u8f7d \u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bc6\u522b\u5230 DAPLINK \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u76f4\u63a5\u628a .hex \u56fa\u4ef6\u62d6\u653e\u5230\u8be5\u78c1\u76d8\u5373\u53ef\u5f00\u59cb\u4e0b\u8f7d\uff0c\u7b49\u5f85\u4e0b\u8f7d\u5b8c\u6210.... \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u6309\u4e0b\u590d\u4f4d\u6309\u94ae\u4fbf\u53ef\u8fd0\u884c\u65b0\u56fa\u4ef6\u3002 \u4f7f\u7528 pyOCD pyOCD \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, macOS, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u901a\u8fc7 pip \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a $ pip install --pre -U pyocd \u6216\u8005\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5b89\u88c5\u6700\u65b0\u5f00\u53d1\u7248\u672c\uff0c\u4f53\u9a8c\u4e00\u4e9b\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u65b0\u529f\u80fd\uff1a $ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip \u6ce8\u610f \u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528 pyOCD\uff0c\u9700\u8981\u5728\u5b89\u88c5\u547d\u4ee4\u524d\u589e\u52a0 sudo -H \u8fdb\u884c\u5168\u5c40\u5b89\u88c5\u3002 \u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u53ef\u5b8c\u6210\u56fa\u4ef6\u4e0b\u8f7d\u3001\u64e6\u9664\uff1a # -se \u8868\u793a\u53ea\u64e6\u9664\u9700\u8981\u7528\u5230\u7684\u533a\u57df $ pyocd-flashtool -t nrf52 -se your-hex-file.hex # \u5982\u679c\u9700\u8981\u6574\u7247\u64e6\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528 -ce \u53c2\u6570 $ pyocd-flashtool -t nrf52 -ce your-hex-file.hex # \u5982\u679c\u53ea\u662f\u60f3\u64e6\u9664\uff0c\u4e0d\u7f16\u7a0b\uff0c\u53ef\u4ee5\u4e0d\u5e26hex\u6587\u4ef6\u53c2\u6570 $ pyocd-flashtool -t nrf52 -ce \u4e0b\u8f7d\u9879\u76ee\u6e90\u7801 nRF52832-MDK \u7684\u6240\u6709\u793a\u4f8b\u4ee3\u7801\u53ca\u6587\u6863\u6258\u7ba1\u5728 GitHub makerdiary/nrf52832-mdk \u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u4e0b\u8f7d\u6216\u514b\u9686\u5230\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\u4e0b\u4f7f\u7528\uff1a $ git clone https://github.com/makerdiary/nrf52832-mdk.git \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u5feb\u901f\u5165\u95e8"},{"location":"cn/getting-started/#nrf52832-mdk","text":"\u611f\u8c22\u4f7f\u7528 nRF52832-MDK! \u672c\u6307\u5357\u5c06\u6307\u5f15\u4f60\u5982\u4f55\u5feb\u901f\u5f00\u59cb nRF52832-MDK \u5f00\u53d1\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5927\u6982\u9700\u8981 20 \u5206\u949f\u3002","title":"nRF52832-MDK \u5feb\u901f\u5165\u95e8\u6307\u5357"},{"location":"cn/getting-started/#nrf52832-mdk_1","text":"\u4f7f\u7528 Micro USB \u6570\u636e\u7ebf\uff0c\u5c06 nRF52832-MDK \u8fde\u63a5\u81f3 PC\uff0c\u7eff\u8272\u7535\u6e90\u6307\u793a\u706f\u5c06\u5e38\u4eae\uff0c\u53e6\u5916\u7684\u7eff\u8272 LED \u5e38\u4eae\u8868\u793a\u84dd\u7259\u6b63\u5728\u5e7f\u64ad\uff1a \u6253\u5f00 PC \u7684\u8d44\u6e90\u6d4f\u89c8\u5668\uff0cnRF52832-MDK \u5c06\u88ab\u8bc6\u522b\u6210\u4e00\u4e2a\u540d\u4e3a DAPLINK \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\u8bbe\u5907\uff1a","title":"\u7b2c\u4e00\u6b65\uff1a\u8fde\u63a5 nRF52832-MDK"},{"location":"cn/getting-started/#_1","text":"","title":"\u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u4e32\u53e3\u7ec8\u7aef"},{"location":"cn/getting-started/#windows","text":"\u5728 Windows \u73af\u5883\u4e0b\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4e32\u53e3\u9a71\u52a8\uff0c \u70b9\u51fb\u4e0b\u8f7d \u5e76\u5b89\u88c5\u9a71\u52a8\u3002 \u63d0\u793a \u5bf9\u4e8e Windows 10 \u4ee5\u4e0a\u7cfb\u7edf\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5b89\u88c5\u9a71\u52a8\u3002 \u4e32\u53e3\u5de5\u5177\u5efa\u8bae\u4f7f\u7528\u514d\u8d39\u7684 PuTTY \uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff0c\u4e32\u53e3\u53f7\u53ef\u4ee5\u5728 \u8bbe\u5907\u7ba1\u7406\u5668 \u4e2d\u67e5\u770b\uff1a","title":"Windows"},{"location":"cn/getting-started/#macos","text":"macOS \u7528\u6237\u53ef\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u7684\u7ec8\u7aef\u5de5\u5177 screen , \u5177\u4f53\u547d\u4ee4\u5982\u4e0b\uff1a $ screen /dev/cu.usbmodem1412 115200 \u5c0f\u6280\u5de7 \u53ef\u4ee5\u5728\u7ec8\u7aef\u5148\u8f93\u5165 screen /dev/cu.usb \uff0c\u7136\u540e\u6309\u4e0b tab \uff0c\u8bbe\u5907\u540d\u79f0\u5c06\u81ea\u52a8\u8865\u9f50\u3002 \u6309\u4e0b Ctrl + A \uff0c\u518d\u6309\u4e0b K \uff0c\u5728\u7a97\u53e3\u5e95\u90e8\u4f1a\u51fa\u73b0\u63d0\u793a\u7b26 [y/n] \uff0c\u8f93\u5165 y \u5373\u53ef\u9000\u51fa\u4e32\u53e3\u7ec8\u7aef\u3002","title":"macOS"},{"location":"cn/getting-started/#linux","text":"\u5728 Linux \u73af\u5883\u4e0b\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 screen \u5de5\u5177\uff0c\u8fd9\u91cc\u4ee5 Ubuntu 16.04 \u4e3a\u4f8b\uff1a $ sudo apt-get install screen $ sudo screen /dev/ttyACM0 115200","title":"Linux"},{"location":"cn/getting-started/#nrf-connect","text":"\u4ece App Store \u6216 Google Play \u4e0b\u8f7d nRF Connect \u5e94\u7528\uff1b \u6253\u5f00 app\uff0c\u626b\u63cf\u8bbe\u5907\uff0c\u4f60\u5c06\u770b\u5230\u540d\u4e3a nRF52832-MDK \u7684\u8bbe\u5907\u6b63\u5728\u5e7f\u64ad\uff0c\u8fde\u63a5\u8be5\u8bbe\u5907\uff1b \u84dd\u8272 LED \u4eae\u3001\u7eff\u8272 LED \u706d\uff0c\u8868\u660e\u8bbe\u5907\u4ece\u5e7f\u64ad\u6001\u8fdb\u5165\u8fde\u63a5\u6001\uff0c\u540c\u65f6\u53ef\u4ee5\u89c2\u5bdf\u5230\u8be5\u8bbe\u5907\u80fd\u591f\u63d0\u4f9b\u7684\u670d\u52a1\uff1b \u5148\u540e\u5bf9 Nordic Blinky LED \u5c5e\u6027 (0x1525) \u5199\u5165 01 \u3001 00 \uff0c\u53ef\u89c2\u5bdf\u5230 LED \u7684\u72b6\u6001\u53d8\u5316\u3002 \u63d0\u793a \u8be5\u6f14\u793a demo \u6e90\u7801\u4f4d\u4e8e ./nrf52832-mdk/examples/nrf5-sdk/ble_app_blinky \u3002","title":"\u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528 nRF Connect"},{"location":"cn/getting-started/#_2","text":"nRF52832-MDK \u677f\u4e0a\u96c6\u6210\u4e86 DAPLink \u591a\u529f\u80fd\u8c03\u8bd5\u5668\uff0c\u53ef\u7528\u4e8e\u4e0b\u8f7d\u56fa\u4ef6\u3001\u8c03\u8bd5\u4ee3\u7801\u3001\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u4e0b\u8f7d\u65b9\u5f0f\uff1a \u201c\u62d6\u653e\u201d\u4e0b\u8f7d \u4f7f\u7528 pyOCD \u4e0b\u8f7d","title":"\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f"},{"location":"cn/getting-started/#_3","text":"\u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bc6\u522b\u5230 DAPLINK \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u76f4\u63a5\u628a .hex \u56fa\u4ef6\u62d6\u653e\u5230\u8be5\u78c1\u76d8\u5373\u53ef\u5f00\u59cb\u4e0b\u8f7d\uff0c\u7b49\u5f85\u4e0b\u8f7d\u5b8c\u6210.... \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u6309\u4e0b\u590d\u4f4d\u6309\u94ae\u4fbf\u53ef\u8fd0\u884c\u65b0\u56fa\u4ef6\u3002","title":"\u201c\u62d6\u653e\u201d\u4e0b\u8f7d"},{"location":"cn/getting-started/#pyocd","text":"pyOCD \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, macOS, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u901a\u8fc7 pip \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a $ pip install --pre -U pyocd \u6216\u8005\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5b89\u88c5\u6700\u65b0\u5f00\u53d1\u7248\u672c\uff0c\u4f53\u9a8c\u4e00\u4e9b\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u65b0\u529f\u80fd\uff1a $ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip \u6ce8\u610f \u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528 pyOCD\uff0c\u9700\u8981\u5728\u5b89\u88c5\u547d\u4ee4\u524d\u589e\u52a0 sudo -H \u8fdb\u884c\u5168\u5c40\u5b89\u88c5\u3002 \u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u53ef\u5b8c\u6210\u56fa\u4ef6\u4e0b\u8f7d\u3001\u64e6\u9664\uff1a # -se \u8868\u793a\u53ea\u64e6\u9664\u9700\u8981\u7528\u5230\u7684\u533a\u57df $ pyocd-flashtool -t nrf52 -se your-hex-file.hex # \u5982\u679c\u9700\u8981\u6574\u7247\u64e6\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528 -ce \u53c2\u6570 $ pyocd-flashtool -t nrf52 -ce your-hex-file.hex # \u5982\u679c\u53ea\u662f\u60f3\u64e6\u9664\uff0c\u4e0d\u7f16\u7a0b\uff0c\u53ef\u4ee5\u4e0d\u5e26hex\u6587\u4ef6\u53c2\u6570 $ pyocd-flashtool -t nrf52 -ce","title":"\u4f7f\u7528 pyOCD"},{"location":"cn/getting-started/#_4","text":"nRF52832-MDK \u7684\u6240\u6709\u793a\u4f8b\u4ee3\u7801\u53ca\u6587\u6863\u6258\u7ba1\u5728 GitHub makerdiary/nrf52832-mdk \u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u4e0b\u8f7d\u6216\u514b\u9686\u5230\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\u4e0b\u4f7f\u7528\uff1a $ git clone https://github.com/makerdiary/nrf52832-mdk.git","title":"\u4e0b\u8f7d\u9879\u76ee\u6e90\u7801"},{"location":"cn/getting-started/#_5","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/jerryscript/","text":"JerryScript \u5f00\u6e90\u3001\u9762\u5411\u5c0f\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684 JavaScript \u5f15\u64ce \u7b80\u4ecb JerryScript \u662f\u4e09\u661f\u5f00\u6e90\u7684\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u5f15\u64ce\uff0c\u4e3b\u8981\u9762\u5411\u8d44\u6e90\u53d7\u9650\u7684\u7269\u8054\u7f51\u8bbe\u5907\uff0c\u53ef\u5728 \u5c0f\u4e8e 64KB RAM 64KB \u548c 200KB ROM \u7684\u5fae\u63a7\u5236\u5668\u4e0a\u8fd0\u884c\u3002 JavaScript \u662f\u73b0\u5728\u975e\u5e38\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\uff0c\u5927\u91cf\u524d\u7aef\u5f00\u53d1\u8005\u5bf9\u5b83\u975e\u5e38\u719f\u6089\uff0c\u5c06\u7269\u8054\u7f51\u8bbe\u5907\u548c web \u751f\u6001\u7cfb\u7edf\u76f8\u4e92\u914d\u5408\uff0c\u5bf9\u4e8e\u6784\u5efa\u7269\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u6765\u8bf4\u662f\u4e2a\u660e\u667a\u7684\u9009\u62e9\uff0c\u8fd9\u4e5f\u6b63\u662f\u4e09\u661f\u5f00\u53d1 JerryScript \u7684\u521d\u8877\u3002 \u53e6\u4e00\u65b9\u9762\uff0cJavaScript \u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u5f00\u53d1\u4e2d\u662f\u975e\u5e38\u4fbf\u5229\u7684\u3002\u5b83\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff0c\u8fd9\u5bf9\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u786c\u4ef6\u7f16\u7a0b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 JerryScript \u5177\u5907\u4ee5\u4e0b\u5173\u952e\u7279\u6027\uff1a \u5b8c\u5168\u517c\u5bb9 ECMAScript 5.1 \u82e5\u91c7\u7528 ARM Thumb-2 \u6307\u4ee4\u96c6\u7f16\u8bd1\uff0c\u4ec5\u9700 160KB \u7a7a\u95f4 \u6ce8\u91cd\u5185\u5b58\u4f18\u5316\uff0c\u51cf\u5c11\u5185\u5b58\u6d88\u8017 \u4f7f\u7528 C99 \u7f16\u5199\uff0c\u53ef\u79fb\u690d\u6027\u5f3a \u4e3a\u9884\u7f16\u8bd1 JavaScript \u6e90\u7801\u63d0\u4f9b\u5feb\u7167\u652f\u6301 \u63d0\u4f9b\u6210\u719f\u7684 C API\uff0c\u8c03\u7528\u65b9\u4fbf \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u8bbf\u95ee JerryScript \u5b98\u65b9\u4ed3\u5e93 \u3002 \u5feb\u901f\u5165\u95e8 \u4ee5\u4e0b\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u7f16\u8bd1\u3001\u8fd0\u884c JerryScript\u3002 \u642d\u5efa\u7f16\u8bd1\u73af\u5883 \u7f16\u8bd1 JerryScript \u5f15\u64ce\u4e4b\u524d\uff0c\u9700\u8981\u914d\u7f6e\u597d\u5f00\u53d1\u73af\u5883\uff0c\u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a gcc \u6216 \u5176\u4ed6 C99 \u7f16\u8bd1\u5668 (\u672c\u5730\u6216\u4ea4\u53c9\u7f16\u8bd1\u5668\uff0c\u4f8b\u5982\uff1aarm-none-eabi) cmake = 2.8.12.2 bash = 4.3.11 cppcheck = 1.61 vera++ = 1.2.1 python = 2.7.6 \u53e6\u5916\u786e\u4fdd\u4ee5\u4e0b\u547d\u4ee4\u884c\u5de5\u5177\u53ef\u7528\uff1a awk bc find sed \u4ece\u5b98\u65b9\u4ed3\u5e93\u514b\u9686 JerryScript \u6e90\u7801\uff1a $ git clone https://github.com/jerryscript-project/jerryscript.git \u57fa\u4e8e Zephyr \u7f16\u8bd1 JerryScript \u8fd9\u91cc\u6211\u4eec\u57fa\u4e8e Zephyr \u6765\u7f16\u8bd1 JerryScript \u5f15\u64ce\uff0c\u4f60\u4e5f\u53ef\u4ee5\u57fa\u4e8e Arm Mbed OS \u8fdb\u884c\u7f16\u8bd1\u3002 Zephyr \u5f00\u53d1\u73af\u5883\u914d\u7f6e\u8bf7\u53c2\u8003\uff1a \u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883 \u3002 \u914d\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a $ cd zephyr $ source zephyr-env.sh \u7f16\u8bd1\u8fd0\u884c JerryScript \u63a5\u4e0b\u6765\uff0c\u4f60\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u4e0b\u8f7d JerryScript \u5f15\u64ce\uff1a $ cd jerryscript $ make -f ./targets/zephyr/Makefile.zephyr BOARD = nrf52832_mdk flash \u6253\u5f00\u4e32\u53e3\u5de5\u5177\uff0cJerryScript \u5c06\u4ee5 REPL \u6a21\u5f0f\u8fd0\u884c\uff1a ***** BOOTING ZEPHYR OS v1.10.99 - BUILD: Mar 2 2018 22 :19:04 ***** JerryScript build: Mar 2 2018 22 :19:03 JerryScript API 1 .0 Zephyr version 1 .10.99 js \u5c1d\u8bd5\u8fd0\u884c\u4e0b\u9762\u6bd4\u8f83\u7b80\u5355\u7684\u811a\u672c\uff1a js var test = 0 ; for ( t = 100 ; t 1000 ; t ++ ) test += t ; print ( Hi JS World! + test ); Hi JS World ! 494550 undefined \u6216\u8005\u66f4\u590d\u6742\u7684\uff1a js function hello ( t ) { t = t * 10 ; return t }; print ( result + hello ( 10.5 )); result105 undefined \u63d0\u793a \u6211\u4eec\u63d0\u4f9b\u9884\u7f16\u8bd1\u597d\u7684\u56fa\u4ef6 jerryscript_v1.0_for_zephyr.hex \uff0c \u8be5\u56fa\u4ef6\u4f4d\u4e8e ./nrf52832-mdk/firmware/jerryscript/ \u76ee\u5f55\u3002 \u66f4\u591a\u793a\u4f8b JerryScript \u5f15\u64ce\u76ee\u524d\u8fd8\u6ca1\u6709\u76f4\u63a5\u652f\u6301 nRF5 SoC\uff0c\u76f8\u4fe1\u5728\u793e\u533a\u5f00\u53d1\u8005\u7684\u52aa\u529b\u4e0b\uff0c\u5f88\u5feb\u4f1a\u5b8c\u6210\u8fd9\u90e8\u5206\u79fb\u690d\u5de5\u4f5c\u3002 \u76ee\u524d Intel \u57fa\u4e8e Zephyr \u5df2\u7ecf\u505a\u5927\u91cf\u79fb\u690d\u5de5\u4f5c\uff0c\u8fd9\u4e2a\u9879\u76ee\u5c31\u662f Zephyr.js \uff0c\u5bf9 Arduino 101 \u652f\u6301\u6bd4\u8f83\u597d\uff0c\u5bf9\u4e8e nRF52 \u8fd8\u6709\u4e00\u4e9b\u529f\u80fd\u9700\u8981\u6dfb\u52a0\uff0c\u4f60\u53ef\u4ee5\u4fdd\u6301\u5173\u6ce8\uff0c\u66f4\u591a\u529f\u80fd\u4f1a\u9010\u6e10\u52a0\u5165\u3002 \u53c2\u8003\u8d44\u6e90 JerryScript \u5b98\u65b9\u4ed3\u5e93 zephyr.js \u5b98\u65b9\u4ed3\u5e93 \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"JerryScript"},{"location":"cn/jerryscript/#jerryscript-javascript","text":"","title":"JerryScript\u5f00\u6e90\u3001\u9762\u5411\u5c0f\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684 JavaScript \u5f15\u64ce"},{"location":"cn/jerryscript/#_1","text":"JerryScript \u662f\u4e09\u661f\u5f00\u6e90\u7684\u4e00\u4e2a\u975e\u5e38\u8f7b\u91cf\u7684 JavaScript \u5f15\u64ce\uff0c\u4e3b\u8981\u9762\u5411\u8d44\u6e90\u53d7\u9650\u7684\u7269\u8054\u7f51\u8bbe\u5907\uff0c\u53ef\u5728 \u5c0f\u4e8e 64KB RAM 64KB \u548c 200KB ROM \u7684\u5fae\u63a7\u5236\u5668\u4e0a\u8fd0\u884c\u3002 JavaScript \u662f\u73b0\u5728\u975e\u5e38\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\uff0c\u5927\u91cf\u524d\u7aef\u5f00\u53d1\u8005\u5bf9\u5b83\u975e\u5e38\u719f\u6089\uff0c\u5c06\u7269\u8054\u7f51\u8bbe\u5907\u548c web \u751f\u6001\u7cfb\u7edf\u76f8\u4e92\u914d\u5408\uff0c\u5bf9\u4e8e\u6784\u5efa\u7269\u8054\u7f51\u751f\u6001\u7cfb\u7edf\u6765\u8bf4\u662f\u4e2a\u660e\u667a\u7684\u9009\u62e9\uff0c\u8fd9\u4e5f\u6b63\u662f\u4e09\u661f\u5f00\u53d1 JerryScript \u7684\u521d\u8877\u3002 \u53e6\u4e00\u65b9\u9762\uff0cJavaScript \u5728\u5d4c\u5165\u5f0f\u8bbe\u5907\u5f00\u53d1\u4e2d\u662f\u975e\u5e38\u4fbf\u5229\u7684\u3002\u5b83\u652f\u6301\u5f02\u6b65\u51fd\u6570\u56de\u8c03\u548c\u5f02\u6b65 I/O\uff0c\u8fd9\u5bf9\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u786c\u4ef6\u7f16\u7a0b\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 JerryScript \u5177\u5907\u4ee5\u4e0b\u5173\u952e\u7279\u6027\uff1a \u5b8c\u5168\u517c\u5bb9 ECMAScript 5.1 \u82e5\u91c7\u7528 ARM Thumb-2 \u6307\u4ee4\u96c6\u7f16\u8bd1\uff0c\u4ec5\u9700 160KB \u7a7a\u95f4 \u6ce8\u91cd\u5185\u5b58\u4f18\u5316\uff0c\u51cf\u5c11\u5185\u5b58\u6d88\u8017 \u4f7f\u7528 C99 \u7f16\u5199\uff0c\u53ef\u79fb\u690d\u6027\u5f3a \u4e3a\u9884\u7f16\u8bd1 JavaScript \u6e90\u7801\u63d0\u4f9b\u5feb\u7167\u652f\u6301 \u63d0\u4f9b\u6210\u719f\u7684 C API\uff0c\u8c03\u7528\u65b9\u4fbf \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u8bbf\u95ee JerryScript \u5b98\u65b9\u4ed3\u5e93 \u3002","title":"\u7b80\u4ecb"},{"location":"cn/jerryscript/#_2","text":"\u4ee5\u4e0b\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u7f16\u8bd1\u3001\u8fd0\u884c JerryScript\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"cn/jerryscript/#_3","text":"\u7f16\u8bd1 JerryScript \u5f15\u64ce\u4e4b\u524d\uff0c\u9700\u8981\u914d\u7f6e\u597d\u5f00\u53d1\u73af\u5883\uff0c\u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a gcc \u6216 \u5176\u4ed6 C99 \u7f16\u8bd1\u5668 (\u672c\u5730\u6216\u4ea4\u53c9\u7f16\u8bd1\u5668\uff0c\u4f8b\u5982\uff1aarm-none-eabi) cmake = 2.8.12.2 bash = 4.3.11 cppcheck = 1.61 vera++ = 1.2.1 python = 2.7.6 \u53e6\u5916\u786e\u4fdd\u4ee5\u4e0b\u547d\u4ee4\u884c\u5de5\u5177\u53ef\u7528\uff1a awk bc find sed \u4ece\u5b98\u65b9\u4ed3\u5e93\u514b\u9686 JerryScript \u6e90\u7801\uff1a $ git clone https://github.com/jerryscript-project/jerryscript.git","title":"\u642d\u5efa\u7f16\u8bd1\u73af\u5883"},{"location":"cn/jerryscript/#zephyr-jerryscript","text":"\u8fd9\u91cc\u6211\u4eec\u57fa\u4e8e Zephyr \u6765\u7f16\u8bd1 JerryScript \u5f15\u64ce\uff0c\u4f60\u4e5f\u53ef\u4ee5\u57fa\u4e8e Arm Mbed OS \u8fdb\u884c\u7f16\u8bd1\u3002 Zephyr \u5f00\u53d1\u73af\u5883\u914d\u7f6e\u8bf7\u53c2\u8003\uff1a \u642d\u5efa Zephyr \u5f00\u53d1\u73af\u5883 \u3002 \u914d\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a $ cd zephyr $ source zephyr-env.sh","title":"\u57fa\u4e8e Zephyr \u7f16\u8bd1 JerryScript"},{"location":"cn/jerryscript/#jerryscript","text":"\u63a5\u4e0b\u6765\uff0c\u4f60\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u4e0b\u8f7d JerryScript \u5f15\u64ce\uff1a $ cd jerryscript $ make -f ./targets/zephyr/Makefile.zephyr BOARD = nrf52832_mdk flash \u6253\u5f00\u4e32\u53e3\u5de5\u5177\uff0cJerryScript \u5c06\u4ee5 REPL \u6a21\u5f0f\u8fd0\u884c\uff1a ***** BOOTING ZEPHYR OS v1.10.99 - BUILD: Mar 2 2018 22 :19:04 ***** JerryScript build: Mar 2 2018 22 :19:03 JerryScript API 1 .0 Zephyr version 1 .10.99 js \u5c1d\u8bd5\u8fd0\u884c\u4e0b\u9762\u6bd4\u8f83\u7b80\u5355\u7684\u811a\u672c\uff1a js var test = 0 ; for ( t = 100 ; t 1000 ; t ++ ) test += t ; print ( Hi JS World! + test ); Hi JS World ! 494550 undefined \u6216\u8005\u66f4\u590d\u6742\u7684\uff1a js function hello ( t ) { t = t * 10 ; return t }; print ( result + hello ( 10.5 )); result105 undefined \u63d0\u793a \u6211\u4eec\u63d0\u4f9b\u9884\u7f16\u8bd1\u597d\u7684\u56fa\u4ef6 jerryscript_v1.0_for_zephyr.hex \uff0c \u8be5\u56fa\u4ef6\u4f4d\u4e8e ./nrf52832-mdk/firmware/jerryscript/ \u76ee\u5f55\u3002","title":"\u7f16\u8bd1\u8fd0\u884c JerryScript"},{"location":"cn/jerryscript/#_4","text":"JerryScript \u5f15\u64ce\u76ee\u524d\u8fd8\u6ca1\u6709\u76f4\u63a5\u652f\u6301 nRF5 SoC\uff0c\u76f8\u4fe1\u5728\u793e\u533a\u5f00\u53d1\u8005\u7684\u52aa\u529b\u4e0b\uff0c\u5f88\u5feb\u4f1a\u5b8c\u6210\u8fd9\u90e8\u5206\u79fb\u690d\u5de5\u4f5c\u3002 \u76ee\u524d Intel \u57fa\u4e8e Zephyr \u5df2\u7ecf\u505a\u5927\u91cf\u79fb\u690d\u5de5\u4f5c\uff0c\u8fd9\u4e2a\u9879\u76ee\u5c31\u662f Zephyr.js \uff0c\u5bf9 Arduino 101 \u652f\u6301\u6bd4\u8f83\u597d\uff0c\u5bf9\u4e8e nRF52 \u8fd8\u6709\u4e00\u4e9b\u529f\u80fd\u9700\u8981\u6dfb\u52a0\uff0c\u4f60\u53ef\u4ee5\u4fdd\u6301\u5173\u6ce8\uff0c\u66f4\u591a\u529f\u80fd\u4f1a\u9010\u6e10\u52a0\u5165\u3002","title":"\u66f4\u591a\u793a\u4f8b"},{"location":"cn/jerryscript/#_5","text":"JerryScript \u5b98\u65b9\u4ed3\u5e93 zephyr.js \u5b98\u65b9\u4ed3\u5e93","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/jerryscript/#_6","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/mbedos/","text":"Arm Mbed OS Arm \u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5c0f\u578b\u8bbe\u5907\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf \u7b80\u4ecb Arm Mbed OS \u662f Arm \u4e13\u95e8\u4e3a\u7269\u8054\u7f51\u8bbe\u5907\u800c\u8bbe\u8ba1\u7684\u5f00\u6e90\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411 ARM Cortex-M \u7cfb\u5217\u5fae\u63a7\u5236\u5668\uff0c\u975e\u5e38\u9002\u5408\u6d89\u53ca\u667a\u80fd\u57ce\u5e02\u3001\u667a\u80fd\u5bb6\u5ead\u548c\u7a7f\u6234\u5f0f\u8bbe\u5907\u7b49\u9886\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u76f8\u6bd4\u4e8e\u5176\u4ed6\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0cArm Mbed OS \u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff1a \u5b89\u5168\u6027\uff1a\u63d0\u4f9b mbed TLS \u548c mbed uVisor \u5b89\u5168\u673a\u5236 \u8fde\u63a5\u6027\uff1a\u652f\u6301\u591a\u79cd\u534f\u8bae\u6808\uff0c\u5305\u62ec Bluetooth LE, Wi-Fi, 6LoWPAN, Thread, Lora\u7b49\u7b49 \u5b8c\u6574\u7684\u5de5\u5177\u94fe\u652f\u6301\uff1a\u63d0\u4f9b\u5728\u7ebf IDE, mbed CLI \u4ee5\u53ca \u7b2c\u4e09\u65b9 IDE \u826f\u597d\u7684\u793e\u533a\u751f\u6001 \u4e86\u89e3\u66f4\u591a\u5185\u5bb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee Mbed OS \u5f00\u53d1\u8005\u7f51\u7ad9 . \u4f7f\u7528 Arm Mbed CLI Arm \u4e3a Mbed OS \u63d0\u4f9b\u4e86\u79bb\u7ebf\u5f00\u53d1\u5de5\u5177 Mbed CLI\uff0c\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002 \u5b89\u88c5 Mbed CLI \u5728 Windows \u4e0a\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Mbed CLI Windows .exe \u5b89\u88c5\u5305 \u3002 \u5728 Linux \u548c macOS\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4f7f\u7528 pip \u8fdb\u884c\u5b89\u88c5\uff1a $ pip install mbed-cli \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 mbed help \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\u3002 \u8bbe\u7f6e\u5f00\u53d1\u73af\u5883 \u63a5\u7740\uff0c\u9700\u8981\u6dfb\u52a0\u5de5\u5177\u94fe\u8def\u5f84\u914d\u7f6e\uff1a $ mbed config -G GCC_ARM_PATH path to GNU Arm bin [ mbed ] path to GNU Arm bin now set as global GCC_ARM_PATH $ mbed config --list [ mbed ] Global config: GCC_ARM_PATH = path to GNU Arm bin \u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b \u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5 mbed-os-example-blinky \u4e3a\u4f8b\uff1a \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a $ cd ./nrf52832-mdk/examples/mbedos5/mbed-os-example-blinky/ \u4e3a\u8be5\u793a\u4f8b\u6dfb\u52a0 Mbed OS \u5e93\uff1a mbed-os-example-blinky$ mbed config root . mbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git \u4f7f\u7528 mbed compile \u8fdb\u884c\u7f16\u8bd1\uff1a mbed-os-example-blinky$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash \u589e\u52a0 --flash \u53c2\u6570\uff0c\u5c06\u4f1a\u5728\u7f16\u8bd1\u5b8c\u6210\u540e\u81ea\u52a8\u5c06\u56fa\u4ef6\u4e0b\u8f7d\u5230 nRF52832-MDK \u786c\u4ef6\u4e0a\u3002 \u5982\u679c mbed detect \u65e0\u6cd5\u68c0\u6d4b\u5230\u677f\u5b50\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6dfb\u52a0\uff1a $ mbedls --mock = 1024 :nRF52832_MDK \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7684\u5185\u5bb9 \u201c \u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f \u201d \u4e0b\u8f7d\u56fa\u4ef6\u3002 \u89c2\u5bdf\u8fd0\u884c\u7ed3\u679c\uff1a \u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b Mbed OS \u5bf9\u4f4e\u529f\u8017\u84dd\u7259\u652f\u6301\u975e\u5e38\u53cb\u597d\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e9b\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a ./nrf52832-mdk/examples/mbedos5/mbed-os-example-ble \u251c\u2500\u2500 BLE_BatteryLevel \u251c\u2500\u2500 BLE_Beacon \u251c\u2500\u2500 BLE_Button \u251c\u2500\u2500 BLE_EddystoneObserver \u251c\u2500\u2500 BLE_EddystoneService \u251c\u2500\u2500 BLE_GAPButton \u251c\u2500\u2500 BLE_HeartRate \u251c\u2500\u2500 BLE_LED \u251c\u2500\u2500 BLE_LEDBlinker \u251c\u2500\u2500 BLE_Thermometer \u2514\u2500\u2500 README.md \u53ef\u4ee5\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff0c\u4f8b\u5982\uff0c BLE_BatteryLevel : $ cd BLE_BatteryLevel \u6dfb\u52a0 Mbed OS \u5e93\uff1a BLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git \u7f16\u8bd1\u4e0b\u8f7d\uff1a BLE_BatteryLevel$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash \u6253\u5f00 nRF Connect app\uff0c\u627e\u5230\u540d\u4e3a BATTERY \u7684\u8bbe\u5907\uff0c\u8fde\u63a5\u8bbe\u5907\uff0c\u53ef\u53d1\u73b0 UUID \u4e3a 0x180F \u7684\u7535\u6c60\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b UUID \u4e3a 0x2A19 \u7684 Battery level \u5c5e\u6027\u3002 \u5176\u4ed6\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u9a8c\u8bc1\u3002 \u66f4\u591a\u793a\u4f8b \u6211\u4eec\u4f1a\u4e0d\u5b9a\u671f\u589e\u52a0\u66f4\u591a\u6709\u8da3\u7684\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01 \u53c2\u8003\u8d44\u6e90 Arm Mbed OS \u5f00\u53d1\u8005\u7f51\u7ad9 Mbed OS \u6587\u6863\u4e2d\u5fc3 ARMmbed/mbed-os \u4ed3\u5e93 \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"Arm Mbed OS"},{"location":"cn/mbedos/#arm-mbed-os-arm","text":"","title":"Arm Mbed OS Arm \u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5c0f\u578b\u8bbe\u5907\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf"},{"location":"cn/mbedos/#_1","text":"Arm Mbed OS \u662f Arm \u4e13\u95e8\u4e3a\u7269\u8054\u7f51\u8bbe\u5907\u800c\u8bbe\u8ba1\u7684\u5f00\u6e90\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411 ARM Cortex-M \u7cfb\u5217\u5fae\u63a7\u5236\u5668\uff0c\u975e\u5e38\u9002\u5408\u6d89\u53ca\u667a\u80fd\u57ce\u5e02\u3001\u667a\u80fd\u5bb6\u5ead\u548c\u7a7f\u6234\u5f0f\u8bbe\u5907\u7b49\u9886\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u76f8\u6bd4\u4e8e\u5176\u4ed6\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0cArm Mbed OS \u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff1a \u5b89\u5168\u6027\uff1a\u63d0\u4f9b mbed TLS \u548c mbed uVisor \u5b89\u5168\u673a\u5236 \u8fde\u63a5\u6027\uff1a\u652f\u6301\u591a\u79cd\u534f\u8bae\u6808\uff0c\u5305\u62ec Bluetooth LE, Wi-Fi, 6LoWPAN, Thread, Lora\u7b49\u7b49 \u5b8c\u6574\u7684\u5de5\u5177\u94fe\u652f\u6301\uff1a\u63d0\u4f9b\u5728\u7ebf IDE, mbed CLI \u4ee5\u53ca \u7b2c\u4e09\u65b9 IDE \u826f\u597d\u7684\u793e\u533a\u751f\u6001 \u4e86\u89e3\u66f4\u591a\u5185\u5bb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee Mbed OS \u5f00\u53d1\u8005\u7f51\u7ad9 .","title":"\u7b80\u4ecb"},{"location":"cn/mbedos/#arm-mbed-cli","text":"Arm \u4e3a Mbed OS \u63d0\u4f9b\u4e86\u79bb\u7ebf\u5f00\u53d1\u5de5\u5177 Mbed CLI\uff0c\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002","title":"\u4f7f\u7528 Arm Mbed CLI"},{"location":"cn/mbedos/#mbed-cli","text":"\u5728 Windows \u4e0a\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Mbed CLI Windows .exe \u5b89\u88c5\u5305 \u3002 \u5728 Linux \u548c macOS\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4f7f\u7528 pip \u8fdb\u884c\u5b89\u88c5\uff1a $ pip install mbed-cli \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 mbed help \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\u3002","title":"\u5b89\u88c5 Mbed CLI"},{"location":"cn/mbedos/#_2","text":"\u63a5\u7740\uff0c\u9700\u8981\u6dfb\u52a0\u5de5\u5177\u94fe\u8def\u5f84\u914d\u7f6e\uff1a $ mbed config -G GCC_ARM_PATH path to GNU Arm bin [ mbed ] path to GNU Arm bin now set as global GCC_ARM_PATH $ mbed config --list [ mbed ] Global config: GCC_ARM_PATH = path to GNU Arm bin","title":"\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883"},{"location":"cn/mbedos/#_3","text":"\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5 mbed-os-example-blinky \u4e3a\u4f8b\uff1a \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a $ cd ./nrf52832-mdk/examples/mbedos5/mbed-os-example-blinky/ \u4e3a\u8be5\u793a\u4f8b\u6dfb\u52a0 Mbed OS \u5e93\uff1a mbed-os-example-blinky$ mbed config root . mbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git \u4f7f\u7528 mbed compile \u8fdb\u884c\u7f16\u8bd1\uff1a mbed-os-example-blinky$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash \u589e\u52a0 --flash \u53c2\u6570\uff0c\u5c06\u4f1a\u5728\u7f16\u8bd1\u5b8c\u6210\u540e\u81ea\u52a8\u5c06\u56fa\u4ef6\u4e0b\u8f7d\u5230 nRF52832-MDK \u786c\u4ef6\u4e0a\u3002 \u5982\u679c mbed detect \u65e0\u6cd5\u68c0\u6d4b\u5230\u677f\u5b50\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6dfb\u52a0\uff1a $ mbedls --mock = 1024 :nRF52832_MDK \u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7684\u5185\u5bb9 \u201c \u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f \u201d \u4e0b\u8f7d\u56fa\u4ef6\u3002 \u89c2\u5bdf\u8fd0\u884c\u7ed3\u679c\uff1a","title":"\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b"},{"location":"cn/mbedos/#_4","text":"Mbed OS \u5bf9\u4f4e\u529f\u8017\u84dd\u7259\u652f\u6301\u975e\u5e38\u53cb\u597d\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e9b\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a ./nrf52832-mdk/examples/mbedos5/mbed-os-example-ble \u251c\u2500\u2500 BLE_BatteryLevel \u251c\u2500\u2500 BLE_Beacon \u251c\u2500\u2500 BLE_Button \u251c\u2500\u2500 BLE_EddystoneObserver \u251c\u2500\u2500 BLE_EddystoneService \u251c\u2500\u2500 BLE_GAPButton \u251c\u2500\u2500 BLE_HeartRate \u251c\u2500\u2500 BLE_LED \u251c\u2500\u2500 BLE_LEDBlinker \u251c\u2500\u2500 BLE_Thermometer \u2514\u2500\u2500 README.md \u53ef\u4ee5\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff0c\u4f8b\u5982\uff0c BLE_BatteryLevel : $ cd BLE_BatteryLevel \u6dfb\u52a0 Mbed OS \u5e93\uff1a BLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git \u7f16\u8bd1\u4e0b\u8f7d\uff1a BLE_BatteryLevel$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash \u6253\u5f00 nRF Connect app\uff0c\u627e\u5230\u540d\u4e3a BATTERY \u7684\u8bbe\u5907\uff0c\u8fde\u63a5\u8bbe\u5907\uff0c\u53ef\u53d1\u73b0 UUID \u4e3a 0x180F \u7684\u7535\u6c60\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b UUID \u4e3a 0x2A19 \u7684 Battery level \u5c5e\u6027\u3002 \u5176\u4ed6\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u9a8c\u8bc1\u3002","title":"\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b"},{"location":"cn/mbedos/#_5","text":"\u6211\u4eec\u4f1a\u4e0d\u5b9a\u671f\u589e\u52a0\u66f4\u591a\u6709\u8da3\u7684\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01","title":"\u66f4\u591a\u793a\u4f8b"},{"location":"cn/mbedos/#_6","text":"Arm Mbed OS \u5f00\u53d1\u8005\u7f51\u7ad9 Mbed OS \u6587\u6863\u4e2d\u5fc3 ARMmbed/mbed-os \u4ed3\u5e93","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/mbedos/#_7","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/mesh/","text":"nRF5 SDK for Mesh Nordic \u5b98\u65b9\u7684 Bluetooth Mesh \u8f6f\u4ef6\u5f00\u53d1\u5305 \u7b80\u4ecb The nRF5 SDK for Mesh \u662f Nordic \u4e3a\u5728 nRF5 \u7cfb\u5217\u82af\u7247\u4e0a\u8fd0\u884c\u6807\u51c6 Bluetooth Mesh \u534f\u8bae\u800c\u63a8\u51fa\u7684\u8f6f\u4ef6\u5f00\u53d1\u5305\u3002\u5229\u7528\u8be5\u8f6f\u4ef6\u5f00\u53d1\u5305\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6784\u5efa Bluetooth Mesh \u5e94\u7528\u3002 mesh \u662f\u4f4e\u529f\u8017\u84dd\u7259\u7684\u4e00\u79cd\u5168\u65b0\u7f51\u7edc\u62d3\u6251\u7ed3\u6784\u9009\u62e9\uff0c\u4e8e2017\u5e74\u590f\u5b63\u63a8\u51fa\u3002\u5b83\u4ee3\u8868\u84dd\u7259\u6280\u672f\u7684\u4e00\u9879\u91cd\u8981\u8fdb\u5c55\uff0c\u5c06\u84dd\u7259\u5b9a\u4f4d\u4e3a\u5305\u62ec\u667a\u80fd\u697c\u5b87\u548c\u5de5\u4e1a\u7269\u8054\u7f51\u5728\u5185\u7684\u5404\u5927\u65b0\u9886\u57df\u548c\u65b0\u7528\u4f8b\u7684\u4e3b\u6d41\u4f4e\u529f\u8017\u65e0\u7ebf\u901a\u4fe1\u6280\u672f\u3002 \u5728 mesh \u7f51\u7edc\u4e2d\uff0c\u4e2d\u7ee7\u8282\u70b9\uff08RN\uff09\u4f1a\u5c06\u63a5\u6536\u5230\u7684\u6570\u636e\u5305\u4e0d\u65ad\u5e7f\u64ad\u4e0b\u53bb\uff0c\u76f4\u5230\u76ee\u6807\u8282\u70b9\uff08N\uff09\u6536\u5230\u8be5\u6570\u636e\u5305\u4e3a\u6b62\uff0c\u8fd9\u662f\u4e00\u79cd\u79f0\u4e3a\u2018\u6cdb\u6d2a\uff08flooding\uff09\u2019\u7684\u7f51\u7edc\u7ed3\u6784\u3002 \u4f60\u53ef\u4ee5\u5728 Bluetooth SIG \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Bluetooth Mesh \u7684\u4ecb\u7ecd\uff1a Bluetooth Mesh \u7b80\u4ecb Bluetooth Mesh \u534f\u8bae\u89c4\u8303 \u66f4\u591a\u5173\u4e8e nRF5 SDK for Mesh \u4ecb\u7ecd, \u53ef\u4ee5\u524d\u5f80 nordicsemi.com \u3002 \u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u642d\u5efa\u5f00\u53d1\u73af\u5883\u3001\u7f16\u8bd1\u8fd0\u884c Bluetooth Mesh \u793a\u4f8b\u3002 \u5b89\u88c5 Mesh \u5de5\u5177\u94fe \u5728\u5f00\u59cb\u7f16\u8bd1\u4e4b\u524d\uff0c\u9700\u8981\u5b89\u88c5 CMake \u3001 GNU Arm Toolchain \u3001 ninja \u5de5\u5177\u3002\u8fd9\u91cc\u5206\u522b\u4ecb\u7ecd\u5728 macOS \u3001 Windows \u3001 Linux \u7cfb\u7edf\u4e0a\u5b89\u88c5\u76f8\u5173\u5de5\u5177\u3002 macOS \u4f7f\u7528 brew \u547d\u4ee4\u5b89\u88c5 CMake and Ninja \uff1a brew install cmake ninja \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU ARM Embedded Toolchain . \u5efa\u8bae\u4f7f\u7528 6-2017-q2-update \u7248\u672c\uff0c\u7136\u540e\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a # \u5728 ~/.bash_profile \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } \u9a8c\u8bc1 arm-none-eabi-gcc \u662f\u5426\u914d\u7f6e\u6b63\u786e\uff1a arm-none-eabi-gcc --version \u4e3a\u65b9\u4fbf\u540e\u7eed\u70e7\u5f55\u56fa\u4ef6\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 nRF5x Command Line Tools \u548c pyOCD \u3002 Windows \u5728 Windows \u7cfb\u7edf\u4e0a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Windows \u5305\u7ba1\u7406\u5668 Chocolatey \u3002 \u6309\u7167 Chocolatey \u5b89\u88c5\u9875\u9762 \u4ecb\u7ecd\u5b89\u88c5 Chocolatey \u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u8fd0\u884c\u547d\u4ee4\u884c\u5de5\u5177( cmd.exe ) \u4e3a\u907f\u514d\u6bcf\u5b89\u88c5\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u9700\u8981\u5355\u72ec\u786e\u8ba4\u4e00\u904d\uff0c\u53ef\u4f7f\u80fd allowGlobalConfirmation \uff1a choco feature enable -n allowGlobalConfirmation \u5b89\u88c5 CMake \uff1a choco install cmake --installargs ADD_CMAKE_TO_PATH=System \u5b89\u88c5\u5176\u4ed6\u5de5\u5177\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\u5173\u95ed\u547d\u4ee4\u884c\u5de5\u5177\uff1a choco install git python ninja \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU ARM Embedded Toolchain \u3002\u5efa\u8bae\u4f7f\u7528 6-2017-q2-update \u7248\u672c\uff0c\u7136\u540e\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d \u4e3a\u65b9\u4fbf\u540e\u7eed\u70e7\u5f55\u56fa\u4ef6\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 nRF5x Command Line Tools \u548c pyOCD \u3002 Linux \u8fd9\u91cc\u4ee5 Unbuntu \u4e3a\u4f8b\u4ecb\u7ecd\u5982\u4f55\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5176\u4ed6 Linux \u53d1\u884c\u7248\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u786e\u8ba4\u7cfb\u7edf\u5df2\u7ecf\u66f4\u65b0\u5b8c\u6210\uff1a sudo apt-get update sudo apt-get upgrade \u4f7f\u7528 apt-get \u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a sudo apt-get install --no-install-recommends git cmake ninja-build python3-pip \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU ARM Embedded Toolchain . \u5efa\u8bae\u4f7f\u7528 6-2017-q2-update \u7248\u672c\uff0c\u7136\u540e\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d \u4e3a\u65b9\u4fbf\u540e\u7eed\u70e7\u5f55\u56fa\u4ef6\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 nRF5x Command Line Tools \u548c pyOCD \u3002 \u514b\u9686\u6e90\u7801\u4ed3\u5e93 \u4ece GitHub \u514b\u9686 nrf52832-mdk \u4ed3\u5e93\uff1a git clone ---recursive https://github.com/makerdiary/nrf52832-mdk.git \u5982\u679c\u5df2\u7ecf\u514b\u9686\u8fc7\u8be5\u4ed3\u5e93\uff0c\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u66f4\u65b0 nRF5-SDK-for-Mesh \u5b50\u6a21\u5757\uff1a git submodule update --init nRF5 SDK for Mesh \u9700\u8981\u914d\u5408 nRF5 SDK \u4e00\u8d77\u7f16\u8bd1\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\u8fdb\u884c\u5b89\u88c5\uff1a \u5b89\u88c5 nRF5 SDK \u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u548c\u793a\u4f8b \u73b0\u5728\u4f60\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u548c\u76f8\u5173\u793a\u4f8b\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728 nrf_sdks/nRF5-SDK-for-Mesh \u76ee\u5f55\u521b\u5efa build \u6587\u4ef6\u5939\uff0c\u7528\u6765\u5b58\u653e ninja \u751f\u6210\u7684\u6587\u4ef6\uff1a nRF5-SDK-for-Mesh$ mkdir build cd build \u63a5\u7740\u4f7f\u7528 cmake \u5de5\u5177\u6765\u7f16\u8bd1\uff0c\u4f60\u9700\u8981\u6307\u5b9a TOOLCHAIN \u3001 PLATFORM \u3001 BOARD \u53c2\u6570\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u786e\u5b9a\u53ef\u7528\u7684 SOFTDEVICE \uff1a cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. \u751f\u6210\u7f16\u8bd1\u6587\u4ef6\u540e\u4fbf\u53ef\u4f7f\u7528 ninja target \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u91cc\u4ee5 my_light_switch_client \u4e3a\u4f8b\uff1a ninja my_light_switch_client_nrf52832_xxAA_s132_6.1.0 \u4e0b\u8f7d\u8fd0\u884c mesh \u793a\u4f8b \u8fde\u63a5 nRF52832-MDK \u5f00\u53d1\u677f\uff0c\u4f7f\u7528 ninja flash_ your target \u547d\u4ee4\u53ef\u4ee5\u81ea\u52a8\u4e0b\u8f7d\u8fd0\u884c\u793a\u4f8b\uff1a ninja flash_my_light_switch_client_nrf52832_xxAA_s132_6.1.0 \u4f7f\u7528\u4e32\u53e3\u8c03\u8bd5\u5de5\u5177\uff08\u5982\uff1a PuTTY \u6216\u8005 screen \uff09\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff1a screen /dev/cu.usbmodem1412 115200 \u4ee5\u540c\u6837\u7684\u6b65\u9aa4\u5728\u5176\u4ed6 nRF52832-MDK \u5f00\u53d1\u677f\u4e0a\u4e0b\u8f7d Server \u793a\u4f8b\uff1a ninja flash_my_light_switch_server_nrf52832_xxAA_s132_6.1.0 \u81f3\u6b64\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 nRF Mesh mobile app ( iOS / Android ) \u6765\u5efa\u7acb Bluetooth Mesh \u7f51\u7edc\uff1a \u5982\u4f55\u521b\u5efa\u65b0\u9879\u76ee \u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u65b0\u9879\u76ee\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\uff1a \u4ece examples \u76ee\u5f55\u590d\u5236\u73b0\u6709\u7684\u793a\u4f8b\uff0c\u4f8b\u5982\uff1a\u590d\u5236 examples/my_beaconing \uff0c\u5e76\u6539\u4e3a examples/my_app \uff1b \u4fee\u6539 examples/CMakeLists.txt \u6587\u4ef6\uff0c\u6dfb\u52a0 add_subdirectory(\"my_app\") \u547d\u4ee4\uff1b \u4fee\u6539 examples/my_app/CMakeLists.txt \u6587\u4ef6\uff0c\u4fee\u6539 target\uff1a set(target \"my_app\") \uff1b \u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff1a nRF5-SDK-for-Mesh $ mkdir build cd build build $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. \u7f16\u8bd1\u65b0\u7684\u76ee\u6807\u793a\u4f8b\uff1a ninja my_app \u4e0b\u8f7d\u56fa\u4ef6\uff1a ninja flash_my_app \u66f4\u591a\u793a\u4f8b \u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK for Mesh \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01 \u53c2\u8003\u8d44\u6e90 Nordic nRF5 SDK for Mesh \u6587\u6863 nRF5-SDK-for-Mesh \u4ed3\u5e93 Bluetooth Mesh \u57fa\u672c\u6982\u5ff5 nRF5 SDK for Mesh \u67b6\u6784 \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"nRF5 SDK for Mesh"},{"location":"cn/mesh/#nrf5-sdk-for-mesh-nordic-bluetooth-mesh","text":"","title":"nRF5 SDK for Mesh Nordic \u5b98\u65b9\u7684 Bluetooth Mesh \u8f6f\u4ef6\u5f00\u53d1\u5305"},{"location":"cn/mesh/#_1","text":"The nRF5 SDK for Mesh \u662f Nordic \u4e3a\u5728 nRF5 \u7cfb\u5217\u82af\u7247\u4e0a\u8fd0\u884c\u6807\u51c6 Bluetooth Mesh \u534f\u8bae\u800c\u63a8\u51fa\u7684\u8f6f\u4ef6\u5f00\u53d1\u5305\u3002\u5229\u7528\u8be5\u8f6f\u4ef6\u5f00\u53d1\u5305\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6784\u5efa Bluetooth Mesh \u5e94\u7528\u3002 mesh \u662f\u4f4e\u529f\u8017\u84dd\u7259\u7684\u4e00\u79cd\u5168\u65b0\u7f51\u7edc\u62d3\u6251\u7ed3\u6784\u9009\u62e9\uff0c\u4e8e2017\u5e74\u590f\u5b63\u63a8\u51fa\u3002\u5b83\u4ee3\u8868\u84dd\u7259\u6280\u672f\u7684\u4e00\u9879\u91cd\u8981\u8fdb\u5c55\uff0c\u5c06\u84dd\u7259\u5b9a\u4f4d\u4e3a\u5305\u62ec\u667a\u80fd\u697c\u5b87\u548c\u5de5\u4e1a\u7269\u8054\u7f51\u5728\u5185\u7684\u5404\u5927\u65b0\u9886\u57df\u548c\u65b0\u7528\u4f8b\u7684\u4e3b\u6d41\u4f4e\u529f\u8017\u65e0\u7ebf\u901a\u4fe1\u6280\u672f\u3002 \u5728 mesh \u7f51\u7edc\u4e2d\uff0c\u4e2d\u7ee7\u8282\u70b9\uff08RN\uff09\u4f1a\u5c06\u63a5\u6536\u5230\u7684\u6570\u636e\u5305\u4e0d\u65ad\u5e7f\u64ad\u4e0b\u53bb\uff0c\u76f4\u5230\u76ee\u6807\u8282\u70b9\uff08N\uff09\u6536\u5230\u8be5\u6570\u636e\u5305\u4e3a\u6b62\uff0c\u8fd9\u662f\u4e00\u79cd\u79f0\u4e3a\u2018\u6cdb\u6d2a\uff08flooding\uff09\u2019\u7684\u7f51\u7edc\u7ed3\u6784\u3002 \u4f60\u53ef\u4ee5\u5728 Bluetooth SIG \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Bluetooth Mesh \u7684\u4ecb\u7ecd\uff1a Bluetooth Mesh \u7b80\u4ecb Bluetooth Mesh \u534f\u8bae\u89c4\u8303 \u66f4\u591a\u5173\u4e8e nRF5 SDK for Mesh \u4ecb\u7ecd, \u53ef\u4ee5\u524d\u5f80 nordicsemi.com \u3002 \u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u642d\u5efa\u5f00\u53d1\u73af\u5883\u3001\u7f16\u8bd1\u8fd0\u884c Bluetooth Mesh \u793a\u4f8b\u3002","title":"\u7b80\u4ecb"},{"location":"cn/mesh/#mesh","text":"\u5728\u5f00\u59cb\u7f16\u8bd1\u4e4b\u524d\uff0c\u9700\u8981\u5b89\u88c5 CMake \u3001 GNU Arm Toolchain \u3001 ninja \u5de5\u5177\u3002\u8fd9\u91cc\u5206\u522b\u4ecb\u7ecd\u5728 macOS \u3001 Windows \u3001 Linux \u7cfb\u7edf\u4e0a\u5b89\u88c5\u76f8\u5173\u5de5\u5177\u3002","title":"\u5b89\u88c5 Mesh \u5de5\u5177\u94fe"},{"location":"cn/mesh/#macos","text":"\u4f7f\u7528 brew \u547d\u4ee4\u5b89\u88c5 CMake and Ninja \uff1a brew install cmake ninja \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU ARM Embedded Toolchain . \u5efa\u8bae\u4f7f\u7528 6-2017-q2-update \u7248\u672c\uff0c\u7136\u540e\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a # \u5728 ~/.bash_profile \u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } \u9a8c\u8bc1 arm-none-eabi-gcc \u662f\u5426\u914d\u7f6e\u6b63\u786e\uff1a arm-none-eabi-gcc --version \u4e3a\u65b9\u4fbf\u540e\u7eed\u70e7\u5f55\u56fa\u4ef6\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 nRF5x Command Line Tools \u548c pyOCD \u3002","title":"macOS"},{"location":"cn/mesh/#windows","text":"\u5728 Windows \u7cfb\u7edf\u4e0a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Windows \u5305\u7ba1\u7406\u5668 Chocolatey \u3002 \u6309\u7167 Chocolatey \u5b89\u88c5\u9875\u9762 \u4ecb\u7ecd\u5b89\u88c5 Chocolatey \u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u8fd0\u884c\u547d\u4ee4\u884c\u5de5\u5177( cmd.exe ) \u4e3a\u907f\u514d\u6bcf\u5b89\u88c5\u4e00\u4e2a\u7a0b\u5e8f\u90fd\u9700\u8981\u5355\u72ec\u786e\u8ba4\u4e00\u904d\uff0c\u53ef\u4f7f\u80fd allowGlobalConfirmation \uff1a choco feature enable -n allowGlobalConfirmation \u5b89\u88c5 CMake \uff1a choco install cmake --installargs ADD_CMAKE_TO_PATH=System \u5b89\u88c5\u5176\u4ed6\u5de5\u5177\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\u5173\u95ed\u547d\u4ee4\u884c\u5de5\u5177\uff1a choco install git python ninja \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU ARM Embedded Toolchain \u3002\u5efa\u8bae\u4f7f\u7528 6-2017-q2-update \u7248\u672c\uff0c\u7136\u540e\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d \u4e3a\u65b9\u4fbf\u540e\u7eed\u70e7\u5f55\u56fa\u4ef6\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 nRF5x Command Line Tools \u548c pyOCD \u3002","title":"Windows"},{"location":"cn/mesh/#linux","text":"\u8fd9\u91cc\u4ee5 Unbuntu \u4e3a\u4f8b\u4ecb\u7ecd\u5982\u4f55\u914d\u7f6e\u5f00\u53d1\u73af\u5883\uff0c\u5176\u4ed6 Linux \u53d1\u884c\u7248\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u786e\u8ba4\u7cfb\u7edf\u5df2\u7ecf\u66f4\u65b0\u5b8c\u6210\uff1a sudo apt-get update sudo apt-get upgrade \u4f7f\u7528 apt-get \u5b89\u88c5\u4ee5\u4e0b\u5de5\u5177\uff1a sudo apt-get install --no-install-recommends git cmake ninja-build python3-pip \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU ARM Embedded Toolchain . \u5efa\u8bae\u4f7f\u7528 6-2017-q2-update \u7248\u672c\uff0c\u7136\u540e\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d \u4e3a\u65b9\u4fbf\u540e\u7eed\u70e7\u5f55\u56fa\u4ef6\uff0c\u8fd8\u9700\u8981\u5b89\u88c5 nRF5x Command Line Tools \u548c pyOCD \u3002","title":"Linux"},{"location":"cn/mesh/#_2","text":"\u4ece GitHub \u514b\u9686 nrf52832-mdk \u4ed3\u5e93\uff1a git clone ---recursive https://github.com/makerdiary/nrf52832-mdk.git \u5982\u679c\u5df2\u7ecf\u514b\u9686\u8fc7\u8be5\u4ed3\u5e93\uff0c\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u66f4\u65b0 nRF5-SDK-for-Mesh \u5b50\u6a21\u5757\uff1a git submodule update --init nRF5 SDK for Mesh \u9700\u8981\u914d\u5408 nRF5 SDK \u4e00\u8d77\u7f16\u8bd1\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u94fe\u63a5\u8fdb\u884c\u5b89\u88c5\uff1a \u5b89\u88c5 nRF5 SDK","title":"\u514b\u9686\u6e90\u7801\u4ed3\u5e93"},{"location":"cn/mesh/#mesh_1","text":"\u73b0\u5728\u4f60\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u548c\u76f8\u5173\u793a\u4f8b\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728 nrf_sdks/nRF5-SDK-for-Mesh \u76ee\u5f55\u521b\u5efa build \u6587\u4ef6\u5939\uff0c\u7528\u6765\u5b58\u653e ninja \u751f\u6210\u7684\u6587\u4ef6\uff1a nRF5-SDK-for-Mesh$ mkdir build cd build \u63a5\u7740\u4f7f\u7528 cmake \u5de5\u5177\u6765\u7f16\u8bd1\uff0c\u4f60\u9700\u8981\u6307\u5b9a TOOLCHAIN \u3001 PLATFORM \u3001 BOARD \u53c2\u6570\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u786e\u5b9a\u53ef\u7528\u7684 SOFTDEVICE \uff1a cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. \u751f\u6210\u7f16\u8bd1\u6587\u4ef6\u540e\u4fbf\u53ef\u4f7f\u7528 ninja target \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u91cc\u4ee5 my_light_switch_client \u4e3a\u4f8b\uff1a ninja my_light_switch_client_nrf52832_xxAA_s132_6.1.0","title":"\u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u548c\u793a\u4f8b"},{"location":"cn/mesh/#mesh_2","text":"\u8fde\u63a5 nRF52832-MDK \u5f00\u53d1\u677f\uff0c\u4f7f\u7528 ninja flash_ your target \u547d\u4ee4\u53ef\u4ee5\u81ea\u52a8\u4e0b\u8f7d\u8fd0\u884c\u793a\u4f8b\uff1a ninja flash_my_light_switch_client_nrf52832_xxAA_s132_6.1.0 \u4f7f\u7528\u4e32\u53e3\u8c03\u8bd5\u5de5\u5177\uff08\u5982\uff1a PuTTY \u6216\u8005 screen \uff09\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff1a screen /dev/cu.usbmodem1412 115200 \u4ee5\u540c\u6837\u7684\u6b65\u9aa4\u5728\u5176\u4ed6 nRF52832-MDK \u5f00\u53d1\u677f\u4e0a\u4e0b\u8f7d Server \u793a\u4f8b\uff1a ninja flash_my_light_switch_server_nrf52832_xxAA_s132_6.1.0 \u81f3\u6b64\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 nRF Mesh mobile app ( iOS / Android ) \u6765\u5efa\u7acb Bluetooth Mesh \u7f51\u7edc\uff1a","title":"\u4e0b\u8f7d\u8fd0\u884c mesh \u793a\u4f8b"},{"location":"cn/mesh/#_3","text":"\u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u65b0\u9879\u76ee\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\uff1a \u4ece examples \u76ee\u5f55\u590d\u5236\u73b0\u6709\u7684\u793a\u4f8b\uff0c\u4f8b\u5982\uff1a\u590d\u5236 examples/my_beaconing \uff0c\u5e76\u6539\u4e3a examples/my_app \uff1b \u4fee\u6539 examples/CMakeLists.txt \u6587\u4ef6\uff0c\u6dfb\u52a0 add_subdirectory(\"my_app\") \u547d\u4ee4\uff1b \u4fee\u6539 examples/my_app/CMakeLists.txt \u6587\u4ef6\uff0c\u4fee\u6539 target\uff1a set(target \"my_app\") \uff1b \u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff1a nRF5-SDK-for-Mesh $ mkdir build cd build build $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. \u7f16\u8bd1\u65b0\u7684\u76ee\u6807\u793a\u4f8b\uff1a ninja my_app \u4e0b\u8f7d\u56fa\u4ef6\uff1a ninja flash_my_app","title":"\u5982\u4f55\u521b\u5efa\u65b0\u9879\u76ee"},{"location":"cn/mesh/#_4","text":"\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK for Mesh \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01","title":"\u66f4\u591a\u793a\u4f8b"},{"location":"cn/mesh/#_5","text":"Nordic nRF5 SDK for Mesh \u6587\u6863 nRF5-SDK-for-Mesh \u4ed3\u5e93 Bluetooth Mesh \u57fa\u672c\u6982\u5ff5 nRF5 SDK for Mesh \u67b6\u6784","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/mesh/#_6","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/micropython/","text":"MicoPython \u9762\u5411\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u8f7b\u91cf\u7ea7 Python \u7b80\u4ecb MicroPython \u662f\u2f00\u4e2a Python 3 \u7684\u7cbe\u7b80\u3001\u2fbc\u6548\u5b9e\u73b0\uff0c\u5305\u542b Python \u6807\u51c6\u5e93\u7684\u2f00\u2f29\u90e8\u5206\uff0c\u5e76\u7ecf\u8fc7\u4f18\u5316\uff0c\u53ef\u4ee5\u8fd0\u2f8f\u5728\u5fae\u63a7\u5236\u5668\u548c\u53d7\u9650\u73af\u5883\u4e2d\u8fd0\u2f8f\u3002 MicroPython \u5305\u542b\u4e86\u8bf8\u5982\u4ea4\u4e92\u5f0f\u63d0\u2f70\uff0c\u4efb\u610f\u7cbe\u5ea6\u6574\u6570\u3001\u95ed\u5305\u3001\u5217\u8868\u89e3\u6790\u3001\u2f63\u6210\u5668\u3001\u5f02\u5e38\u5904\u7406\u7b49\u2fbc\u7ea7\u529f\u80fd\u3002\u7136\u2f7d\uff0c\u5b83\u2f9c\u591f\u7d27\u51d1\uff0c\u9002\u5408\u5e76\u80fd\u8fd0\u2f8f\u5728\u53ea\u6709 256k \u4ee3\u7801\u7a7a\u95f4\u548c 16K RAM \u7684\u786c\u4ef6\u4e0a\u3002 MicroPython \u65e8\u5728\u5c3d\u53ef\u80fd\u4e0e\u666e\u901a Python \u517c\u5bb9\uff0c\u4ece\u2f7d\u8f7b\u677e\u5c06\u4ee3\u7801\u4ece\u684c\u2faf\u4f20\u8f93\u5230\u5fae\u63a7\u5236\u5668\u6216\u5d4c\u2f0a\u5f0f\u7cfb\u7edf\u3002 \u5f15\u7528 MicroPhthon \u793e\u533a\u7684\u4e00\u6bb5\u8bdd\uff1a Code, Hack it, Less is more, Keep it simple, Small is beautiful, Be brave! Break things! Learn and have fun! Express yourself with MicroPython. Happy hacking! :-) \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u8bbf\u95ee MicroPython \u5b98\u65b9\u7f51\u7ad9 \u3002 \u5feb\u901f\u5165\u95e8 \u4e0b\u9762\u5185\u5bb9\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u5982\u4f55\u5728 nRF52832-MDK \u4e0a\u8fd0\u884c MicroPython\u3002 \u4e0b\u8f7d MicroPython \u56fa\u4ef6 \u6211\u4eec\u5df2\u7ecf\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u7684 MicroPython \u56fa\u4ef6\uff0c\u4f4d\u4e8e ./nrf52832-mdk/firmware/micropython/ \u76ee\u5f55\u4e0b\u3002 \u8fde\u63a5\u677f\u5b50\uff0c\u76f4\u63a5\u5c06 .hex \u56fa\u4ef6\u62d6\u5230 DAPLINK \u53ef\u79fb\u52a8\u78c1\u76d8\u4e2d\uff1a \u4e0b\u8f7d\u5b8c\u6210\uff0c\u6309\u4e0b RESET \u6309\u94ae\uff0cMicroPython \u5c06\u4ee5 REPL \u6a21\u5f0f\u8fd0\u884c\u3002 \u8fd0\u884c\u7b2c\u4e00\u884c\u4ee3\u7801 \u4f7f\u7528\u4e32\u53e3\u5de5\u5177\uff0c\u6253\u5f00\u8bbe\u5907\uff0c\u6ce2\u7279\u7387\u4e3a 115200 \uff1a $ screen /dev/cu.usbmodem1412 115200 \u8bd5\u7740\u8fd0\u884c\u4e00\u4e9b Python \u4ee3\u7801\uff1a print ( hello micropython! ) \u8f93\u5165 help() \u53ef\u4ee5\u83b7\u53d6\u4e00\u4e9b\u6709\u7528\u7684\u5e2e\u52a9\u4fe1\u606f\uff1a Blink LED \u793a\u4f8b MicroPython \u56fa\u4ef6\u5df2\u7ecf\u63d0\u4f9b\u4e00\u4e9b\u53ef\u4ee5\u64cd\u4f5c\u5916\u8bbe\u7684 API\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5 Blink LED \u4e3a\u4f8b\uff1a from machine import Pin import time led = Pin ( PA22 , Pin . OUT ) for i in range ( 0 , 10 ): led . value ( 1 ) time . sleep_ms ( 500 ) led . value ( 0 ) time . sleep_ms ( 500 ) print ( Done! ) \u89c2\u5bdf\u7eff\u8272 LED \u662f\u5426\u95ea\u70c1\u3002 \u8fd9\u5c31\u662f\u6574\u4e2a\u4f7f\u7528\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9 API \u6587\u6863\uff0c\u4f53\u9a8c\u66f4\u591a\u529f\u80fd\u3002 \u5982\u4f55\u7f16\u8bd1 MicroPython? \u4ee5\u4e0b\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u81ea\u5df1\u52a8\u624b\u7f16\u8bd1 MicroPython\u3002 \u642d\u5efa\u5f00\u53d1\u73af\u5883 \u9996\u5148\uff0c\u4e0b\u8f7d\u5b89\u88c5 GNU Arm Embedded toolchains\uff0c\u5e76\u786e\u4fdd\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff1a path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\uff1a $ arm-none-eabi-gcc --version \u6ce8\u610f \u6700\u65b0\u7248 GNU Arm Embedded toolchains \u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002 \u7f16\u8bd1\u5e76\u4e0b\u8f7d MicroPython \u4ece\u6211\u4eec\u7684\u4ed3\u5e93\u514b\u9686\u652f\u6301 nRF52832-MDK \u7684 MicroPython \u4ed3\u5e93\uff0c\u5e76\u7f16\u8bd1 MicroPython \u6807\u51c6\u5e93\uff1a $ git clone https://github.com/makerdiary/micropython.git $ cd micropython $ git submodule update --init $ make -C mpy-cross \u5207\u6362\u5230 nrf \u76ee\u5f55\uff0c\u4e0b\u8f7d \u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\uff1a micropython$ cd nrf nrf$ ./drivers/bluetooth/download_ble_stack.sh \u63a5\u7740\uff0c\u53ef\u4ee5\u4e3a nRF52832-MDK \u7f16\u8bd1\u5e76\u4e0b\u8f7d\u56fa\u4ef6\uff1a $ make BOARD = nrf52832_mdk SD = s132 sd FLASHER = pyocd \u9879\u76ee\u72b6\u6001 \u76ee\u524d\uff0c\u8fd9\u90e8\u5206\u5de5\u4f5c\u8fd8\u5904\u4e8e beta \u9636\u6bb5\uff0c\u90e8\u5206 API \u53ef\u80fd\u4f1a\u53d8\u66f4\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53c2\u4e0e\u5230\u8fd9\u4e2a\u9879\u76ee\u4e2d\u6765\uff0c\u5c3d\u7ba1\u6298\u817e\u5427\u3002 \u53c2\u8003\u8d44\u6e90 MicroPython \u5b98\u65b9\u7f51\u7ad9 MicroPython \u6587\u6863 MicroPython \u5b98\u65b9\u4ed3\u5e93 makerdiary/MicroPython \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"MicroPython"},{"location":"cn/micropython/#micopython-python","text":"","title":"MicoPython \u9762\u5411\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u8f7b\u91cf\u7ea7 Python"},{"location":"cn/micropython/#_1","text":"MicroPython \u662f\u2f00\u4e2a Python 3 \u7684\u7cbe\u7b80\u3001\u2fbc\u6548\u5b9e\u73b0\uff0c\u5305\u542b Python \u6807\u51c6\u5e93\u7684\u2f00\u2f29\u90e8\u5206\uff0c\u5e76\u7ecf\u8fc7\u4f18\u5316\uff0c\u53ef\u4ee5\u8fd0\u2f8f\u5728\u5fae\u63a7\u5236\u5668\u548c\u53d7\u9650\u73af\u5883\u4e2d\u8fd0\u2f8f\u3002 MicroPython \u5305\u542b\u4e86\u8bf8\u5982\u4ea4\u4e92\u5f0f\u63d0\u2f70\uff0c\u4efb\u610f\u7cbe\u5ea6\u6574\u6570\u3001\u95ed\u5305\u3001\u5217\u8868\u89e3\u6790\u3001\u2f63\u6210\u5668\u3001\u5f02\u5e38\u5904\u7406\u7b49\u2fbc\u7ea7\u529f\u80fd\u3002\u7136\u2f7d\uff0c\u5b83\u2f9c\u591f\u7d27\u51d1\uff0c\u9002\u5408\u5e76\u80fd\u8fd0\u2f8f\u5728\u53ea\u6709 256k \u4ee3\u7801\u7a7a\u95f4\u548c 16K RAM \u7684\u786c\u4ef6\u4e0a\u3002 MicroPython \u65e8\u5728\u5c3d\u53ef\u80fd\u4e0e\u666e\u901a Python \u517c\u5bb9\uff0c\u4ece\u2f7d\u8f7b\u677e\u5c06\u4ee3\u7801\u4ece\u684c\u2faf\u4f20\u8f93\u5230\u5fae\u63a7\u5236\u5668\u6216\u5d4c\u2f0a\u5f0f\u7cfb\u7edf\u3002 \u5f15\u7528 MicroPhthon \u793e\u533a\u7684\u4e00\u6bb5\u8bdd\uff1a Code, Hack it, Less is more, Keep it simple, Small is beautiful, Be brave! Break things! Learn and have fun! Express yourself with MicroPython. Happy hacking! :-) \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u8bbf\u95ee MicroPython \u5b98\u65b9\u7f51\u7ad9 \u3002","title":"\u7b80\u4ecb"},{"location":"cn/micropython/#_2","text":"\u4e0b\u9762\u5185\u5bb9\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u5982\u4f55\u5728 nRF52832-MDK \u4e0a\u8fd0\u884c MicroPython\u3002","title":"\u5feb\u901f\u5165\u95e8"},{"location":"cn/micropython/#micropython","text":"\u6211\u4eec\u5df2\u7ecf\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u7684 MicroPython \u56fa\u4ef6\uff0c\u4f4d\u4e8e ./nrf52832-mdk/firmware/micropython/ \u76ee\u5f55\u4e0b\u3002 \u8fde\u63a5\u677f\u5b50\uff0c\u76f4\u63a5\u5c06 .hex \u56fa\u4ef6\u62d6\u5230 DAPLINK \u53ef\u79fb\u52a8\u78c1\u76d8\u4e2d\uff1a \u4e0b\u8f7d\u5b8c\u6210\uff0c\u6309\u4e0b RESET \u6309\u94ae\uff0cMicroPython \u5c06\u4ee5 REPL \u6a21\u5f0f\u8fd0\u884c\u3002","title":"\u4e0b\u8f7d MicroPython \u56fa\u4ef6"},{"location":"cn/micropython/#_3","text":"\u4f7f\u7528\u4e32\u53e3\u5de5\u5177\uff0c\u6253\u5f00\u8bbe\u5907\uff0c\u6ce2\u7279\u7387\u4e3a 115200 \uff1a $ screen /dev/cu.usbmodem1412 115200 \u8bd5\u7740\u8fd0\u884c\u4e00\u4e9b Python \u4ee3\u7801\uff1a print ( hello micropython! ) \u8f93\u5165 help() \u53ef\u4ee5\u83b7\u53d6\u4e00\u4e9b\u6709\u7528\u7684\u5e2e\u52a9\u4fe1\u606f\uff1a","title":"\u8fd0\u884c\u7b2c\u4e00\u884c\u4ee3\u7801"},{"location":"cn/micropython/#blink-led","text":"MicroPython \u56fa\u4ef6\u5df2\u7ecf\u63d0\u4f9b\u4e00\u4e9b\u53ef\u4ee5\u64cd\u4f5c\u5916\u8bbe\u7684 API\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5 Blink LED \u4e3a\u4f8b\uff1a from machine import Pin import time led = Pin ( PA22 , Pin . OUT ) for i in range ( 0 , 10 ): led . value ( 1 ) time . sleep_ms ( 500 ) led . value ( 0 ) time . sleep_ms ( 500 ) print ( Done! ) \u89c2\u5bdf\u7eff\u8272 LED \u662f\u5426\u95ea\u70c1\u3002 \u8fd9\u5c31\u662f\u6574\u4e2a\u4f7f\u7528\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9 API \u6587\u6863\uff0c\u4f53\u9a8c\u66f4\u591a\u529f\u80fd\u3002","title":"Blink LED \u793a\u4f8b"},{"location":"cn/micropython/#micropython_1","text":"\u4ee5\u4e0b\u5185\u5bb9\u5c06\u4ecb\u7ecd\u5982\u4f55\u81ea\u5df1\u52a8\u624b\u7f16\u8bd1 MicroPython\u3002","title":"\u5982\u4f55\u7f16\u8bd1 MicroPython?"},{"location":"cn/micropython/#_4","text":"\u9996\u5148\uff0c\u4e0b\u8f7d\u5b89\u88c5 GNU Arm Embedded toolchains\uff0c\u5e76\u786e\u4fdd\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff1a path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\uff1a $ arm-none-eabi-gcc --version \u6ce8\u610f \u6700\u65b0\u7248 GNU Arm Embedded toolchains \u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff0c\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u3002","title":"\u642d\u5efa\u5f00\u53d1\u73af\u5883"},{"location":"cn/micropython/#micropython_2","text":"\u4ece\u6211\u4eec\u7684\u4ed3\u5e93\u514b\u9686\u652f\u6301 nRF52832-MDK \u7684 MicroPython \u4ed3\u5e93\uff0c\u5e76\u7f16\u8bd1 MicroPython \u6807\u51c6\u5e93\uff1a $ git clone https://github.com/makerdiary/micropython.git $ cd micropython $ git submodule update --init $ make -C mpy-cross \u5207\u6362\u5230 nrf \u76ee\u5f55\uff0c\u4e0b\u8f7d \u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\uff1a micropython$ cd nrf nrf$ ./drivers/bluetooth/download_ble_stack.sh \u63a5\u7740\uff0c\u53ef\u4ee5\u4e3a nRF52832-MDK \u7f16\u8bd1\u5e76\u4e0b\u8f7d\u56fa\u4ef6\uff1a $ make BOARD = nrf52832_mdk SD = s132 sd FLASHER = pyocd","title":"\u7f16\u8bd1\u5e76\u4e0b\u8f7d MicroPython"},{"location":"cn/micropython/#_5","text":"\u76ee\u524d\uff0c\u8fd9\u90e8\u5206\u5de5\u4f5c\u8fd8\u5904\u4e8e beta \u9636\u6bb5\uff0c\u90e8\u5206 API \u53ef\u80fd\u4f1a\u53d8\u66f4\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53c2\u4e0e\u5230\u8fd9\u4e2a\u9879\u76ee\u4e2d\u6765\uff0c\u5c3d\u7ba1\u6298\u817e\u5427\u3002","title":"\u9879\u76ee\u72b6\u6001"},{"location":"cn/micropython/#_6","text":"MicroPython \u5b98\u65b9\u7f51\u7ad9 MicroPython \u6587\u6863 MicroPython \u5b98\u65b9\u4ed3\u5e93 makerdiary/MicroPython","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/micropython/#_7","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/mynewt/","text":"Mynewt Apache \u5f00\u6e90\u3001\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf \u7b80\u4ecb Mynewt \u662f\u4e00\u6b3e\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u3002Apache Mynewt \u4f7f\u7528 Newt \u6784\u5efa\u548c\u5305\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u4ec5\u9009\u62e9\u6240\u9700\u7684\u7ec4\u4ef6\u6765\u6784\u5efa\u64cd\u4f5c\u7cfb\u7edf\u3002\u5176\u76ee\u6807\u662f\u4f7f\u529f\u8017\u548c\u6210\u672c\u6210\u4e3a\u9a71\u52a8\u56e0\u7d20\u7684\u5fae\u63a7\u5236\u5668\u73af\u5883\u7684\u5e94\u7528\u5f00\u53d1\u53d8\u5f97\u5bb9\u6613\u3002 Mynewt \u63d0\u4f9b\u5f00\u6e90\u84dd\u7259 5.0 \u534f\u8bae\u6808\u548c\u5d4c\u5165\u5f0f\u4e2d\u95f4\u4ef6\u3001\u95ea\u5b58\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u5806\u6808\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001FATFS\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001\u7edf\u8ba1\u548c\u8bb0\u5f55\u57fa\u7840\u8bbe\u65bd\u7b49\u7684\u652f\u6301\u3002 \u5b89\u88c5 Newt \u4e3a\u4e86\u662f\u5f00\u53d1\u8005\u80fd\u591f\u66f4\u597d\u5730\u4f7f\u7528 Mynewt \u63d0\u4f9b\u7684\u7ec4\u4ef6\u6765\u5f00\u53d1\u5e94\u7528\uff0cMynewt \u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a newt \u7684\u6784\u5efa\u5de5\u5177\u548c\u5305\u7ba1\u7406\u5668\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002 \u4e0b\u9762\u5c06\u4ecb\u7ecd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u5982\u4f55\u5b89\u88c5 newt \uff1a Windows \u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982 MSYS2 \u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a \u524d\u5f80 MSYS2 \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b \u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a $ pacman -Syu \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a $ pacman -Su \u5b89\u88c5 git \u548c tar \u5de5\u5177: $ pacman -S git tar \u4e0b\u8f7d\u5e76\u89e3\u538b newt \u6e90\u7801\uff1a $ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz $ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz \u8fd0\u884c build.sh \u6765\u7f16\u8bd1 newt \u5de5\u5177\uff1a $ cd mynewt-newt-mynewt_1_3_0_tag $ ./build.sh $ rm /tmp/mynewt_1_3_0_tag.tar.gz \u7f16\u8bd1\u6210\u529f\u540e\u5c06\u751f\u6210 newt/newt.exe \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c06\u5176\u79fb\u52a8\u5230\u7cfb\u7edf\u76ee\u5f55\uff1a $ mv newt/newt.exe /usr/bin macOS \u5728 macOS \u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Homebrew \u6765\u5b89\u88c5 newt\u3002\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5\uff0c\u9700\u8981\u5148\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ brew tap runtimeco/homebrew-mynewt $ brew update \u7136\u540e\u5b89\u88c5\u6700\u65b0\u7248 newt \u5de5\u5177\uff1a $ brew update $ brew install mynewt-newt Linux \u5728 Linux \u7cfb\u7edf\uff08\u6bd4\u5982 Ubuntu\uff09\uff0c\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b89\u88c5 newt\uff1a $ sudo apt-get update $ sudo apt-get install newt Note \u5982\u679c\u9047\u5230\u9519\u8bef (\u6bd4\u5982\u4e22\u5931 sys/mman.h \u6587\u4ef6), \u9700\u8981\u5148\u786e\u8ba4\u5df2\u7ecf\u5b89\u88c5\u4e86 32\u4f4d glibc : $ sudo apt-get install gcc-multilib \u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b \u5b89\u88c5\u597d newt \u4e4b\u540e\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 blinky \u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u9a8c\u8bc1\uff1a \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\u5e76\u5207\u6362\u5230 blinky \u793a\u4f8b\u76ee\u5f55\uff1a $ cd ./nrf52832-mdk/examples/mynewt/blinky \u4f7f\u7528 newt install \u547d\u4ee4\u5b89\u88c5\u793a\u4f8b\u4f9d\u8d56\u9879\uff1a blinky$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none \u8be5\u793a\u4f8b\u5df2\u7ecf\u63d0\u4f9b\u4e86\u51e0\u4e2a\u53ef\u7528\u7684 target\uff0c\u5176\u4e2d nrf52_blinky \u4e3a\u5e94\u7528\u7a0b\u5e8f\u3001 nrf52_boot \u4e3a Bootloader\uff0c\u53ef\u4ee5\u4f7f\u7528 newt target show \u547d\u4ee4\u67e5\u770b\uff1a blinky$ newt target show targets/my_blinky_sim app = apps/blinky bsp = @apache-mynewt-core/hw/bsp/native build_profile = debug targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized \u8fd0\u884c newt build nrf52_boot \u547d\u4ee4\u7f16\u8bd1 Bootloader\uff1a blinky$ newt build nrf52_boot Building target targets/nrf52_boot Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c Compiling repos/apache-mynewt-core/apps/boot/src/boot.c Compiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c Compiling repos/apache-mynewt-core/boot/bootutil/src/loader.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c ... Archiving nrf52_boot-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf Target successfully built: targets/nrf52_boot \u8fd0\u884c newt build nrf52_blinky \u547d\u4ee4\u7f16\u8bd1 blinky \u5e94\u7528\uff1a blinky$ newt build nrf52_blinky Building target targets/nrf52_blinky Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52.s Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/sbrk.c Compiling apps/blinky/src/main.c Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/hal_bsp.c Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s Compiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c Compiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c Compiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_common.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_gpio.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_i2c.c ... Archiving nrf52_blinky-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf Target successfully built: targets/nrf52_blinky \u7f16\u8bd1\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 newt create-image nrf52_blinky 1.0.0 \u547d\u4ee4\u521b\u5efa\u955c\u50cf\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\u7248\u672c\u53f7\uff0c\u8fd9\u91cc\u4ee5 1.0.0 \u4f5c\u4e3a\u793a\u4f8b\uff1a blinky$ newt create-image nrf52_blinky 1 .0.0 App image succesfully generated: ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img \u63d0\u793a nRF52832-MDK \u786c\u4ef6\u652f\u6301 OpenOCD \u8c03\u8bd5\u5668\uff0cMynewt \u4f7f\u7528 OpenOCD \u6765\u4e0b\u8f7d\u56fa\u4ef6\u548c\u8c03\u8bd5\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u94fe\u63a5\u6307\u5f15\u5b8c\u6210\u5b89\u88c5\uff1a OpenOCD \u5b89\u88c5\u6307\u5f15 \u3002 \u8fd0\u884c newt load nrf52_boot \u547d\u4ee4\u4e0b\u8f7d Bootloader\uff1a blinky$ newt load nrf52_boot Loading bootloader \u8fd0\u884c newt load nrf52_blinky \u547d\u4ee4\u4e0b\u8f7d blinky \u5e94\u7528\uff1a blinky$ newt load nrf52_blinky Loading app image into slot 1 \u89c2\u5bdf nRF52832-MDK \u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff1a \u521b\u5efa\u65b0\u5de5\u7a0b \u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u81ea\u5df1\u7684\u65b0\u5de5\u7a0b\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5373\u53ef\u5feb\u901f\u5b8c\u6210\u3002 \u5728\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\uff08\u8fd9\u91cc\u5047\u8bbe\u4e3a dev \uff09\u8fd0\u884c newt new myproj \u521b\u5efa\u540d\u4e3a myproj \u7684\u65b0\u5de5\u7a0b\uff1a $cd ~/dev $ newt new myproj Downloading project skeleton from apache/mynewt-blinky... Installing skeleton in myproj... Project myproj successfully created. \u5b8c\u6210\u540e newt \u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u9879\u76ee\u6a21\u677f\uff0c\u5927\u81f4\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 NOTICE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 apps \u2502 \u2514\u2500\u2500 blinky \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.c \u251c\u2500\u2500 project.yml \u2514\u2500\u2500 targets \u251c\u2500\u2500 my_blinky_sim \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 target.yml \u2514\u2500\u2500 unittest \u251c\u2500\u2500 pkg.yml \u2514\u2500\u2500 target.yml 6 directories, 10 files \u6211\u4eec\u5df2\u7ecf\u4e3a nRF52832-MDK \u63d0\u4f9b Mynewt \u677f\u7ea7\u652f\u6301\u5305 mynewt_nrf52832_mdk \uff0c\u53ef\u4ee5\u5728 project.yml \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\uff1a project.name: myproj project.repositories: - apache-mynewt-core - mynewt_nrf52832_mdk # Use github s distribution mechanism for core ASF libraries. # This provides mirroring automatically for us. # repository.apache-mynewt-core: type: github vers: 1 -latest user: apache repo: mynewt-core # a special repo to hold hardware specific stuff for nRF52832-MDK repository.mynewt_nrf52832_mdk: type: github vers: 0 -dev user: makerdiary repo: mynewt_nrf52832_mdk \u8fd0\u884c newt install \u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u9879\uff1a myproj$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981\u4e3a nRF52832-MDK \u521b\u5efa\u4e24\u4e2a target\uff0c\u4e00\u4e2a\u662f Bootloader\uff0c\u4e00\u4e2a\u662f\u5e94\u7528\u7a0b\u5e8f\uff1a myproj$ newt target create nrf52_boot myproj$ newt target set nrf52_boot app = @apache-mynewt-core/apps/boot myproj$ newt target set nrf52_boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_boot build_profile = optimized myproj$ newt target create nrf52_blinky myproj$ newt target set nrf52_blinky app = apps/blinky myproj$ newt target set nrf52_blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_blinky build_profile = debug \u8fd0\u884c newt target show \u67e5\u770b\u76ee\u6807\u8bbe\u7f6e\uff1a myproj$ newt target show targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized \u8fd9\u65f6\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u76ee\u6807\u4ee3\u7801\uff1a myproj$ newt build nrf52_boot myproj$ newt build nrf52_blinky \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u955c\u50cf\uff1a myproj$ newt create-image nrf52_blinky 1 .0.0 \u6700\u540e\uff0c\u4f7f\u7528 newt load \u52a0\u8f7d\u56fa\u4ef6\uff1a myproj$ newt load nrf52_boot Loading bootloader myproj$ newt load nrf52_blinky Loading app image into slot 1 \u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\uff0c\u4f60\u5df2\u6210\u529f\u5b8c\u6210\u65b0\u5de5\u7a0b\u521b\u5efa\u3002 \u66f4\u591a\u793a\u4f8b \u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u793a\u4f8b\uff0c\u4ee5\u4fbf\u4f60\u66f4\u597d\u5730\u5f00\u53d1 Mynewt \u5e94\u7528\u3002\u4f60\u53ef\u4ee5\u5173\u6ce8 nrf52832-mdk \u4ed3\u5e93\u53ca\u65f6\u83b7\u5f97\u66f4\u65b0\u3002 \u53c2\u8003\u8d44\u6e90 Apache Mynewt \u5b98\u7f51 Apache Mynewt \u6587\u6863\u4e2d\u5fc3 Apache/mynewt-core \u4ed3\u5e93 nRF52832-MDK Mynewt \u677f\u7ea7\u652f\u6301\u5305 \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"Mynewt"},{"location":"cn/mynewt/#mynewt-apache","text":"","title":"Mynewt Apache \u5f00\u6e90\u3001\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf"},{"location":"cn/mynewt/#_1","text":"Mynewt \u662f\u4e00\u6b3e\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u3002Apache Mynewt \u4f7f\u7528 Newt \u6784\u5efa\u548c\u5305\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u4ec5\u9009\u62e9\u6240\u9700\u7684\u7ec4\u4ef6\u6765\u6784\u5efa\u64cd\u4f5c\u7cfb\u7edf\u3002\u5176\u76ee\u6807\u662f\u4f7f\u529f\u8017\u548c\u6210\u672c\u6210\u4e3a\u9a71\u52a8\u56e0\u7d20\u7684\u5fae\u63a7\u5236\u5668\u73af\u5883\u7684\u5e94\u7528\u5f00\u53d1\u53d8\u5f97\u5bb9\u6613\u3002 Mynewt \u63d0\u4f9b\u5f00\u6e90\u84dd\u7259 5.0 \u534f\u8bae\u6808\u548c\u5d4c\u5165\u5f0f\u4e2d\u95f4\u4ef6\u3001\u95ea\u5b58\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u5806\u6808\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001FATFS\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001\u7edf\u8ba1\u548c\u8bb0\u5f55\u57fa\u7840\u8bbe\u65bd\u7b49\u7684\u652f\u6301\u3002","title":"\u7b80\u4ecb"},{"location":"cn/mynewt/#newt","text":"\u4e3a\u4e86\u662f\u5f00\u53d1\u8005\u80fd\u591f\u66f4\u597d\u5730\u4f7f\u7528 Mynewt \u63d0\u4f9b\u7684\u7ec4\u4ef6\u6765\u5f00\u53d1\u5e94\u7528\uff0cMynewt \u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a newt \u7684\u6784\u5efa\u5de5\u5177\u548c\u5305\u7ba1\u7406\u5668\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002 \u4e0b\u9762\u5c06\u4ecb\u7ecd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u5982\u4f55\u5b89\u88c5 newt \uff1a","title":"\u5b89\u88c5 Newt"},{"location":"cn/mynewt/#windows","text":"\u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982 MSYS2 \u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a \u524d\u5f80 MSYS2 \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b \u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a $ pacman -Syu \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a $ pacman -Su \u5b89\u88c5 git \u548c tar \u5de5\u5177: $ pacman -S git tar \u4e0b\u8f7d\u5e76\u89e3\u538b newt \u6e90\u7801\uff1a $ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz $ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz \u8fd0\u884c build.sh \u6765\u7f16\u8bd1 newt \u5de5\u5177\uff1a $ cd mynewt-newt-mynewt_1_3_0_tag $ ./build.sh $ rm /tmp/mynewt_1_3_0_tag.tar.gz \u7f16\u8bd1\u6210\u529f\u540e\u5c06\u751f\u6210 newt/newt.exe \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c06\u5176\u79fb\u52a8\u5230\u7cfb\u7edf\u76ee\u5f55\uff1a $ mv newt/newt.exe /usr/bin","title":"Windows"},{"location":"cn/mynewt/#macos","text":"\u5728 macOS \u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Homebrew \u6765\u5b89\u88c5 newt\u3002\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5\uff0c\u9700\u8981\u5148\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ brew tap runtimeco/homebrew-mynewt $ brew update \u7136\u540e\u5b89\u88c5\u6700\u65b0\u7248 newt \u5de5\u5177\uff1a $ brew update $ brew install mynewt-newt","title":"macOS"},{"location":"cn/mynewt/#linux","text":"\u5728 Linux \u7cfb\u7edf\uff08\u6bd4\u5982 Ubuntu\uff09\uff0c\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b89\u88c5 newt\uff1a $ sudo apt-get update $ sudo apt-get install newt Note \u5982\u679c\u9047\u5230\u9519\u8bef (\u6bd4\u5982\u4e22\u5931 sys/mman.h \u6587\u4ef6), \u9700\u8981\u5148\u786e\u8ba4\u5df2\u7ecf\u5b89\u88c5\u4e86 32\u4f4d glibc : $ sudo apt-get install gcc-multilib","title":"Linux"},{"location":"cn/mynewt/#_2","text":"\u5b89\u88c5\u597d newt \u4e4b\u540e\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 blinky \u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u9a8c\u8bc1\uff1a \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\u5e76\u5207\u6362\u5230 blinky \u793a\u4f8b\u76ee\u5f55\uff1a $ cd ./nrf52832-mdk/examples/mynewt/blinky \u4f7f\u7528 newt install \u547d\u4ee4\u5b89\u88c5\u793a\u4f8b\u4f9d\u8d56\u9879\uff1a blinky$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none \u8be5\u793a\u4f8b\u5df2\u7ecf\u63d0\u4f9b\u4e86\u51e0\u4e2a\u53ef\u7528\u7684 target\uff0c\u5176\u4e2d nrf52_blinky \u4e3a\u5e94\u7528\u7a0b\u5e8f\u3001 nrf52_boot \u4e3a Bootloader\uff0c\u53ef\u4ee5\u4f7f\u7528 newt target show \u547d\u4ee4\u67e5\u770b\uff1a blinky$ newt target show targets/my_blinky_sim app = apps/blinky bsp = @apache-mynewt-core/hw/bsp/native build_profile = debug targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized \u8fd0\u884c newt build nrf52_boot \u547d\u4ee4\u7f16\u8bd1 Bootloader\uff1a blinky$ newt build nrf52_boot Building target targets/nrf52_boot Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c Compiling repos/apache-mynewt-core/apps/boot/src/boot.c Compiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c Compiling repos/apache-mynewt-core/boot/bootutil/src/loader.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c ... Archiving nrf52_boot-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf Target successfully built: targets/nrf52_boot \u8fd0\u884c newt build nrf52_blinky \u547d\u4ee4\u7f16\u8bd1 blinky \u5e94\u7528\uff1a blinky$ newt build nrf52_blinky Building target targets/nrf52_blinky Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52.s Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/sbrk.c Compiling apps/blinky/src/main.c Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/hal_bsp.c Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s Compiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c Compiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c Compiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_common.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_gpio.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_i2c.c ... Archiving nrf52_blinky-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf Target successfully built: targets/nrf52_blinky \u7f16\u8bd1\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 newt create-image nrf52_blinky 1.0.0 \u547d\u4ee4\u521b\u5efa\u955c\u50cf\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\u7248\u672c\u53f7\uff0c\u8fd9\u91cc\u4ee5 1.0.0 \u4f5c\u4e3a\u793a\u4f8b\uff1a blinky$ newt create-image nrf52_blinky 1 .0.0 App image succesfully generated: ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img \u63d0\u793a nRF52832-MDK \u786c\u4ef6\u652f\u6301 OpenOCD \u8c03\u8bd5\u5668\uff0cMynewt \u4f7f\u7528 OpenOCD \u6765\u4e0b\u8f7d\u56fa\u4ef6\u548c\u8c03\u8bd5\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u94fe\u63a5\u6307\u5f15\u5b8c\u6210\u5b89\u88c5\uff1a OpenOCD \u5b89\u88c5\u6307\u5f15 \u3002 \u8fd0\u884c newt load nrf52_boot \u547d\u4ee4\u4e0b\u8f7d Bootloader\uff1a blinky$ newt load nrf52_boot Loading bootloader \u8fd0\u884c newt load nrf52_blinky \u547d\u4ee4\u4e0b\u8f7d blinky \u5e94\u7528\uff1a blinky$ newt load nrf52_blinky Loading app image into slot 1 \u89c2\u5bdf nRF52832-MDK \u662f\u5426\u6b63\u5e38\u8fd0\u884c\uff1a","title":"\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b"},{"location":"cn/mynewt/#_3","text":"\u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u81ea\u5df1\u7684\u65b0\u5de5\u7a0b\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5373\u53ef\u5feb\u901f\u5b8c\u6210\u3002 \u5728\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\uff08\u8fd9\u91cc\u5047\u8bbe\u4e3a dev \uff09\u8fd0\u884c newt new myproj \u521b\u5efa\u540d\u4e3a myproj \u7684\u65b0\u5de5\u7a0b\uff1a $cd ~/dev $ newt new myproj Downloading project skeleton from apache/mynewt-blinky... Installing skeleton in myproj... Project myproj successfully created. \u5b8c\u6210\u540e newt \u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u9879\u76ee\u6a21\u677f\uff0c\u5927\u81f4\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 NOTICE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 apps \u2502 \u2514\u2500\u2500 blinky \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.c \u251c\u2500\u2500 project.yml \u2514\u2500\u2500 targets \u251c\u2500\u2500 my_blinky_sim \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 target.yml \u2514\u2500\u2500 unittest \u251c\u2500\u2500 pkg.yml \u2514\u2500\u2500 target.yml 6 directories, 10 files \u6211\u4eec\u5df2\u7ecf\u4e3a nRF52832-MDK \u63d0\u4f9b Mynewt \u677f\u7ea7\u652f\u6301\u5305 mynewt_nrf52832_mdk \uff0c\u53ef\u4ee5\u5728 project.yml \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\uff1a project.name: myproj project.repositories: - apache-mynewt-core - mynewt_nrf52832_mdk # Use github s distribution mechanism for core ASF libraries. # This provides mirroring automatically for us. # repository.apache-mynewt-core: type: github vers: 1 -latest user: apache repo: mynewt-core # a special repo to hold hardware specific stuff for nRF52832-MDK repository.mynewt_nrf52832_mdk: type: github vers: 0 -dev user: makerdiary repo: mynewt_nrf52832_mdk \u8fd0\u884c newt install \u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u9879\uff1a myproj$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981\u4e3a nRF52832-MDK \u521b\u5efa\u4e24\u4e2a target\uff0c\u4e00\u4e2a\u662f Bootloader\uff0c\u4e00\u4e2a\u662f\u5e94\u7528\u7a0b\u5e8f\uff1a myproj$ newt target create nrf52_boot myproj$ newt target set nrf52_boot app = @apache-mynewt-core/apps/boot myproj$ newt target set nrf52_boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_boot build_profile = optimized myproj$ newt target create nrf52_blinky myproj$ newt target set nrf52_blinky app = apps/blinky myproj$ newt target set nrf52_blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_blinky build_profile = debug \u8fd0\u884c newt target show \u67e5\u770b\u76ee\u6807\u8bbe\u7f6e\uff1a myproj$ newt target show targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized \u8fd9\u65f6\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u76ee\u6807\u4ee3\u7801\uff1a myproj$ newt build nrf52_boot myproj$ newt build nrf52_blinky \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u955c\u50cf\uff1a myproj$ newt create-image nrf52_blinky 1 .0.0 \u6700\u540e\uff0c\u4f7f\u7528 newt load \u52a0\u8f7d\u56fa\u4ef6\uff1a myproj$ newt load nrf52_boot Loading bootloader myproj$ newt load nrf52_blinky Loading app image into slot 1 \u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\uff0c\u4f60\u5df2\u6210\u529f\u5b8c\u6210\u65b0\u5de5\u7a0b\u521b\u5efa\u3002","title":"\u521b\u5efa\u65b0\u5de5\u7a0b"},{"location":"cn/mynewt/#_4","text":"\u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u793a\u4f8b\uff0c\u4ee5\u4fbf\u4f60\u66f4\u597d\u5730\u5f00\u53d1 Mynewt \u5e94\u7528\u3002\u4f60\u53ef\u4ee5\u5173\u6ce8 nrf52832-mdk \u4ed3\u5e93\u53ca\u65f6\u83b7\u5f97\u66f4\u65b0\u3002","title":"\u66f4\u591a\u793a\u4f8b"},{"location":"cn/mynewt/#_5","text":"Apache Mynewt \u5b98\u7f51 Apache Mynewt \u6587\u6863\u4e2d\u5fc3 Apache/mynewt-core \u4ed3\u5e93 nRF52832-MDK Mynewt \u677f\u7ea7\u652f\u6301\u5305","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/mynewt/#_6","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/nrf5-sdk/","text":"nRF5 SDK Nordic \u5b98\u65b9\u9488\u5bf9 nRF5x \u7cfb\u5217 SoC \u7684\u8f6f\u4ef6\u5f00\u53d1\u5305 \u7b80\u4ecb nRF5 SDK \u662f Nordic \u9488\u5bf9 nRF5x \u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883\uff0c\u5305\u542b\u5404\u79cd\u5916\u8bbe\u9a71\u52a8\u3001\u4ee3\u7801\u5e93\u3001\u5e94\u7528\u793a\u4f8b\u3001\u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\u4ee5\u53ca\u5176\u4ed6\u5177\u6709\u4e13\u5229\u7684\u65e0\u7ebf\u534f\u8bae\u6808\u3002 nRF5 SDK \u4ee5 .zip \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u53d1\u5e03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u81ea\u7531\u9009\u62e9\u5f00\u53d1\u73af\u5883\u3002 \u6211\u4eec\u5df2\u7ecf\u4e3a nRF52832-MDK \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u786e\u4fdd\u80fd\u591f\u5229\u7528 nRF5 SDK \u5feb\u901f\u5f00\u53d1\u4f60\u81ea\u5df1\u7684\u5e94\u7528\u3002 \u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u642d\u5efa\u4e00\u4e2a\u57fa\u672c\u7684\u5f00\u53d1\u73af\u5883\uff0c\u63a8\u8350\u4f7f\u7528 GNU Arm Embedded Toolchains\u3002 \u642d\u5efa\u5f00\u53d1\u73af\u5883 \u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u642d\u5efa\u5f00\u53d1\u73af\u5883\uff0c\u5bf9\u4e8e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002 \u5b89\u88c5 GNU Arm Embedded Toolchain GNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a \u70b9\u51fb\u4e0b\u8f7d \u4e0b\u8f7d\u3001\u5b89\u88c5 6-2017-q2-update \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } \u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a $ arm-none-eabi-gcc --version \u5b89\u88c5 GNU make nRF5 SDK \u4f9d\u8d56\u4e8e makefile \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\u9700\u8981 GNU make \u5de5\u5177\u6765\u5904\u7406 makefile\u3002 \u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982 MSYS2 \u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a \u524d\u5f80 MSYS2 \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b \u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a $ pacman -Syu \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a $ pacman -Su \u5b89\u88c5 git \u3001 make \u3001 python2 \u7b49\u5de5\u5177\uff1a $ pacman -S git make python2 Linux \u548c macOS \u7cfb\u7edf\u4e00\u822c\u81ea\u5e26 make \u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7 make -v \u547d\u4ee4\u67e5\u770b\u8be5\u5de5\u5177\u662f\u5426\u53ef\u7528\u3002\u5bf9\u4e8e\u67d0\u4e9b Linux \u53d1\u884c\u7248\u53ef\u80fd\u9700\u8981\u53e6\u884c\u5b89\u88c5\uff0c\u4f8b\u5982\u5728 Ubuntu \u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a $ sudo apt-get install build-essential checkinstall \u5b89\u88c5 nRF5 SDK \u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece Nordic \u5b98\u7f51\u4e0b\u8f7d nRF5 SDK\uff0c\u6700\u65b0\u7248\u672c\u4e3a nRF5_SDK_15.2.0_9412b96 \u3002 \u4e0b\u8f7d nRF5 SDK \u4f60\u9700\u8981\u5c06\u8be5\u8f6f\u4ef6\u5305\u89e3\u538b\u5230 nrf52832-mdk \u4ed3\u5e93\uff0c\u4e00\u822c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a ./nrf52832-mdk/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 firmware \u251c\u2500\u2500 examples \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u2514\u2500\u2500 nRF5_SDK_v15.2.0_9412b96 \u2514\u2500\u2500 tools \u8bbe\u7f6e\u5de5\u5177\u94fe\u8def\u5f84\uff0c\u5bf9\u4e8e Linux \u548c macOS \u4e3b\u8981\u4fee\u6539 makefile.posix \u6587\u4ef6\uff0cWindows \u7cfb\u7edf\u5219\u4fee\u6539 makefile.windows \uff0c\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4f4d\u4e8e\u4ee5\u4e0b\u76ee\u5f55\uff1a SDK /components/toolchain/gcc \u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\uff08\u4f8b\u5982\uff1a Sublime \uff09\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u5c06 GNU_INSTALL_ROOT \u8bbe\u7f6e\u4e3a\u524d\u9762\u5b89\u88c5\u7684 GNU Arm Embedded Toolchain \u7684\u76ee\u5f55\uff0c\u53c2\u8003\u8bbe\u7f6e\u5982\u4e0b\uff1a GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/ GNU_VERSION ? = 6 .3.1 GNU_PREFIX ? = arm-none-eabi \u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b \u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4ee5 blinky \u4e3a\u4f8b\uff1a \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a $ cd ./nrf52832-mdk/examples/nrf5-sdk/blinky/armgcc/ \u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\u7f16\u8bd1\u548c\u56fa\u4ef6\u4e0b\u8f7d\uff1a $ make flash \u89c2\u5bdf RGB LED \u662f\u5426\u5f00\u59cb\u95ea\u70c1\uff1a \u8fd0\u884c\u5e26 SoftDevice \u7684\u793a\u4f8b \u4f60\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5e26\u5177\u6709 Bluetooth \u6216 ANT \u65e0\u7ebf\u529f\u80fd\u7684\u4f8b\u5b50\uff0c\u5728\u6b64\u4e4b\u524d\u9700\u8981\u5148\u4e0b\u8f7d SoftDevice \u56fa\u4ef6\u3002\u8be5\u56fa\u4ef6\u4ee5 .hex \u7684\u65b9\u5f0f\u63d0\u4f9b\uff0c\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u76ee\u5f55\u627e\u5230\uff1a SDK path components/softdevice/SoftDevice/hex \u6216\u8005\u76f4\u63a5\u4ece nordicsemi.com \u7f51\u7ad9\u4e0b\u8f7d\u3002 \u6211\u4eec\u5df2\u7ecf\u5728 makefile \u63d0\u4f9b\u4e0b\u8f7d SoftDevice \u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u4e0b\u8f7d\uff1a # \u8fd0\u884cflash_softdevice \u53ef\u4ee5\u53ea\u4e0b\u8f7d SoftDevice $ make flash_softdevice # \u8fd0\u884c flash_all \u53ef\u4ee5\u4e0b\u8f7dSoftDevice \u548c app \u5408\u5e76\u540e\u7684\u56fa\u4ef6 $ make flash_all \u66f4\u591a\u793a\u4f8b \u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01 \u53c2\u8003\u8d44\u6e90 Nordic nRF5 SDK Nordic \u6587\u6863\u5e93 makerdiary/nrf52832-mdk GNU Arm Embedded Toolchain \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"nRF5 SDK"},{"location":"cn/nrf5-sdk/#nrf5-sdk-nordic-nrf5x-soc","text":"","title":"nRF5 SDK Nordic \u5b98\u65b9\u9488\u5bf9 nRF5x \u7cfb\u5217 SoC \u7684\u8f6f\u4ef6\u5f00\u53d1\u5305"},{"location":"cn/nrf5-sdk/#_1","text":"nRF5 SDK \u662f Nordic \u9488\u5bf9 nRF5x \u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883\uff0c\u5305\u542b\u5404\u79cd\u5916\u8bbe\u9a71\u52a8\u3001\u4ee3\u7801\u5e93\u3001\u5e94\u7528\u793a\u4f8b\u3001\u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\u4ee5\u53ca\u5176\u4ed6\u5177\u6709\u4e13\u5229\u7684\u65e0\u7ebf\u534f\u8bae\u6808\u3002 nRF5 SDK \u4ee5 .zip \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u53d1\u5e03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u81ea\u7531\u9009\u62e9\u5f00\u53d1\u73af\u5883\u3002 \u6211\u4eec\u5df2\u7ecf\u4e3a nRF52832-MDK \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u786e\u4fdd\u80fd\u591f\u5229\u7528 nRF5 SDK \u5feb\u901f\u5f00\u53d1\u4f60\u81ea\u5df1\u7684\u5e94\u7528\u3002 \u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u642d\u5efa\u4e00\u4e2a\u57fa\u672c\u7684\u5f00\u53d1\u73af\u5883\uff0c\u63a8\u8350\u4f7f\u7528 GNU Arm Embedded Toolchains\u3002","title":"\u7b80\u4ecb"},{"location":"cn/nrf5-sdk/#_2","text":"\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u642d\u5efa\u5f00\u53d1\u73af\u5883\uff0c\u5bf9\u4e8e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002","title":"\u642d\u5efa\u5f00\u53d1\u73af\u5883"},{"location":"cn/nrf5-sdk/#gnu-arm-embedded-toolchain","text":"GNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a \u70b9\u51fb\u4e0b\u8f7d \u4e0b\u8f7d\u3001\u5b89\u88c5 6-2017-q2-update \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } \u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a $ arm-none-eabi-gcc --version","title":"\u5b89\u88c5 GNU Arm Embedded Toolchain"},{"location":"cn/nrf5-sdk/#gnu-make","text":"nRF5 SDK \u4f9d\u8d56\u4e8e makefile \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\u9700\u8981 GNU make \u5de5\u5177\u6765\u5904\u7406 makefile\u3002 \u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982 MSYS2 \u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a \u524d\u5f80 MSYS2 \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b \u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a $ pacman -Syu \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a $ pacman -Su \u5b89\u88c5 git \u3001 make \u3001 python2 \u7b49\u5de5\u5177\uff1a $ pacman -S git make python2 Linux \u548c macOS \u7cfb\u7edf\u4e00\u822c\u81ea\u5e26 make \u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7 make -v \u547d\u4ee4\u67e5\u770b\u8be5\u5de5\u5177\u662f\u5426\u53ef\u7528\u3002\u5bf9\u4e8e\u67d0\u4e9b Linux \u53d1\u884c\u7248\u53ef\u80fd\u9700\u8981\u53e6\u884c\u5b89\u88c5\uff0c\u4f8b\u5982\u5728 Ubuntu \u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a $ sudo apt-get install build-essential checkinstall","title":"\u5b89\u88c5 GNU make"},{"location":"cn/nrf5-sdk/#nrf5-sdk","text":"\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece Nordic \u5b98\u7f51\u4e0b\u8f7d nRF5 SDK\uff0c\u6700\u65b0\u7248\u672c\u4e3a nRF5_SDK_15.2.0_9412b96 \u3002 \u4e0b\u8f7d nRF5 SDK \u4f60\u9700\u8981\u5c06\u8be5\u8f6f\u4ef6\u5305\u89e3\u538b\u5230 nrf52832-mdk \u4ed3\u5e93\uff0c\u4e00\u822c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a ./nrf52832-mdk/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 firmware \u251c\u2500\u2500 examples \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u2514\u2500\u2500 nRF5_SDK_v15.2.0_9412b96 \u2514\u2500\u2500 tools \u8bbe\u7f6e\u5de5\u5177\u94fe\u8def\u5f84\uff0c\u5bf9\u4e8e Linux \u548c macOS \u4e3b\u8981\u4fee\u6539 makefile.posix \u6587\u4ef6\uff0cWindows \u7cfb\u7edf\u5219\u4fee\u6539 makefile.windows \uff0c\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4f4d\u4e8e\u4ee5\u4e0b\u76ee\u5f55\uff1a SDK /components/toolchain/gcc \u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\uff08\u4f8b\u5982\uff1a Sublime \uff09\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u5c06 GNU_INSTALL_ROOT \u8bbe\u7f6e\u4e3a\u524d\u9762\u5b89\u88c5\u7684 GNU Arm Embedded Toolchain \u7684\u76ee\u5f55\uff0c\u53c2\u8003\u8bbe\u7f6e\u5982\u4e0b\uff1a GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/ GNU_VERSION ? = 6 .3.1 GNU_PREFIX ? = arm-none-eabi","title":"\u5b89\u88c5 nRF5 SDK"},{"location":"cn/nrf5-sdk/#_3","text":"\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4ee5 blinky \u4e3a\u4f8b\uff1a \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a $ cd ./nrf52832-mdk/examples/nrf5-sdk/blinky/armgcc/ \u5c06 nRF52832-MDK \u8fde\u63a5\u5230 PC\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\u7f16\u8bd1\u548c\u56fa\u4ef6\u4e0b\u8f7d\uff1a $ make flash \u89c2\u5bdf RGB LED \u662f\u5426\u5f00\u59cb\u95ea\u70c1\uff1a","title":"\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b"},{"location":"cn/nrf5-sdk/#softdevice","text":"\u4f60\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5e26\u5177\u6709 Bluetooth \u6216 ANT \u65e0\u7ebf\u529f\u80fd\u7684\u4f8b\u5b50\uff0c\u5728\u6b64\u4e4b\u524d\u9700\u8981\u5148\u4e0b\u8f7d SoftDevice \u56fa\u4ef6\u3002\u8be5\u56fa\u4ef6\u4ee5 .hex \u7684\u65b9\u5f0f\u63d0\u4f9b\uff0c\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u76ee\u5f55\u627e\u5230\uff1a SDK path components/softdevice/SoftDevice/hex \u6216\u8005\u76f4\u63a5\u4ece nordicsemi.com \u7f51\u7ad9\u4e0b\u8f7d\u3002 \u6211\u4eec\u5df2\u7ecf\u5728 makefile \u63d0\u4f9b\u4e0b\u8f7d SoftDevice \u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u4e0b\u8f7d\uff1a # \u8fd0\u884cflash_softdevice \u53ef\u4ee5\u53ea\u4e0b\u8f7d SoftDevice $ make flash_softdevice # \u8fd0\u884c flash_all \u53ef\u4ee5\u4e0b\u8f7dSoftDevice \u548c app \u5408\u5e76\u540e\u7684\u56fa\u4ef6 $ make flash_all","title":"\u8fd0\u884c\u5e26 SoftDevice \u7684\u793a\u4f8b"},{"location":"cn/nrf5-sdk/#_4","text":"\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01","title":"\u66f4\u591a\u793a\u4f8b"},{"location":"cn/nrf5-sdk/#_5","text":"Nordic nRF5 SDK Nordic \u6587\u6863\u5e93 makerdiary/nrf52832-mdk GNU Arm Embedded Toolchain","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/nrf5-sdk/#_6","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"cn/zephyr/","text":"Zephyr Linux \u57fa\u91d1\u4f1a\u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5e94\u7528\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf \u7b80\u4ecb Zephyr OS \u662f\u4e13\u95e8\u4e3a\u8d44\u6e90\u53d7\u9650\u8bbe\u5907\u6784\u5efa\u3001\u9488\u5bf9\u4f4e\u529f\u8017\u3001\u5c0f\u578b\u5185\u5b58\u5fae\u5904\u7406\u5668\u8bbe\u5907\u800c\u8fdb\u884c\u4f18\u5316\u7684\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5c0f\u578b\u3001\u53ef\u6269\u5c55\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08RTOS\uff09\uff0c\u652f\u6301\u591a\u79cd\u786c\u4ef6\u67b6\u6784\u53ca\u591a\u79cd\u5f00\u53d1\u677f\uff08\u5305\u62ec ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, \u4ee5\u53ca RISC-V\uff09\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u5c0f\u81f3 8kB \u5185\u5b58\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002 Zephyr \u5185\u6838\u76f8\u6bd4\u5176\u4ed6\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5177\u6709\u8bb8\u591a\u4f18\u52bf\uff1a \u5355\u4e00\u5730\u5740\u7a7a\u95f4 \uff1a\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u548c\u5185\u6838\u4ee3\u7801\u90fd\u5728\u5355\u4e2a\u5171\u4eab\u5730\u5740\u7a7a\u95f4\u4e2d\u6267\u884c\u3002 \u9ad8\u5ea6\u53ef\u914d\u7f6e \uff1a\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u53ea\u5305\u542b\u6240\u9700\u7684\u529f\u80fd\uff0c\u5e76\u6307\u5b9a\u5b83\u4eec\u7684\u6570\u91cf\u548c\u5927\u5c0f\u3002 \u7f16\u8bd1\u65f6\u8d44\u6e90\u5b9a\u4e49 \uff1a\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u5b9a\u4e49\u7cfb\u7edf\u8d44\u6e90\uff0c\u4ece\u800c\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002 \u6700\u5c0f\u7684\u9519\u8bef\u68c0\u67e5 \uff1a\u63d0\u4f9b\u6700\u5c11\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u68c0\u67e5\uff0c\u4ee5\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u9009\u7684\u9519\u8bef\u68c0\u67e5\u57fa\u7840\u7ed3\u6784\u6765\u5e2e\u52a9\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u8c03\u8bd5\u3002 \u5e7f\u6cdb\u7684\u670d\u52a1\u5957\u4ef6 \uff1a\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u591a\u79cd\u670d\u52a1\uff0c\u5982\u591a\u7ebf\u7a0b\u670d\u52a1\u3001\u4e2d\u65ad\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u4f20\u9012\u670d\u52a1\u3001\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u3002 \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u8bbf\u95ee Zephyr Project \u5b98\u7f51\u3002 \u5feb\u901f\u5165\u95e8 \u514b\u9686 Zephyr \u6e90\u7801 Zephyr OS \u6e90\u7801\u5df2\u7ecf\u6258\u7ba1\u5728 GitHub \u4e0a\uff0c\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4f7f\u7528\uff1a $ git clone https://github.com/zephyrproject-rtos/zephyr.git \u642d\u5efa\u5f00\u53d1\u73af\u5883 Zephyr \u9879\u76ee\u4f7f\u7528 CMake \u5de5\u5177\u7ba1\u7406\u548c\u7f16\u8bd1\u9879\u76ee\u3002 CMake \u53ef\u4ee5\u7528\u6765\u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 make \u6216 ninja \u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u662f\u6bd4\u8f83\u5e38\u89c4\u7684\u505a\u6cd5\u3002\u4e0b\u9762\u4f1a\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ecb\u7ecd\uff1a Windows macOS Linux Windows \u5728 Windows \u4e0a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Chocolatey \u5305\u7ba1\u7406\u5668\u6765\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff1a \u6309\u7167 \u5b98\u65b9\u6307\u5f15 \u5b89\u88c5 Chocolatey\uff1b \u4ee5\u7ba1\u7406\u5458\u8fd0\u884c\u547d\u4ee4\u884c\u5de5\u5177( cmd.exe )\uff1b \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u5b89\u88c5\u8f6f\u4ef6\u65f6\u53ef\u4ee5\u65e0\u987b\u786e\u8ba4\uff1a $ choco feature enable -n allowGlobalConfirmation \u5b89\u88c5 Cmake\uff1a $ choco install cmake --installargs ADD_CMAKE_TO_PATH=System \u5b89\u88c5\u5176\u4ed6\u5fc5\u8981\u5de5\u5177\uff1a $ choco install git python ninja dtc-msys2 gperf doxygen.install 6. (\u53ef\u9009) \u5b89\u88c5 pdf \u6587\u6863\u751f\u6210\u5de5\u5177\uff1a $ choco install strawberryperl miktex rsvg-convert \u5173\u95ed cmd.exe\uff0c\u4ee5\u666e\u901a\u7528\u6237\u91cd\u65b0\u6253\u5f00\uff0c\u5e76\u5b89\u88c5 Python \u6a21\u5757\uff1a $ cd ./zephyr $ pip3 install -r scripts/requirements.txt \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU Arm Embedded Toolchain \uff0c\u53ef\u4ee5\u6309\u7167\u5230 c:\\gnuarmemb \u3002 \u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a $ set ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb $ set GNUARMEMB_TOOLCHAIN_PATH = c: \\g nuarmemb macOS \u5728 macOS\uff0c\u4f7f\u7528 Homebrew \u5305\u7ba1\u7406\u5668\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u5de5\u5177\uff0c\u6309\u7167\u5b98\u65b9\u6700\u65b0\u6307\u5f15\u5373\u53ef\u5b8c\u6210\u5b89\u88c5\u3002 Homebrew \u6210\u529f\u5b89\u88c5\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a $ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf $ cd ~/zephyr # or to the folder where you cloned the zephyr repo $ pip3 install --user -r scripts/requirements.txt \u7136\u540e\uff0c\u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU Arm Embedded Toolchain \uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a # \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb Linux \u5bf9\u4e8e Linux \u7cfb\u7edf\uff0c\u8fd9\u91cc Ubuntu 16.04 \u4e3a\u4f8b\uff0c\u5148\u66f4\u65b0\u7cfb\u7edf\uff1a $ sudo apt-get update $ sudo apt-get upgrade \u7136\u540e\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a $ sudo apt-get install --no-install-recommends git cmake ninja-build gperf \\ ccache doxygen dfu-util device-tree-compiler \\ python3-ply python3-pip python3-setuptools python3-wheel xz-utils file \\ make gcc-multilib autoconf automake libtool librsvg2-bin \\ texlive-latex-base texlive-latex-extra latexmk texlive-fonts-recommended \u5b89\u88c5 Zephyr \u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff1a $ cd ~/zephyr # or to your directory where zephyr is cloned $ pip3 install --user -r scripts/requirements.txt \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU Arm Embedded Toolchain \uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a # \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb \u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b \u5b8c\u6210\u4e0a\u8ff0\u51c6\u5907\u5de5\u4f5c\u4fbf\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u8fd9\u91cc\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4ee5 hello_world \u4e3a\u4f8b\uff1a \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a $ cd zephyr git clone location # On Linux/macOS $ source zephyr-env.sh # On Windows $ source zephyr-env.cmd \u5728 hello_world \u76ee\u5f55\u521b\u5efa build \u76ee\u5f55\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u5e76\u5b8c\u6210\u4e0b\u8f7d\uff1a $ cd nrf52832-mdk/examples/zephyr/hello_world/ $ mkdir build cd build build$ cmake -GNinja -DBOARD = nrf52832_mdk .. build$ ninja build$ ninja flash \u6253\u5f00\u4e32\u53e3\u5de5\u5177\uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\u8f93\u51fa\uff1a ***** Booting Zephyr OS zephyr-v1.13.0-1166-g8b20f9dba ***** Hello World! nrf52832_mdk \u5b8c\u6210\u4ee5\u4e0a\u793a\u4f8b\u540e\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5 nrf52832-mdk/examples/zephyr/ \u6216\u8005 zephyr/samples/ \u76ee\u5f55\u4e0b\u7684\u5176\u4ed6\u4f8b\u5b50\u3002 \u66f4\u591a\u793a\u4f8b \u968f\u7740 Zephyr \u529f\u80fd\u4e0d\u65ad\u4e30\u5bcc\uff0c\u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u5e94\u7528\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\uff0c\u656c\u8bf7\u5173\u6ce8\uff01 \u53c2\u8003\u8d44\u6e90 Zephyr Project \u5b98\u7f51 Zephyr Project \u6587\u6863\u4e2d\u5fc3 zephyrproject-rtos/zephyr \u4ed3\u5e93 \u95ee\u9898\u53cd\u9988 \u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"Zephyr"},{"location":"cn/zephyr/#zephyr-linux","text":"","title":"Zephyr Linux \u57fa\u91d1\u4f1a\u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5e94\u7528\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf"},{"location":"cn/zephyr/#_1","text":"Zephyr OS \u662f\u4e13\u95e8\u4e3a\u8d44\u6e90\u53d7\u9650\u8bbe\u5907\u6784\u5efa\u3001\u9488\u5bf9\u4f4e\u529f\u8017\u3001\u5c0f\u578b\u5185\u5b58\u5fae\u5904\u7406\u5668\u8bbe\u5907\u800c\u8fdb\u884c\u4f18\u5316\u7684\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5c0f\u578b\u3001\u53ef\u6269\u5c55\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08RTOS\uff09\uff0c\u652f\u6301\u591a\u79cd\u786c\u4ef6\u67b6\u6784\u53ca\u591a\u79cd\u5f00\u53d1\u677f\uff08\u5305\u62ec ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, \u4ee5\u53ca RISC-V\uff09\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u5c0f\u81f3 8kB \u5185\u5b58\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002 Zephyr \u5185\u6838\u76f8\u6bd4\u5176\u4ed6\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5177\u6709\u8bb8\u591a\u4f18\u52bf\uff1a \u5355\u4e00\u5730\u5740\u7a7a\u95f4 \uff1a\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u548c\u5185\u6838\u4ee3\u7801\u90fd\u5728\u5355\u4e2a\u5171\u4eab\u5730\u5740\u7a7a\u95f4\u4e2d\u6267\u884c\u3002 \u9ad8\u5ea6\u53ef\u914d\u7f6e \uff1a\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u53ea\u5305\u542b\u6240\u9700\u7684\u529f\u80fd\uff0c\u5e76\u6307\u5b9a\u5b83\u4eec\u7684\u6570\u91cf\u548c\u5927\u5c0f\u3002 \u7f16\u8bd1\u65f6\u8d44\u6e90\u5b9a\u4e49 \uff1a\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u5b9a\u4e49\u7cfb\u7edf\u8d44\u6e90\uff0c\u4ece\u800c\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002 \u6700\u5c0f\u7684\u9519\u8bef\u68c0\u67e5 \uff1a\u63d0\u4f9b\u6700\u5c11\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u68c0\u67e5\uff0c\u4ee5\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u9009\u7684\u9519\u8bef\u68c0\u67e5\u57fa\u7840\u7ed3\u6784\u6765\u5e2e\u52a9\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u8c03\u8bd5\u3002 \u5e7f\u6cdb\u7684\u670d\u52a1\u5957\u4ef6 \uff1a\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u591a\u79cd\u670d\u52a1\uff0c\u5982\u591a\u7ebf\u7a0b\u670d\u52a1\u3001\u4e2d\u65ad\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u4f20\u9012\u670d\u52a1\u3001\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u3002 \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u8bbf\u95ee Zephyr Project \u5b98\u7f51\u3002","title":"\u7b80\u4ecb"},{"location":"cn/zephyr/#_2","text":"","title":"\u5feb\u901f\u5165\u95e8"},{"location":"cn/zephyr/#zephyr","text":"Zephyr OS \u6e90\u7801\u5df2\u7ecf\u6258\u7ba1\u5728 GitHub \u4e0a\uff0c\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4f7f\u7528\uff1a $ git clone https://github.com/zephyrproject-rtos/zephyr.git","title":"\u514b\u9686 Zephyr \u6e90\u7801"},{"location":"cn/zephyr/#_3","text":"Zephyr \u9879\u76ee\u4f7f\u7528 CMake \u5de5\u5177\u7ba1\u7406\u548c\u7f16\u8bd1\u9879\u76ee\u3002 CMake \u53ef\u4ee5\u7528\u6765\u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 make \u6216 ninja \u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u662f\u6bd4\u8f83\u5e38\u89c4\u7684\u505a\u6cd5\u3002\u4e0b\u9762\u4f1a\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ecb\u7ecd\uff1a Windows macOS Linux","title":"\u642d\u5efa\u5f00\u53d1\u73af\u5883"},{"location":"cn/zephyr/#windows","text":"\u5728 Windows \u4e0a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 Chocolatey \u5305\u7ba1\u7406\u5668\u6765\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff1a \u6309\u7167 \u5b98\u65b9\u6307\u5f15 \u5b89\u88c5 Chocolatey\uff1b \u4ee5\u7ba1\u7406\u5458\u8fd0\u884c\u547d\u4ee4\u884c\u5de5\u5177( cmd.exe )\uff1b \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u5b89\u88c5\u8f6f\u4ef6\u65f6\u53ef\u4ee5\u65e0\u987b\u786e\u8ba4\uff1a $ choco feature enable -n allowGlobalConfirmation \u5b89\u88c5 Cmake\uff1a $ choco install cmake --installargs ADD_CMAKE_TO_PATH=System \u5b89\u88c5\u5176\u4ed6\u5fc5\u8981\u5de5\u5177\uff1a $ choco install git python ninja dtc-msys2 gperf doxygen.install 6. (\u53ef\u9009) \u5b89\u88c5 pdf \u6587\u6863\u751f\u6210\u5de5\u5177\uff1a $ choco install strawberryperl miktex rsvg-convert \u5173\u95ed cmd.exe\uff0c\u4ee5\u666e\u901a\u7528\u6237\u91cd\u65b0\u6253\u5f00\uff0c\u5e76\u5b89\u88c5 Python \u6a21\u5757\uff1a $ cd ./zephyr $ pip3 install -r scripts/requirements.txt \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU Arm Embedded Toolchain \uff0c\u53ef\u4ee5\u6309\u7167\u5230 c:\\gnuarmemb \u3002 \u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a $ set ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb $ set GNUARMEMB_TOOLCHAIN_PATH = c: \\g nuarmemb","title":"Windows"},{"location":"cn/zephyr/#macos","text":"\u5728 macOS\uff0c\u4f7f\u7528 Homebrew \u5305\u7ba1\u7406\u5668\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u5de5\u5177\uff0c\u6309\u7167\u5b98\u65b9\u6700\u65b0\u6307\u5f15\u5373\u53ef\u5b8c\u6210\u5b89\u88c5\u3002 Homebrew \u6210\u529f\u5b89\u88c5\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a $ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf $ cd ~/zephyr # or to the folder where you cloned the zephyr repo $ pip3 install --user -r scripts/requirements.txt \u7136\u540e\uff0c\u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU Arm Embedded Toolchain \uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a # \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb","title":"macOS"},{"location":"cn/zephyr/#linux","text":"\u5bf9\u4e8e Linux \u7cfb\u7edf\uff0c\u8fd9\u91cc Ubuntu 16.04 \u4e3a\u4f8b\uff0c\u5148\u66f4\u65b0\u7cfb\u7edf\uff1a $ sudo apt-get update $ sudo apt-get upgrade \u7136\u540e\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a $ sudo apt-get install --no-install-recommends git cmake ninja-build gperf \\ ccache doxygen dfu-util device-tree-compiler \\ python3-ply python3-pip python3-setuptools python3-wheel xz-utils file \\ make gcc-multilib autoconf automake libtool librsvg2-bin \\ texlive-latex-base texlive-latex-extra latexmk texlive-fonts-recommended \u5b89\u88c5 Zephyr \u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff1a $ cd ~/zephyr # or to your directory where zephyr is cloned $ pip3 install --user -r scripts/requirements.txt \u4e0b\u8f7d\u5e76\u5b89\u88c5 GNU Arm Embedded Toolchain \uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a # \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb","title":"Linux"},{"location":"cn/zephyr/#_4","text":"\u5b8c\u6210\u4e0a\u8ff0\u51c6\u5907\u5de5\u4f5c\u4fbf\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u8fd9\u91cc\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4ee5 hello_world \u4e3a\u4f8b\uff1a \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a $ cd zephyr git clone location # On Linux/macOS $ source zephyr-env.sh # On Windows $ source zephyr-env.cmd \u5728 hello_world \u76ee\u5f55\u521b\u5efa build \u76ee\u5f55\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u5e76\u5b8c\u6210\u4e0b\u8f7d\uff1a $ cd nrf52832-mdk/examples/zephyr/hello_world/ $ mkdir build cd build build$ cmake -GNinja -DBOARD = nrf52832_mdk .. build$ ninja build$ ninja flash \u6253\u5f00\u4e32\u53e3\u5de5\u5177\uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\u8f93\u51fa\uff1a ***** Booting Zephyr OS zephyr-v1.13.0-1166-g8b20f9dba ***** Hello World! nrf52832_mdk \u5b8c\u6210\u4ee5\u4e0a\u793a\u4f8b\u540e\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5 nrf52832-mdk/examples/zephyr/ \u6216\u8005 zephyr/samples/ \u76ee\u5f55\u4e0b\u7684\u5176\u4ed6\u4f8b\u5b50\u3002","title":"\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b"},{"location":"cn/zephyr/#_5","text":"\u968f\u7740 Zephyr \u529f\u80fd\u4e0d\u65ad\u4e30\u5bcc\uff0c\u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u5e94\u7528\u793a\u4f8b\u5230 nrf52832-mdk \u4ed3\u5e93\uff0c\u656c\u8bf7\u5173\u6ce8\uff01","title":"\u66f4\u591a\u793a\u4f8b"},{"location":"cn/zephyr/#_6","text":"Zephyr Project \u5b98\u7f51 Zephyr Project \u6587\u6863\u4e2d\u5fc3 zephyrproject-rtos/zephyr \u4ed3\u5e93","title":"\u53c2\u8003\u8d44\u6e90"},{"location":"cn/zephyr/#_7","text":"\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 GitHub Issue \u53cd\u9988\u3002 \u521b\u5efa Issue","title":"\u95ee\u9898\u53cd\u9988"},{"location":"daplink/","text":"Arm Mbed DAPLink An open-source software project that enables programming and debugging application running on Arm Cortex CPUs. Introduction Arm Mbed DAPLink is an open-source software project that enables programming and debugging application software on running on Arm Cortex CPUs. DAPLink enables developers with drag-and-drop programming, a serial port and CMSIS-DAP based debugging. More features are planned and will show up gradually over time. The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy! For more information, please visit Arm Mbed DAPLink page . Distinguishing features DAPLink enables developers with: MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID - CMSIS-DAP compliant debug channel WEBUSB HID - CMSIS-DAP compliant debug channel More features are planned and will show up gradually over time. The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy! Block diagram Commonly referred to as interface firmware, DAPLink runs on a secondary MCU that is attached to the SWD or JTAG port of the application MCU. This configuration is found on nearly all development boards. It creates a bridge between your development computer and the CPU debug access port. How to update DAPLink for nRF5832-MDK? You can update DAPLink interface firmware by performing the following steps: While holding the board's RESET button, connect it to your computer. The device mounts in its bootloader mode. The drive name should be CRP DISABLD . Remove firmware.bin from this device's root directory. Download the latest DAPLink firmware . You can find it in the directory nrf52832-mdk/firmware/daplink with the name lpc11u35_nrf52832_mdk_if_crc_xxxx.bin . Copy the new interface firmware to the drive: Windows - Drag and drop the .bin file downloaded before into this directory. macOS - Run the following scripts: $ sudo mount -u -w -o sync /Volumes/CRP DISABLD $ cp -X path to interface firmware file /Volumes/CRP DISABLD/ Linux - Run the following scripts: $ cp path to interface firmware file CRP DISABLD sync When the file copy operation completes, unplug and replug the board into your computer normally (without holding down the RESET button). Your device now has the new firmware installed and mounts a drive named DAPLINK . Check the DETAILS.TXT file in DAPLINK to verify the Interface Version . How to build DAPLink? This tutorial will show you how to create a release build of DAPLink. Set up prerequisites Install the necessary tools listed below. Skip any step where a compatible tool already exists. Install Python 2, 2.7.9 or above . Add to PATH. Install Git . Add to PATH. Install Keil MDK-ARM , preferably version 5. Set environment variable \"UV4\" to the absolute path of the UV4 executable if you don't install to the default location. Note that \"UV4\" is what's used for both MDK versions 4 and 5. Install virtualenv in your global Python installation eg: pip install virtualenv Get the sources and create a virtual environment $ git clone https://github.com/ARMmbed/DAPLink $ cd DAPLink $ pip install virtualenv $ virtualenv venv Update tools and generate project files Note This should be done every time you pull new changes. $ ./venv/Scripts/activate $ pip install -r requirements.txt $ progen generate -t uvision $ ./venv/Scripts/deactivate Compile your project Change to the projectfiles/uvision/ your-project directory, and open your project using Keil MDK-ARM. Click the build icon to build your project. That's it. Reference Arm Mbed DAPLink Repo Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"DAPLink"},{"location":"daplink/#arm-mbed-daplinkan-open-source-software-project-that-enables-programming-and-debugging-application-running-on-arm-cortex-cpus","text":"","title":"Arm Mbed DAPLinkAn open-source software project that enables programming and debugging application running on Arm Cortex CPUs."},{"location":"daplink/#introduction","text":"Arm Mbed DAPLink is an open-source software project that enables programming and debugging application software on running on Arm Cortex CPUs. DAPLink enables developers with drag-and-drop programming, a serial port and CMSIS-DAP based debugging. More features are planned and will show up gradually over time. The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy! For more information, please visit Arm Mbed DAPLink page .","title":"Introduction"},{"location":"daplink/#distinguishing-features","text":"DAPLink enables developers with: MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID - CMSIS-DAP compliant debug channel WEBUSB HID - CMSIS-DAP compliant debug channel More features are planned and will show up gradually over time. The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy!","title":"Distinguishing features"},{"location":"daplink/#block-diagram","text":"Commonly referred to as interface firmware, DAPLink runs on a secondary MCU that is attached to the SWD or JTAG port of the application MCU. This configuration is found on nearly all development boards. It creates a bridge between your development computer and the CPU debug access port.","title":"Block diagram"},{"location":"daplink/#how-to-update-daplink-for-nrf5832-mdk","text":"You can update DAPLink interface firmware by performing the following steps: While holding the board's RESET button, connect it to your computer. The device mounts in its bootloader mode. The drive name should be CRP DISABLD . Remove firmware.bin from this device's root directory. Download the latest DAPLink firmware . You can find it in the directory nrf52832-mdk/firmware/daplink with the name lpc11u35_nrf52832_mdk_if_crc_xxxx.bin . Copy the new interface firmware to the drive: Windows - Drag and drop the .bin file downloaded before into this directory. macOS - Run the following scripts: $ sudo mount -u -w -o sync /Volumes/CRP DISABLD $ cp -X path to interface firmware file /Volumes/CRP DISABLD/ Linux - Run the following scripts: $ cp path to interface firmware file CRP DISABLD sync When the file copy operation completes, unplug and replug the board into your computer normally (without holding down the RESET button). Your device now has the new firmware installed and mounts a drive named DAPLINK . Check the DETAILS.TXT file in DAPLINK to verify the Interface Version .","title":"How to update DAPLink for nRF5832-MDK?"},{"location":"daplink/#how-to-build-daplink","text":"This tutorial will show you how to create a release build of DAPLink.","title":"How to build DAPLink?"},{"location":"daplink/#set-up-prerequisites","text":"Install the necessary tools listed below. Skip any step where a compatible tool already exists. Install Python 2, 2.7.9 or above . Add to PATH. Install Git . Add to PATH. Install Keil MDK-ARM , preferably version 5. Set environment variable \"UV4\" to the absolute path of the UV4 executable if you don't install to the default location. Note that \"UV4\" is what's used for both MDK versions 4 and 5. Install virtualenv in your global Python installation eg: pip install virtualenv","title":"Set up prerequisites"},{"location":"daplink/#get-the-sources-and-create-a-virtual-environment","text":"$ git clone https://github.com/ARMmbed/DAPLink $ cd DAPLink $ pip install virtualenv $ virtualenv venv","title":"Get the sources and create a virtual environment"},{"location":"daplink/#update-tools-and-generate-project-files","text":"Note This should be done every time you pull new changes. $ ./venv/Scripts/activate $ pip install -r requirements.txt $ progen generate -t uvision $ ./venv/Scripts/deactivate","title":"Update tools and generate project files"},{"location":"daplink/#compile-your-project","text":"Change to the projectfiles/uvision/ your-project directory, and open your project using Keil MDK-ARM. Click the build icon to build your project. That's it.","title":"Compile your project"},{"location":"daplink/#reference","text":"Arm Mbed DAPLink Repo","title":"Reference"},{"location":"daplink/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"espruino/","text":"Espruino A JavaScript interpreter for microcontrollers. It is designed for devices with as little as 128kB Flash and 8kB RAM. Introduction Espruino is a JavaScript interpreter for microcontrollers. It is designed for devices with as little as 128kB Flash and 8kB RAM. Unlike other boards that run JavaScript, Espruino fits everything it needs into single chip. This makes it affordable, reliable, and power efficient - allowing it to run for years on a battery. Espruino plugs in to your computer by USB and appears as a serial device. No drivers, and no special software. Just run a terminal application and start writing code right away! Espruino comes with its own IDE which installs in seconds and provides a modern Syntax Highlighted editor with code completion. It even automatically loads any modules you need from the internet. The optional graphical editor makes it quick and easy to create simple devices, even if you've never programmed before. For more information, please visit Espruino Official site . Getting Started This section will show you how to getting started with Espruino using the nRF52832-MDK board. The instructions are provided for macOS. The steps should be similar for other platforms. Ready? Let's start! Flashing Espruino Before we begin coding, we need to program the board with the Espruino firmware. You can get the latest Espruino firmware with the name espruino_x.x_nrf52832_mdk.hex in the directory ./nrf52832-mdk/firmware/espruino/ . Connect the nRF52832-MDK to one of your PC's USB host ports. Then drag and drop the hex file into the DAPLINK removable drive. When programming is completed, the unit will be re-detected by the computer. Espruino will run after pressing the RESET button. Installing Espruino Web IDE We recommend that you use the Chrome Web App. It has a bunch of extra features, including graphical editor. You can do so by performing the following steps: Install the Chrome Web Browser if you don't have one. Click here to get the Espruino Web IDE and click +FREE in the top right to install it. Run Espruino Web IDE from Chrome's home screen (or the App Launcher) Connecting your board Now you can connect your board with the Espruino Web IDE. Click the Connect/Disconnect icon in the top left. Choose Web Bluetooth if your PC has Bluetooth low energy supported, or choose serial port connection(For example, /dev/tty.usbmodem1412 ): For Web Bluetooth connection, you should pair the device next: After that, it will show the board is connected: Writing Running your code Try typing the following in the left-hand side of the Web IDE, and press Enter after it: 1 +1 digitalWrite ( LED1,1 ) digitalWrite ( LED1,0 ) You can also write your code in the right-hand side of the Web IDE. Will use the blinky example here to keep it simple. var on = false ; setInterval ( function () { on = ! on ; LED1 . write ( on ); }, 500 ); Click the Upload icon to run the example on your board. Observe that the GREEN LED is blinking. That's it. Now you've got an idea of how to use Espruino. How to update Espruino firmware Over time, more features will be added to the Espruino firmware. You may want to update the latest firmware. This section will show how to update the latest firmware by the following options: Drag-n-drop Programming Using Web Bluetooth Secure DFU Drag-n-drop Programming The latest firmware is located in the directory firmware/espruino/ of the repository nrf52832-mdk . For example, espruino_1v96.3727_nrf52832_mdk.hex . Connect the nRF52832-MDK to one of your PC's USB host ports. Then drag and drop the hex file into the DAPLINK removable drive. When programming is completed, the unit will be re-detected by the computer. Espruino will run after pressing the RESET button. Using Web Bluetooth Secure DFU The released firmwares support Bluetooth Secure DFU feature. If your PC has Bluetooth low energy supported, you can update the firmware by performing the following steps: Start Chrome Web Browser, go to the page: Web Bluetooth Secure DFU . Wire P18 to 3V3 , and the power up your board. Observe that the BLUE and RED LEDs are on. Remove the wire, observe that the BLUE is on. It shows that the board is at DFU mode. Choose the firmware package or drag it to the page. The latest firmware package is located in nrf52832-mdk/firmware/espruino/ with the name espruino_x.x_nrf52832_mdk.zip . Select the device with the name DfuTarg and pair it. Observe that the RED is on, showing that it's uploading. Waiting update complete. How to build Espruino This section will show you how to build your own Espruino firmware. Setting up the development environment The GNU Arm Embedded toolchains is needed to build Espruino. Download and install the GNU Arm Embedded toolchains. Then make sure to add the path to your toolchain to your OS PATH environment variable: path to install directory /gcc-arm-none-eabi-6-2017-q1-update/bin Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal: $ arm-none-eabi-gcc --version Note The latest version of GNU Arm Embedded toolchain maybe not work fine, but you can just have a try. Adding support for nRF52832-MDK Clone the official repository from Espruino : $ git clone https://github.com/espruino/Espruino.git To add support for nRF52832-MDK, you must create a support file with the name NRF52832_MDK.py . This file must be located in a directory in the ./Espruino/boards/ path. import pinutils ; info = { name : nRF52832-MDK , link : [ https://wiki.makerdiary.com/nrf52832-mdk/ ], # This is the nRF52832-MDK default_console : EV_SERIAL1 , default_console_tx : D20 , default_console_rx : D19 , default_console_baudrate : 9600 , variables : 2250 , # How many variables are allocated for Espruino to use. RAM will be overflowed if this number is too high and code won t compile. bootloader : 1 , binary_name : espruino_%v_nrf52832_mdk.hex , build : { optimizeflags : -Os , libraries : [ BLUETOOTH , NET , GRAPHICS , CRYPTO , NFC , NEOPIXEL ], makefile : [ DEFINES+=-DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1 , # Looks like proper production nRF52s had this issue DEFINES+=-DCONFIG_GPIO_AS_PINRESET , # Allow the reset pin to work DEFINES+=-DBLUETOOTH_NAME_PREFIX= \\ nRF52832-MDK \\ , DFU_PRIVATE_KEY=targets/nrf5x_dfu/dfu_private_key.pem , DFU_SETTINGS=--application-version 0xff --hw-version 52 --sd-req 0x8C ] } }; chip = { part : NRF52832 , family : NRF52 , package : QFN48 , ram : 64 , flash : 512 , speed : 64 , usart : 1 , spi : 3 , i2c : 2 , adc : 1 , dac : 0 , saved_code : { address : (( 118 - 10 ) * 4096 ), # Bootloader takes pages 120-127, FS takes 118-119 page_size : 4096 , pages : 10 , flash_available : 512 - (( 31 + 8 + 2 + 10 ) * 4 ) # Softdevice uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb. }, }; devices = { BTN1 : { pin : D18 , pinstate : IN_PULLDOWN }, # Pin negated in software LED1 : { pin : D22 , inverted : False }, # Pin negated in software LED2 : { pin : D23 , inverted : False }, # Pin negated in software LED3 : { pin : D24 , inverted : False }, # Pin negated in software RX_PIN_NUMBER : { pin : D19 }, TX_PIN_NUMBER : { pin : D20 }, CTS_PIN_NUMBER : { pin : D7 }, RTS_PIN_NUMBER : { pin : D5 }, # Pin D22 is used for clock when driving neopixels - as not specifying a pin seems to break things }; # left-right, or top-bottom order board = { left : [ VIN , 5V , GND , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PD16 , PD17 , PD18 ], right : [ 3V3 , GND , RST , CLK , DIO , TDO , TDI , TXD , RXD , PD3 , PD2 , PD31 , PD30 , PD29 , PD28 , PD27 , PD26 , PD25 ], }; board [ _css ] = ; def get_pins (): pins = pinutils . generate_pins ( 0 , 31 ) # 32 General Purpose I/O Pins. pinutils . findpin ( pins , PD0 , True )[ functions ][ XL1 ] = 0 ; pinutils . findpin ( pins , PD1 , True )[ functions ][ XL2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD6 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD7 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD8 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD9 , True )[ functions ][ NFC1 ] = 0 ; pinutils . findpin ( pins , PD10 , True )[ functions ][ NFC2 ] = 0 ; pinutils . findpin ( pins , PD13 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD14 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD15 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD16 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD17 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD18 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD19 , True )[ functions ][ RXD ] = 0 ; pinutils . findpin ( pins , PD20 , True )[ functions ][ TXD ] = 0 ; pinutils . findpin ( pins , PD22 , True )[ functions ][ LED_1 ] = 0 ; pinutils . findpin ( pins , PD23 , True )[ functions ][ LED_2 ] = 0 ; pinutils . findpin ( pins , PD24 , True )[ functions ][ LED_3 ] = 0 ; pinutils . findpin ( pins , PD2 , True )[ functions ][ ADC1_IN0 ] = 0 ; pinutils . findpin ( pins , PD3 , True )[ functions ][ ADC1_IN1 ] = 0 ; pinutils . findpin ( pins , PD4 , True )[ functions ][ ADC1_IN2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ ADC1_IN3 ] = 0 ; pinutils . findpin ( pins , PD28 , True )[ functions ][ ADC1_IN4 ] = 0 ; pinutils . findpin ( pins , PD29 , True )[ functions ][ ADC1_IN5 ] = 0 ; pinutils . findpin ( pins , PD30 , True )[ functions ][ ADC1_IN6 ] = 0 ; pinutils . findpin ( pins , PD31 , True )[ functions ][ ADC1_IN7 ] = 0 ; # everything is non-5v tolerant for pin in pins : pin [ functions ][ 3.3 ] = 0 ; #The boot/reset button will function as a reset button in normal operation. Pin reset on PD21 needs to be enabled on the nRF52832 device for this to work. return pins As an option, you can just clone my repository forked from the official. I have added support for nRF52832-MDK. $ git clone https://github.com/makerdiary/Espruino.git Building Espruino firmware Now you can try to build the Espruino firmware using the following options: Open terminal and change directory to: $ cd Espruino git clone location /Espruino Build everything, you will get a .hex file: $ make clean BOARD = NRF52832_MDK RELEASE = 1 make Build DFU firmware package, you will get a .zip file: $ make clean DFU_UPDATE_BUILD = 1 BOARD = NRF52832_MDK RELEASE = 1 make Now you can program your board by following the section: How to update Espruino firmware . Reference Espruino Official site Espruino API Reference Espruino Modules Espruino Official Repo Espruino forked by makerdiary Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Espruino"},{"location":"espruino/#espruinoa-javascript-interpreter-for-microcontrollers-it-is-designed-for-devices-with-as-little-as-128kb-flash-and-8kb-ram","text":"","title":"EspruinoA JavaScript interpreter for microcontrollers. It is designed for devices with as little as 128kB Flash and 8kB RAM."},{"location":"espruino/#introduction","text":"Espruino is a JavaScript interpreter for microcontrollers. It is designed for devices with as little as 128kB Flash and 8kB RAM. Unlike other boards that run JavaScript, Espruino fits everything it needs into single chip. This makes it affordable, reliable, and power efficient - allowing it to run for years on a battery. Espruino plugs in to your computer by USB and appears as a serial device. No drivers, and no special software. Just run a terminal application and start writing code right away! Espruino comes with its own IDE which installs in seconds and provides a modern Syntax Highlighted editor with code completion. It even automatically loads any modules you need from the internet. The optional graphical editor makes it quick and easy to create simple devices, even if you've never programmed before. For more information, please visit Espruino Official site .","title":"Introduction"},{"location":"espruino/#getting-started","text":"This section will show you how to getting started with Espruino using the nRF52832-MDK board. The instructions are provided for macOS. The steps should be similar for other platforms. Ready? Let's start!","title":"Getting Started"},{"location":"espruino/#flashing-espruino","text":"Before we begin coding, we need to program the board with the Espruino firmware. You can get the latest Espruino firmware with the name espruino_x.x_nrf52832_mdk.hex in the directory ./nrf52832-mdk/firmware/espruino/ . Connect the nRF52832-MDK to one of your PC's USB host ports. Then drag and drop the hex file into the DAPLINK removable drive. When programming is completed, the unit will be re-detected by the computer. Espruino will run after pressing the RESET button.","title":"Flashing Espruino"},{"location":"espruino/#installing-espruino-web-ide","text":"We recommend that you use the Chrome Web App. It has a bunch of extra features, including graphical editor. You can do so by performing the following steps: Install the Chrome Web Browser if you don't have one. Click here to get the Espruino Web IDE and click +FREE in the top right to install it. Run Espruino Web IDE from Chrome's home screen (or the App Launcher)","title":"Installing Espruino Web IDE"},{"location":"espruino/#connecting-your-board","text":"Now you can connect your board with the Espruino Web IDE. Click the Connect/Disconnect icon in the top left. Choose Web Bluetooth if your PC has Bluetooth low energy supported, or choose serial port connection(For example, /dev/tty.usbmodem1412 ): For Web Bluetooth connection, you should pair the device next: After that, it will show the board is connected:","title":"Connecting your board"},{"location":"espruino/#writing-running-your-code","text":"Try typing the following in the left-hand side of the Web IDE, and press Enter after it: 1 +1 digitalWrite ( LED1,1 ) digitalWrite ( LED1,0 ) You can also write your code in the right-hand side of the Web IDE. Will use the blinky example here to keep it simple. var on = false ; setInterval ( function () { on = ! on ; LED1 . write ( on ); }, 500 ); Click the Upload icon to run the example on your board. Observe that the GREEN LED is blinking. That's it. Now you've got an idea of how to use Espruino.","title":"Writing &amp; Running your code"},{"location":"espruino/#how-to-update-espruino-firmware","text":"Over time, more features will be added to the Espruino firmware. You may want to update the latest firmware. This section will show how to update the latest firmware by the following options: Drag-n-drop Programming Using Web Bluetooth Secure DFU","title":"How to update Espruino firmware"},{"location":"espruino/#drag-n-drop-programming","text":"The latest firmware is located in the directory firmware/espruino/ of the repository nrf52832-mdk . For example, espruino_1v96.3727_nrf52832_mdk.hex . Connect the nRF52832-MDK to one of your PC's USB host ports. Then drag and drop the hex file into the DAPLINK removable drive. When programming is completed, the unit will be re-detected by the computer. Espruino will run after pressing the RESET button.","title":"Drag-n-drop Programming"},{"location":"espruino/#using-web-bluetooth-secure-dfu","text":"The released firmwares support Bluetooth Secure DFU feature. If your PC has Bluetooth low energy supported, you can update the firmware by performing the following steps: Start Chrome Web Browser, go to the page: Web Bluetooth Secure DFU . Wire P18 to 3V3 , and the power up your board. Observe that the BLUE and RED LEDs are on. Remove the wire, observe that the BLUE is on. It shows that the board is at DFU mode. Choose the firmware package or drag it to the page. The latest firmware package is located in nrf52832-mdk/firmware/espruino/ with the name espruino_x.x_nrf52832_mdk.zip . Select the device with the name DfuTarg and pair it. Observe that the RED is on, showing that it's uploading. Waiting update complete.","title":"Using Web Bluetooth Secure DFU"},{"location":"espruino/#how-to-build-espruino","text":"This section will show you how to build your own Espruino firmware.","title":"How to build Espruino"},{"location":"espruino/#setting-up-the-development-environment","text":"The GNU Arm Embedded toolchains is needed to build Espruino. Download and install the GNU Arm Embedded toolchains. Then make sure to add the path to your toolchain to your OS PATH environment variable: path to install directory /gcc-arm-none-eabi-6-2017-q1-update/bin Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal: $ arm-none-eabi-gcc --version Note The latest version of GNU Arm Embedded toolchain maybe not work fine, but you can just have a try.","title":"Setting up the development environment"},{"location":"espruino/#adding-support-for-nrf52832-mdk","text":"Clone the official repository from Espruino : $ git clone https://github.com/espruino/Espruino.git To add support for nRF52832-MDK, you must create a support file with the name NRF52832_MDK.py . This file must be located in a directory in the ./Espruino/boards/ path. import pinutils ; info = { name : nRF52832-MDK , link : [ https://wiki.makerdiary.com/nrf52832-mdk/ ], # This is the nRF52832-MDK default_console : EV_SERIAL1 , default_console_tx : D20 , default_console_rx : D19 , default_console_baudrate : 9600 , variables : 2250 , # How many variables are allocated for Espruino to use. RAM will be overflowed if this number is too high and code won t compile. bootloader : 1 , binary_name : espruino_%v_nrf52832_mdk.hex , build : { optimizeflags : -Os , libraries : [ BLUETOOTH , NET , GRAPHICS , CRYPTO , NFC , NEOPIXEL ], makefile : [ DEFINES+=-DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1 , # Looks like proper production nRF52s had this issue DEFINES+=-DCONFIG_GPIO_AS_PINRESET , # Allow the reset pin to work DEFINES+=-DBLUETOOTH_NAME_PREFIX= \\ nRF52832-MDK \\ , DFU_PRIVATE_KEY=targets/nrf5x_dfu/dfu_private_key.pem , DFU_SETTINGS=--application-version 0xff --hw-version 52 --sd-req 0x8C ] } }; chip = { part : NRF52832 , family : NRF52 , package : QFN48 , ram : 64 , flash : 512 , speed : 64 , usart : 1 , spi : 3 , i2c : 2 , adc : 1 , dac : 0 , saved_code : { address : (( 118 - 10 ) * 4096 ), # Bootloader takes pages 120-127, FS takes 118-119 page_size : 4096 , pages : 10 , flash_available : 512 - (( 31 + 8 + 2 + 10 ) * 4 ) # Softdevice uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb. }, }; devices = { BTN1 : { pin : D18 , pinstate : IN_PULLDOWN }, # Pin negated in software LED1 : { pin : D22 , inverted : False }, # Pin negated in software LED2 : { pin : D23 , inverted : False }, # Pin negated in software LED3 : { pin : D24 , inverted : False }, # Pin negated in software RX_PIN_NUMBER : { pin : D19 }, TX_PIN_NUMBER : { pin : D20 }, CTS_PIN_NUMBER : { pin : D7 }, RTS_PIN_NUMBER : { pin : D5 }, # Pin D22 is used for clock when driving neopixels - as not specifying a pin seems to break things }; # left-right, or top-bottom order board = { left : [ VIN , 5V , GND , PD4 , PD5 , PD6 , PD7 , PD8 , PD9 , PD10 , PD11 , PD12 , PD13 , PD14 , PD15 , PD16 , PD17 , PD18 ], right : [ 3V3 , GND , RST , CLK , DIO , TDO , TDI , TXD , RXD , PD3 , PD2 , PD31 , PD30 , PD29 , PD28 , PD27 , PD26 , PD25 ], }; board [ _css ] = ; def get_pins (): pins = pinutils . generate_pins ( 0 , 31 ) # 32 General Purpose I/O Pins. pinutils . findpin ( pins , PD0 , True )[ functions ][ XL1 ] = 0 ; pinutils . findpin ( pins , PD1 , True )[ functions ][ XL2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD6 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD7 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD8 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD9 , True )[ functions ][ NFC1 ] = 0 ; pinutils . findpin ( pins , PD10 , True )[ functions ][ NFC2 ] = 0 ; pinutils . findpin ( pins , PD13 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD14 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD15 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD16 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD17 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD18 , True )[ functions ][ 3.3 ] = 0 ; pinutils . findpin ( pins , PD19 , True )[ functions ][ RXD ] = 0 ; pinutils . findpin ( pins , PD20 , True )[ functions ][ TXD ] = 0 ; pinutils . findpin ( pins , PD22 , True )[ functions ][ LED_1 ] = 0 ; pinutils . findpin ( pins , PD23 , True )[ functions ][ LED_2 ] = 0 ; pinutils . findpin ( pins , PD24 , True )[ functions ][ LED_3 ] = 0 ; pinutils . findpin ( pins , PD2 , True )[ functions ][ ADC1_IN0 ] = 0 ; pinutils . findpin ( pins , PD3 , True )[ functions ][ ADC1_IN1 ] = 0 ; pinutils . findpin ( pins , PD4 , True )[ functions ][ ADC1_IN2 ] = 0 ; pinutils . findpin ( pins , PD5 , True )[ functions ][ ADC1_IN3 ] = 0 ; pinutils . findpin ( pins , PD28 , True )[ functions ][ ADC1_IN4 ] = 0 ; pinutils . findpin ( pins , PD29 , True )[ functions ][ ADC1_IN5 ] = 0 ; pinutils . findpin ( pins , PD30 , True )[ functions ][ ADC1_IN6 ] = 0 ; pinutils . findpin ( pins , PD31 , True )[ functions ][ ADC1_IN7 ] = 0 ; # everything is non-5v tolerant for pin in pins : pin [ functions ][ 3.3 ] = 0 ; #The boot/reset button will function as a reset button in normal operation. Pin reset on PD21 needs to be enabled on the nRF52832 device for this to work. return pins As an option, you can just clone my repository forked from the official. I have added support for nRF52832-MDK. $ git clone https://github.com/makerdiary/Espruino.git","title":"Adding support for nRF52832-MDK"},{"location":"espruino/#building-espruino-firmware","text":"Now you can try to build the Espruino firmware using the following options: Open terminal and change directory to: $ cd Espruino git clone location /Espruino Build everything, you will get a .hex file: $ make clean BOARD = NRF52832_MDK RELEASE = 1 make Build DFU firmware package, you will get a .zip file: $ make clean DFU_UPDATE_BUILD = 1 BOARD = NRF52832_MDK RELEASE = 1 make Now you can program your board by following the section: How to update Espruino firmware .","title":"Building Espruino firmware"},{"location":"espruino/#reference","text":"Espruino Official site Espruino API Reference Espruino Modules Espruino Official Repo Espruino forked by makerdiary","title":"Reference"},{"location":"espruino/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"getting-started/","text":"Getting started with the nRF52832-MDK Board Congratulations on getting the nRF52832-MDK! On this page we'll show you how to connect and power up your nRF52832-MDK, and what to expect when you do so. This will take about 20 minutes. Connecting the board Note You need a reasonably current Mac/Linux/Windows PC and a mobile phone to perform the following. You can connect the board by performing the following steps: Connect the nRF52832-MDK to one of your PC's USB host ports. This provides power to the board. Observe that two GREEN LEDs are on. One indicates that 3.3V power is good, and another indicates that the application is advertising. Open a file explorer. Confirm that the nRF52832-MDK has appeared as a removable drive named DAPLINK . This allows you to program the onboard chip. You'll do this under \" how to program nRF52832-MDK \" below. Using terminal applications Terminal applications (for example PuTTY or screen ) run on your host PC. They provide a window where your board can print messages. You can connect your board to your computer over USB. This should work out of the box on Linux and macOS, but for Windows earlier than Windows 10, you will probably need to install a serial port driver: Download the Arm Mbed Windows serial port driver . Plug in your board over USB. It mounts as a drive. Close all Explorer windows showing the drive. Run the installer. This may take some time or display a few \"unsigned driver\" warnings. Serial configuration The default setup for the USB serial port is 115200 baud, 8 bits, 1 stop bit, no parity (115200-8-N-1) On Windows There are many terminal applications for Windows, PuTTY is recommended. Start PuTTY and open the used COM port with the following configuration. If there is nothing printed, just press RESET button on the board. On macOS screen should work on macOS. In Terminal, run: $ screen /dev/cu.usbmodem1412 115200 If there is nothing printed, just press RESET button on the board. Tip You can type screen /dev/cu.usb first, and then press tab . The device name will autocomplete. To end a screen session, type Ctrl + A , and then K . At the bottom of the Terminal window, you should see a [y/n] prompt. Type y . On Linux screen should work on Linux. If for some reason it doesn't, you can try one of the following: CoolTerm Minicom Here we will use screen on Ubuntu 16.04 for example. If there is nothing printed, just press RESET button on the board. $ sudo apt-get install screen $ sudo screen /dev/ttyACM0 115200 Using nRF Connect You can also test the application with nRF Connect by performing the following steps: Get the nRF Connect app from App Store or Google Play. Connect to the device from nRF Connect (the device is advertising as nRF52832-MDK ). Observe that BLUE LED is on and GREEN LED is off. This indicates that the connections is established. Observe that the services are shown in the connected device. Write 01 to the Nordic Blinky LED Characteristic (0x1525) and observe that RED LED is turned on. Write 00 to the Nordic Blinky LED Characteristic (0x1525) and observe that RED LED is turned off. How to program nRF52832-MDK You have the following two options to program your nRF52832-MDK: Drag-n-drop Programming Using pyOCD . Get the firmware Drag-n-drop Programming Drag and drop the hex file into the DAPLINK removable drive mentioned above. The file contains firmware which will be automatically programmed onto the nRF52832 SoC. This happens immediately. The explorer window may close when programming starts. When programming is completed, the unit will be re-detected by the computer. The application will run after pressing the RESET button. It's so easy, right? Using pyOCD pyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported. The latest stable version of pyOCD may be done via pip as follows: $ pip install --pre -U pyocd Alternatively, to install the latest development version (master branch), you can do the following: $ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip Note You may run into permissions issues running these commands. You have a few options here: Run with sudo -H to install pyOCD and dependencies globally Specify the --user option to install local to your user Run the command in a virtualenv local to a specific project working set. You can verify that your board is detected by pyOCD by running: $ pyocd-flashtool -l and then flash the board by running: $ pyocd-flashtool -t nrf52 -se your-hex-file.hex Clone the repository Clone the makerdiary/nrf52832-mdk repository or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/makerdiary/nrf52832-mdk.git This repository provides documents and example applications that you can run on your nRF52832-MDK to ensure that everything is set up correctly. Enjoy! Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Getting Started"},{"location":"getting-started/#getting-started-with-the-nrf52832-mdk-board","text":"Congratulations on getting the nRF52832-MDK! On this page we'll show you how to connect and power up your nRF52832-MDK, and what to expect when you do so. This will take about 20 minutes.","title":"Getting started with the nRF52832-MDK Board"},{"location":"getting-started/#connecting-the-board","text":"Note You need a reasonably current Mac/Linux/Windows PC and a mobile phone to perform the following. You can connect the board by performing the following steps: Connect the nRF52832-MDK to one of your PC's USB host ports. This provides power to the board. Observe that two GREEN LEDs are on. One indicates that 3.3V power is good, and another indicates that the application is advertising. Open a file explorer. Confirm that the nRF52832-MDK has appeared as a removable drive named DAPLINK . This allows you to program the onboard chip. You'll do this under \" how to program nRF52832-MDK \" below.","title":"Connecting the board"},{"location":"getting-started/#using-terminal-applications","text":"Terminal applications (for example PuTTY or screen ) run on your host PC. They provide a window where your board can print messages. You can connect your board to your computer over USB. This should work out of the box on Linux and macOS, but for Windows earlier than Windows 10, you will probably need to install a serial port driver: Download the Arm Mbed Windows serial port driver . Plug in your board over USB. It mounts as a drive. Close all Explorer windows showing the drive. Run the installer. This may take some time or display a few \"unsigned driver\" warnings. Serial configuration The default setup for the USB serial port is 115200 baud, 8 bits, 1 stop bit, no parity (115200-8-N-1)","title":"Using terminal applications"},{"location":"getting-started/#on-windows","text":"There are many terminal applications for Windows, PuTTY is recommended. Start PuTTY and open the used COM port with the following configuration. If there is nothing printed, just press RESET button on the board.","title":"On Windows"},{"location":"getting-started/#on-macos","text":"screen should work on macOS. In Terminal, run: $ screen /dev/cu.usbmodem1412 115200 If there is nothing printed, just press RESET button on the board. Tip You can type screen /dev/cu.usb first, and then press tab . The device name will autocomplete. To end a screen session, type Ctrl + A , and then K . At the bottom of the Terminal window, you should see a [y/n] prompt. Type y .","title":"On macOS"},{"location":"getting-started/#on-linux","text":"screen should work on Linux. If for some reason it doesn't, you can try one of the following: CoolTerm Minicom Here we will use screen on Ubuntu 16.04 for example. If there is nothing printed, just press RESET button on the board. $ sudo apt-get install screen $ sudo screen /dev/ttyACM0 115200","title":"On Linux"},{"location":"getting-started/#using-nrf-connect","text":"You can also test the application with nRF Connect by performing the following steps: Get the nRF Connect app from App Store or Google Play. Connect to the device from nRF Connect (the device is advertising as nRF52832-MDK ). Observe that BLUE LED is on and GREEN LED is off. This indicates that the connections is established. Observe that the services are shown in the connected device. Write 01 to the Nordic Blinky LED Characteristic (0x1525) and observe that RED LED is turned on. Write 00 to the Nordic Blinky LED Characteristic (0x1525) and observe that RED LED is turned off.","title":"Using nRF Connect"},{"location":"getting-started/#how-to-program-nrf52832-mdk","text":"You have the following two options to program your nRF52832-MDK: Drag-n-drop Programming Using pyOCD . Get the firmware","title":"How to program nRF52832-MDK"},{"location":"getting-started/#drag-n-drop-programming","text":"Drag and drop the hex file into the DAPLINK removable drive mentioned above. The file contains firmware which will be automatically programmed onto the nRF52832 SoC. This happens immediately. The explorer window may close when programming starts. When programming is completed, the unit will be re-detected by the computer. The application will run after pressing the RESET button. It's so easy, right?","title":"Drag-n-drop Programming"},{"location":"getting-started/#using-pyocd","text":"pyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported. The latest stable version of pyOCD may be done via pip as follows: $ pip install --pre -U pyocd Alternatively, to install the latest development version (master branch), you can do the following: $ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip Note You may run into permissions issues running these commands. You have a few options here: Run with sudo -H to install pyOCD and dependencies globally Specify the --user option to install local to your user Run the command in a virtualenv local to a specific project working set. You can verify that your board is detected by pyOCD by running: $ pyocd-flashtool -l and then flash the board by running: $ pyocd-flashtool -t nrf52 -se your-hex-file.hex","title":"Using pyOCD"},{"location":"getting-started/#clone-the-repository","text":"Clone the makerdiary/nrf52832-mdk repository or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/makerdiary/nrf52832-mdk.git This repository provides documents and example applications that you can run on your nRF52832-MDK to ensure that everything is set up correctly. Enjoy!","title":"Clone the repository"},{"location":"getting-started/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"jerryscript/","text":"JerryScript A Ultra-lightweight JavaScript engine for Internet of Things Introduction JerryScript is a lightweight JavaScript engine for resource-constrained devices such as microcontrollers. It can run on devices with less than 64 KB of RAM and less than 200 KB of flash memory. Key characteristics of JerryScript: Full ECMAScript 5.1 standard compliance 160K binary size when compiled for ARM Thumb-2 Heavily optimized for low memory consumption Written in C99 for maximum portability Snapshot support for precompiling JavaScript source code to byte code Mature C API, easy to embed in applications For more information, please visit JerryScript Official Repo . Getting Started Setting up prerequisites There are several dependencies, that should be installed manually. The following list is the absolute minimum for building: gcc or any C99-compliant compiler (native or cross, e.g., arm-none-eabi) cmake = 2.8.12.2 Several scripts and tools help the building and development process, thus it is recommended to have the following installed as well: bash = 4.3.11 cppcheck = 1.61 vera++ = 1.2.1 python = 2.7.6 To make the scripts run correctly, several shell utilities should be available on the system: awk bc find sed Clone the jerryscript repository on GitHub or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/jerryscript-project/jerryscript.git Building JerryScript for Zephyr Before buiding JerryScript for Zephyr, you need to prepare the Zephyr development environment. Follow this page to get the Zephyr source and configure the environment. Remember to source the Zephyr environment as explained in the Zephyr documenation: $ cd zephyr $ source zephyr-env.sh Build the firmware and program your nRF52832-MDK by running: $ cd jerryscript $ make -f ./targets/zephyr/Makefile.zephyr BOARD = nrf52832_mdk flash When the programming operation completes, test command line in a serial terminal. You should see something similar to this: ***** BOOTING ZEPHYR OS v1.10.99 - BUILD: Mar 2 2018 22 :19:04 ***** JerryScript build: Mar 2 2018 22 :19:03 JerryScript API 1 .0 Zephyr version 1 .10.99 js Run the example javascript command test function: js var test = 0 ; for ( t = 100 ; t 1000 ; t ++ ) test += t ; print ( Hi JS World! + test ); Hi JS World ! 494550 undefined Try a more complex function: js function hello ( t ) { t = t * 10 ; return t }; print ( result + hello ( 10.5 )); result105 undefined Tip This firmware is available in the directory ./nrf52832-mdk/firmware/jerryscript/ with the name jerryscript_v1.0_for_zephyr.hex . More examples The implement of JerryScript for nRF5x SoC is NOT complete and many hardware APIs need to be added. There is an open source project called Zephyr.js (ZJS for short). It provides an IoT web runtime environment with JavaScript APIs for the Zephyr operating system, based on the JerryScript engine. There is only partial support for modules on nRF52 compared to Zephyr. Many hardware specific module (I2C, GPIO, ADC etc.) is not supported on nRF52. Over time, more features may be added to ZJS. You can keep watching it for updates. Reference JerryScript repo zephyr.js repo Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"JerryScript"},{"location":"jerryscript/#jerryscripta-ultra-lightweight-javascript-engine-for-internet-of-things","text":"","title":"JerryScriptA Ultra-lightweight JavaScript engine for Internet of Things"},{"location":"jerryscript/#introduction","text":"JerryScript is a lightweight JavaScript engine for resource-constrained devices such as microcontrollers. It can run on devices with less than 64 KB of RAM and less than 200 KB of flash memory. Key characteristics of JerryScript: Full ECMAScript 5.1 standard compliance 160K binary size when compiled for ARM Thumb-2 Heavily optimized for low memory consumption Written in C99 for maximum portability Snapshot support for precompiling JavaScript source code to byte code Mature C API, easy to embed in applications For more information, please visit JerryScript Official Repo .","title":"Introduction"},{"location":"jerryscript/#getting-started","text":"","title":"Getting Started"},{"location":"jerryscript/#setting-up-prerequisites","text":"There are several dependencies, that should be installed manually. The following list is the absolute minimum for building: gcc or any C99-compliant compiler (native or cross, e.g., arm-none-eabi) cmake = 2.8.12.2 Several scripts and tools help the building and development process, thus it is recommended to have the following installed as well: bash = 4.3.11 cppcheck = 1.61 vera++ = 1.2.1 python = 2.7.6 To make the scripts run correctly, several shell utilities should be available on the system: awk bc find sed Clone the jerryscript repository on GitHub or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/jerryscript-project/jerryscript.git","title":"Setting up prerequisites"},{"location":"jerryscript/#building-jerryscript-for-zephyr","text":"Before buiding JerryScript for Zephyr, you need to prepare the Zephyr development environment. Follow this page to get the Zephyr source and configure the environment. Remember to source the Zephyr environment as explained in the Zephyr documenation: $ cd zephyr $ source zephyr-env.sh Build the firmware and program your nRF52832-MDK by running: $ cd jerryscript $ make -f ./targets/zephyr/Makefile.zephyr BOARD = nrf52832_mdk flash When the programming operation completes, test command line in a serial terminal. You should see something similar to this: ***** BOOTING ZEPHYR OS v1.10.99 - BUILD: Mar 2 2018 22 :19:04 ***** JerryScript build: Mar 2 2018 22 :19:03 JerryScript API 1 .0 Zephyr version 1 .10.99 js Run the example javascript command test function: js var test = 0 ; for ( t = 100 ; t 1000 ; t ++ ) test += t ; print ( Hi JS World! + test ); Hi JS World ! 494550 undefined Try a more complex function: js function hello ( t ) { t = t * 10 ; return t }; print ( result + hello ( 10.5 )); result105 undefined Tip This firmware is available in the directory ./nrf52832-mdk/firmware/jerryscript/ with the name jerryscript_v1.0_for_zephyr.hex .","title":"Building JerryScript for Zephyr"},{"location":"jerryscript/#more-examples","text":"The implement of JerryScript for nRF5x SoC is NOT complete and many hardware APIs need to be added. There is an open source project called Zephyr.js (ZJS for short). It provides an IoT web runtime environment with JavaScript APIs for the Zephyr operating system, based on the JerryScript engine. There is only partial support for modules on nRF52 compared to Zephyr. Many hardware specific module (I2C, GPIO, ADC etc.) is not supported on nRF52. Over time, more features may be added to ZJS. You can keep watching it for updates.","title":"More examples"},{"location":"jerryscript/#reference","text":"JerryScript repo zephyr.js repo","title":"Reference"},{"location":"jerryscript/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"mbedos/","text":"Arm Mbed OS An Open Source Embedded Operating System designed specifically for the \"things\" in the Internet of Things. Introduction Arm Mbed OS is an open source embedded operating system designed specifically for the \"things\" in the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices. Mbed OS provides a platform that includes: Security foundations. Cloud management services. Drivers for sensors, I/O devices and connectivity. Arm Mbed OS lets you write applications that run on embedded devices, by providing the layer that interprets your application's code in a way the hardware can understand. Your application code is written in C and C++. It uses the application programming interfaces (APIs) that Mbed OS provides. These APIs allow your code to work on different microcontrollers in a uniform way. This reduces the challenges of getting started with Arm-based microcontrollers and integrating large software projects. For more information, please visit the Mbed OS developer site . Using Arm Mbed CLI In the Arm Mbed ecosystem, you have a choice in how you want to develop, Online and Offline. For offline development, Arm Mbed CLI is provided. Mbed CLI is compatible with Windows, Linux and OSX. This option provides more configuration options but also requires slightly more setup. Install Mbed CLI The setup process for Arm Mbed CLI depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to install Mbed CLI locally. On Windows the easiest way to install Mbed CLI to run the Mbed CLI Windows .exe installer . Note The Windows installer only installs the GNU Arm embedded toolchain. If you want to compile using Arm Compiler 5 or IAR, visit the supported compilers page . On Linux and macOS, you can use Python and Pip: $ pip install mbed-cli # if you have installed mbed-cli, you can update it with: $ pip install mbed-cli --upgrade You can ensure Mbed CLI installed correctly by running mbed help from your command-line. Setup environment For any installed toolchain, be sure to add the Mbed CLI global configuration: $ mbed config -G GCC_ARM_PATH path to GNU Arm bin [ mbed ] path to GNU Arm bin now set as global GCC_ARM_PATH $ mbed config --list [ mbed ] Global config: GCC_ARM_PATH = path to GNU Arm bin Note You can also apply the same configuration to the IAR and ARM toolchains using IAR_PATH or ARM_PATH . Compile and program the board Now you can try to compile one of the examples. Will use the mbed-os-example-blinky example here to keep it simple. Open terminal and change directory to: $ cd ./nrf52832-mdk/examples/mbedos5/mbed-os-example-blinky/ Add mbed-os library to the example directory: mbed-os-example-blinky$ mbed config root . mbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git Invoke mbed compile , and specify the name of your platform and your installed toolchain (GCC_ARM, ARM, IAR). For example, for the NRF52832_MDK platform and GNU Arm embedded toolchain: mbed-os-example-blinky$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash The --flash argument automatically flashes the compiled program onto your board if it is connected to your computer. You can add locally manufacturers id and platform name for nRF52832-MDK and see which boards are connected with mbed detect : $ mbedls --mock = 1024 :nRF52832_MDK Observe that the Green LED is blinking: Tip You can also follow the ' How to program nRF52832-MDK ' section to flash the compiled program. BLE examples The nrf52832-mdk repository contains a collection of BLE example applications based on mbed OS and built with Arm Mbed CLI. ./nrf52832-mdk/examples/mbedos5/mbed-os-example-ble \u251c\u2500\u2500 BLE_BatteryLevel \u251c\u2500\u2500 BLE_Beacon \u251c\u2500\u2500 BLE_Button \u251c\u2500\u2500 BLE_EddystoneObserver \u251c\u2500\u2500 BLE_EddystoneService \u251c\u2500\u2500 BLE_GAPButton \u251c\u2500\u2500 BLE_HeartRate \u251c\u2500\u2500 BLE_LED \u251c\u2500\u2500 BLE_LEDBlinker \u251c\u2500\u2500 BLE_Thermometer \u2514\u2500\u2500 README.md Using a command-line tool, navigate to any of the example directories, like BLE_BatteryLevel : $ cd BLE_BatteryLevel Add mbed-os library to the example directory: BLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git Compile and run the example application on your board: BLE_BatteryLevel$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash Open the nRF Connect app on your phone. Find your device which should be named BATTERY . Then establish a connection with your device. Discover the services and the characteristics on the device. The Battery service has the UUID 0x180F and includes the Battery level characteristic which has the UUID 0x2A19 . Now you can try other BLE examples on your board. Have fun! More examples Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date. Reference Arm Mbed OS developer site Mbed OS Documentation ARMmbed/mbed-os repository Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Arm Mbed OS"},{"location":"mbedos/#arm-mbed-os-an-open-source-embedded-operating-system-designed-specifically-for-the-things-in-the-internet-of-things","text":"","title":"Arm Mbed OS An Open Source Embedded Operating System designed specifically for the \"things\" in the Internet of Things."},{"location":"mbedos/#introduction","text":"Arm Mbed OS is an open source embedded operating system designed specifically for the \"things\" in the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices. Mbed OS provides a platform that includes: Security foundations. Cloud management services. Drivers for sensors, I/O devices and connectivity. Arm Mbed OS lets you write applications that run on embedded devices, by providing the layer that interprets your application's code in a way the hardware can understand. Your application code is written in C and C++. It uses the application programming interfaces (APIs) that Mbed OS provides. These APIs allow your code to work on different microcontrollers in a uniform way. This reduces the challenges of getting started with Arm-based microcontrollers and integrating large software projects. For more information, please visit the Mbed OS developer site .","title":"Introduction"},{"location":"mbedos/#using-arm-mbed-cli","text":"In the Arm Mbed ecosystem, you have a choice in how you want to develop, Online and Offline. For offline development, Arm Mbed CLI is provided. Mbed CLI is compatible with Windows, Linux and OSX. This option provides more configuration options but also requires slightly more setup.","title":"Using Arm Mbed CLI"},{"location":"mbedos/#install-mbed-cli","text":"The setup process for Arm Mbed CLI depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to install Mbed CLI locally. On Windows the easiest way to install Mbed CLI to run the Mbed CLI Windows .exe installer . Note The Windows installer only installs the GNU Arm embedded toolchain. If you want to compile using Arm Compiler 5 or IAR, visit the supported compilers page . On Linux and macOS, you can use Python and Pip: $ pip install mbed-cli # if you have installed mbed-cli, you can update it with: $ pip install mbed-cli --upgrade You can ensure Mbed CLI installed correctly by running mbed help from your command-line.","title":"Install Mbed CLI"},{"location":"mbedos/#setup-environment","text":"For any installed toolchain, be sure to add the Mbed CLI global configuration: $ mbed config -G GCC_ARM_PATH path to GNU Arm bin [ mbed ] path to GNU Arm bin now set as global GCC_ARM_PATH $ mbed config --list [ mbed ] Global config: GCC_ARM_PATH = path to GNU Arm bin Note You can also apply the same configuration to the IAR and ARM toolchains using IAR_PATH or ARM_PATH .","title":"Setup environment"},{"location":"mbedos/#compile-and-program-the-board","text":"Now you can try to compile one of the examples. Will use the mbed-os-example-blinky example here to keep it simple. Open terminal and change directory to: $ cd ./nrf52832-mdk/examples/mbedos5/mbed-os-example-blinky/ Add mbed-os library to the example directory: mbed-os-example-blinky$ mbed config root . mbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git Invoke mbed compile , and specify the name of your platform and your installed toolchain (GCC_ARM, ARM, IAR). For example, for the NRF52832_MDK platform and GNU Arm embedded toolchain: mbed-os-example-blinky$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash The --flash argument automatically flashes the compiled program onto your board if it is connected to your computer. You can add locally manufacturers id and platform name for nRF52832-MDK and see which boards are connected with mbed detect : $ mbedls --mock = 1024 :nRF52832_MDK Observe that the Green LED is blinking: Tip You can also follow the ' How to program nRF52832-MDK ' section to flash the compiled program.","title":"Compile and program the board"},{"location":"mbedos/#ble-examples","text":"The nrf52832-mdk repository contains a collection of BLE example applications based on mbed OS and built with Arm Mbed CLI. ./nrf52832-mdk/examples/mbedos5/mbed-os-example-ble \u251c\u2500\u2500 BLE_BatteryLevel \u251c\u2500\u2500 BLE_Beacon \u251c\u2500\u2500 BLE_Button \u251c\u2500\u2500 BLE_EddystoneObserver \u251c\u2500\u2500 BLE_EddystoneService \u251c\u2500\u2500 BLE_GAPButton \u251c\u2500\u2500 BLE_HeartRate \u251c\u2500\u2500 BLE_LED \u251c\u2500\u2500 BLE_LEDBlinker \u251c\u2500\u2500 BLE_Thermometer \u2514\u2500\u2500 README.md Using a command-line tool, navigate to any of the example directories, like BLE_BatteryLevel : $ cd BLE_BatteryLevel Add mbed-os library to the example directory: BLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git Compile and run the example application on your board: BLE_BatteryLevel$ mbed compile --target NRF52832_MDK --toolchain GCC_ARM --flash Open the nRF Connect app on your phone. Find your device which should be named BATTERY . Then establish a connection with your device. Discover the services and the characteristics on the device. The Battery service has the UUID 0x180F and includes the Battery level characteristic which has the UUID 0x2A19 . Now you can try other BLE examples on your board. Have fun!","title":"BLE examples"},{"location":"mbedos/#more-examples","text":"Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date.","title":"More examples"},{"location":"mbedos/#reference","text":"Arm Mbed OS developer site Mbed OS Documentation ARMmbed/mbed-os repository","title":"Reference"},{"location":"mbedos/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"mesh/","text":"nRF5 SDK for Mesh Software Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series Introduction The nRF5 SDK for Mesh is Nordic Semiconductor's implementation of the Bluetooth Mesh . It allows applications to utilize the features provided by the Bluetooth Mesh when running on Nordic's nRF5 Series chips. The addition of mesh networking capabilities to Bluetooth Low Energy enables extended range, increases the number of nodes and a many-to-many (m:m) communication topology. In a Bluetooth mesh network every received packet is broadcasted by relays, until the packet is received by the destination node (a so called managed flooding mesh.) A simple, but effective way of spreading information across the mesh network with no single point of failure. The mesh functionality is a significant update and enables new applications for Bluetooth in smart home, lighting, beaconing and asset tracking applications. You can find detailed information about Bluetooth Mesh in Bluetooth SIG's introduction to Bluetooth Mesh and the Bluetooth Mesh Networking Specifications . For more about nRF5 SDK for Mesh, please go to nordicsemi.com . The following documentation sections provide detailed information about the required software toolchains and the process of building the mesh examples. Installing the toolchain To build the example applications, a toolchain based on CMake is required. Install instructions are provided for macOS , Windows and Linux . macOS Install CMake and Ninja using brew : brew install cmake ninja Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then make sure to add the path to your toolchain to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } Verify if the path is set correctly, type the following in your terminal: arm-none-eabi-gcc --version Install nRF5x Command Line Tools and pyOCD . Windows The easiest way to install the native Windows dependencies is to first install Chocolatey , a package manager for Windows. If you prefer to install dependencies manually, you can also download the required programs from their respective websites. Install Chocolatey by following the instructions on the Chocolatey install page. Open a command prompt ( cmd.exe ) as an Administrator Optionally disable global confirmation to avoid having to confirm installation of individual programs: choco feature enable -n allowGlobalConfirmation Install CMake : choco install cmake --installargs ADD_CMAKE_TO_PATH=System Install the rest of the tools, and close the Administrator command prompt window when finished. choco install git python ninja Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then make sure to add the path to your toolchain to your OS PATH environment variable. Install nRF5x Command Line Tools and pyOCD . Linux This section describes how to set up the development environment on Ubuntu. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt-get update sudo apt-get upgrade Install the following packages using your system\u2019s package manager. sudo apt-get install --no-install-recommends git cmake ninja-build python3-pip Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then make sure to add the path to your toolchain to your OS PATH environment variable. Install nRF5x Command Line Tools and pyOCD . Clone the Repository To clone the source code repository from GitHub: git clone ---recursive https://github.com/makerdiary/nrf52832-mdk.git Or if you have already cloned the project, you may update the submodule: git submodule update --init The nRF5 SDK for Mesh now requires the nRF5 SDK to compile. Follow this instruction: Installing the nRF5 SDK . Building the mesh stack and examples Now you can try to build the mesh stack and examples. Good practice is to create a build folder in the nrf_sdks/nRF5-SDK-for-Mesh directory, where all artifacts generated by the Ninja build system are stored: nRF5-SDK-for-Mesh$ mkdir build cd build Before you can build with Ninja, you must generate the correct build files with CMake. cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. After the Ninja build files are generated, running ninja target to build the targets. Here we take my_light_switch_client as an example: ninja my_light_switch_client_nrf52832_xxAA_s132_6.1.0 Running the example To run examples onto your nRF52832-MDK, first connect it to your computer with a USB cable. When your board is detected, run ninja flash_ your target to flash the example: ninja flash_my_light_switch_client_nrf52832_xxAA_s132_6.1.0 Run a terminal application(for example PuTTY or screen ) to print the log information: screen /dev/cu.usbmodem1412 115200 Flash other several nRF52832-MDK boards with Server target: ninja flash_my_light_switch_server_nrf52832_xxAA_s132_6.1.0 To build a Bluetooth Mesh Network, you can use the nRF Mesh mobile app ( iOS or Android ). Creating a new target The easiest way to make a new build target is to: Copy one of the example folders, e.g., examples/my_beaconing to examples/my_app . Add the folder to the examples/CMakeLists.txt with a add_subdirectory(\"my_app\") command. Modify the target name in the first line of examples/my_app/CMakeLists.txt to set(target \"my_app\") . Generating build files with nRF5-SDK-for-Mesh $ mkdir build cd build build $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. Build your new target with: ninja my_app Flash the target: ninja flash_my_app More examples Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date. Reference nRF5 SDK for Mesh Documentation nRF5-SDK-for-Mesh Repository Basic Bluetooth Mesh concepts nRF5 SDK for Mesh architecture Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"nRF5 SDK for Mesh"},{"location":"mesh/#nrf5-sdk-for-mesh-software-development-kit-for-bluetooth-mesh-solutions-using-nrf51-series-and-nrf52-series","text":"","title":"nRF5 SDK for Mesh Software Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series"},{"location":"mesh/#introduction","text":"The nRF5 SDK for Mesh is Nordic Semiconductor's implementation of the Bluetooth Mesh . It allows applications to utilize the features provided by the Bluetooth Mesh when running on Nordic's nRF5 Series chips. The addition of mesh networking capabilities to Bluetooth Low Energy enables extended range, increases the number of nodes and a many-to-many (m:m) communication topology. In a Bluetooth mesh network every received packet is broadcasted by relays, until the packet is received by the destination node (a so called managed flooding mesh.) A simple, but effective way of spreading information across the mesh network with no single point of failure. The mesh functionality is a significant update and enables new applications for Bluetooth in smart home, lighting, beaconing and asset tracking applications. You can find detailed information about Bluetooth Mesh in Bluetooth SIG's introduction to Bluetooth Mesh and the Bluetooth Mesh Networking Specifications . For more about nRF5 SDK for Mesh, please go to nordicsemi.com . The following documentation sections provide detailed information about the required software toolchains and the process of building the mesh examples.","title":"Introduction"},{"location":"mesh/#installing-the-toolchain","text":"To build the example applications, a toolchain based on CMake is required. Install instructions are provided for macOS , Windows and Linux .","title":"Installing the toolchain"},{"location":"mesh/#macos","text":"Install CMake and Ninja using brew : brew install cmake ninja Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then make sure to add the path to your toolchain to your OS PATH environment variable. # in ~/.bash_profile, add the following script export PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH } Verify if the path is set correctly, type the following in your terminal: arm-none-eabi-gcc --version Install nRF5x Command Line Tools and pyOCD .","title":"macOS"},{"location":"mesh/#windows","text":"The easiest way to install the native Windows dependencies is to first install Chocolatey , a package manager for Windows. If you prefer to install dependencies manually, you can also download the required programs from their respective websites. Install Chocolatey by following the instructions on the Chocolatey install page. Open a command prompt ( cmd.exe ) as an Administrator Optionally disable global confirmation to avoid having to confirm installation of individual programs: choco feature enable -n allowGlobalConfirmation Install CMake : choco install cmake --installargs ADD_CMAKE_TO_PATH=System Install the rest of the tools, and close the Administrator command prompt window when finished. choco install git python ninja Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then make sure to add the path to your toolchain to your OS PATH environment variable. Install nRF5x Command Line Tools and pyOCD .","title":"Windows"},{"location":"mesh/#linux","text":"This section describes how to set up the development environment on Ubuntu. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt-get update sudo apt-get upgrade Install the following packages using your system\u2019s package manager. sudo apt-get install --no-install-recommends git cmake ninja-build python3-pip Download and install the GNU ARM Embedded Toolchain . The 6-2017-q2-update version is recommended. Then make sure to add the path to your toolchain to your OS PATH environment variable. Install nRF5x Command Line Tools and pyOCD .","title":"Linux"},{"location":"mesh/#clone-the-repository","text":"To clone the source code repository from GitHub: git clone ---recursive https://github.com/makerdiary/nrf52832-mdk.git Or if you have already cloned the project, you may update the submodule: git submodule update --init The nRF5 SDK for Mesh now requires the nRF5 SDK to compile. Follow this instruction: Installing the nRF5 SDK .","title":"Clone the Repository"},{"location":"mesh/#building-the-mesh-stack-and-examples","text":"Now you can try to build the mesh stack and examples. Good practice is to create a build folder in the nrf_sdks/nRF5-SDK-for-Mesh directory, where all artifacts generated by the Ninja build system are stored: nRF5-SDK-for-Mesh$ mkdir build cd build Before you can build with Ninja, you must generate the correct build files with CMake. cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. After the Ninja build files are generated, running ninja target to build the targets. Here we take my_light_switch_client as an example: ninja my_light_switch_client_nrf52832_xxAA_s132_6.1.0","title":"Building the mesh stack and examples"},{"location":"mesh/#running-the-example","text":"To run examples onto your nRF52832-MDK, first connect it to your computer with a USB cable. When your board is detected, run ninja flash_ your target to flash the example: ninja flash_my_light_switch_client_nrf52832_xxAA_s132_6.1.0 Run a terminal application(for example PuTTY or screen ) to print the log information: screen /dev/cu.usbmodem1412 115200 Flash other several nRF52832-MDK boards with Server target: ninja flash_my_light_switch_server_nrf52832_xxAA_s132_6.1.0 To build a Bluetooth Mesh Network, you can use the nRF Mesh mobile app ( iOS or Android ).","title":"Running the example"},{"location":"mesh/#creating-a-new-target","text":"The easiest way to make a new build target is to: Copy one of the example folders, e.g., examples/my_beaconing to examples/my_app . Add the folder to the examples/CMakeLists.txt with a add_subdirectory(\"my_app\") command. Modify the target name in the first line of examples/my_app/CMakeLists.txt to set(target \"my_app\") . Generating build files with nRF5-SDK-for-Mesh $ mkdir build cd build build $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52832_xxAA -DBOARD = nrf52832_mdk -DFLASHER = pyocd .. Build your new target with: ninja my_app Flash the target: ninja flash_my_app","title":"Creating a new target"},{"location":"mesh/#more-examples","text":"Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date.","title":"More examples"},{"location":"mesh/#reference","text":"nRF5 SDK for Mesh Documentation nRF5-SDK-for-Mesh Repository Basic Bluetooth Mesh concepts nRF5 SDK for Mesh architecture","title":"Reference"},{"location":"mesh/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"micropython/","text":"MicoPython A lean and efficient Python implementation for microcontrollers and constrained systems Introduction MicroPython is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimised to run on microcontrollers and in constrained environments. MicroPython is packed full of advanced features such as an interactive prompt, arbitrary precision integers, closures, list comprehension, generators, exception handling and more. Yet it is compact enough to fit and run within just 256k of code space and 16k of RAM. MicroPython aims to be as compatible with normal Python as possible to allow you to transfer code with ease from the desktop to a microcontroller or embedded system. If in doubt, remember the Zen of MicroPython: Code, Hack it, Less is more, Keep it simple, Small is beautiful, Be brave! Break things! Learn and have fun! Express yourself with MicroPython. Happy hacking! :-) For more information, please visit the MicroPython Official Site . Getting Started Follow this tutorial to get started with MicroPython on nRF52832-MDK. Flashing MicroPython Before starting coding, you will need to program nRF52832-MDK with the MicroPython firmware. The MicroPython firmware for nRF52832-MDK is available in the directory ./nrf52832-mdk/firmware/micropython/ . Connect the nRF52832-MDK to one of your PC's USB host ports. Then drag and drop the hex file into the DAPLINK removable drive. When programming is completed, the unit will be re-detected by the computer. Espruino will run after pressing the RESET button. Running your first script Connect the nRF52832-MDK to your PC and then start a terminal application (for example PuTTY or screen ). Will use the screen application here, you will get a MicroPython REPL prompt: $ screen /dev/cu.usbmodem1412 115200 Tip REPL stands for Read Evaluate Print Loop. Using the REPL is by far the easiest way to test out your code and run commands. Once you have a prompt you can start experimenting! Anything you type at the prompt will be executed after you press the Enter key. MicroPython will run the code that you enter and print the result (if there is one). If there is an error with the text that you enter then an error message is printed. Try typing the following at the prompt: print ( hello micropython! ) Try typing help() at the prompt to get more helpful information: Blinking an LED Now you can try to make a real LED blink using the following Python code: from machine import Pin import time led = Pin ( PA22 , Pin . OUT ) for i in range ( 0 , 10 ): led . value ( 1 ) time . sleep_ms ( 500 ) led . value ( 0 ) time . sleep_ms ( 500 ) print ( Done! ) Observe that the GREEN LED is blinking. That's it. Now you've got an idea of how to use MicroPython. Next steps There are many features that were not covered in this tutorial. The best way to learn about them is to read the full documentation of the modules, and to experiment! Good luck creating your Internet of Things devices! How to build MicroPython This section will show you how to build your own MicroPython firmware. Setting up the development environment The GNU Arm Embedded toolchains is needed to build Espruino. Download and install the GNU Arm Embedded toolchains. Then make sure to add the path to your toolchain to your OS PATH environment variable: path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal: $ arm-none-eabi-gcc --version Note The latest version of GNU Arm Embedded toolchain maybe not work fine, but you can just have a try. Compiling and flashing MicroPython Prerequisite steps for building the nrf port: $ git clone https://github.com/makerdiary/micropython.git $ cd micropython $ git submodule update --init $ make -C mpy-cross Change directory to nrf and prepare the bluetooth folder by downloading Bluetooth LE stacks and headers: micropython$ cd nrf nrf$ ./drivers/bluetooth/download_ble_stack.sh After the Bluetooth stacks has been downloaded, connect nRF52832-MDK to your current PC. Now you can compile the target with the following command: $ make BOARD = nrf52832_mdk SD = s132 sd FLASHER = pyocd Note The make sd will trigger a flash of the bluetooth stack before that application is flashed. Set FLASHER to pyocd if DAPLink is available. Bluetooth LE REPL The nrf port also implements a BLE REPL driver. This feature is disabled by default, as it will deactivate the UART REPL when activated. As nRF52832 only have one UART, using the BLE REPL free's the UART instance such that it can be used as a general UART peripheral not bound to REPL. The configuration can be enabled by editing the bluetooth_conf.h and set MICROPY_PY_BLE_NUS to 1 . WebBluetooth mode can also be configured by editing bluetooth_conf.h and set BLUETOOTH_WEBBLUETOOTH_REPL to 1 . This will alternate advertisement between Eddystone URL and regular connectable advertisement. The Eddystone URL will point the phone or PC to download WebBluetooth REPL (experimental), which subsequently can be used to connect to the Bluetooth REPL from the PC or Phone browser. Status The nrf port is NOT stable and some APIs may be changed over time. So, be brave! Break things! Learn and have fun! Happy hacking! :-) Reference MicroPython Official site MicroPython Documentation MicroPython Official Repo MicroPython forked by makerdiary Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"MicroPython"},{"location":"micropython/#micopython-a-lean-and-efficient-python-implementation-for-microcontrollers-and-constrained-systems","text":"","title":"MicoPython A lean and efficient Python implementation for microcontrollers and constrained systems"},{"location":"micropython/#introduction","text":"MicroPython is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimised to run on microcontrollers and in constrained environments. MicroPython is packed full of advanced features such as an interactive prompt, arbitrary precision integers, closures, list comprehension, generators, exception handling and more. Yet it is compact enough to fit and run within just 256k of code space and 16k of RAM. MicroPython aims to be as compatible with normal Python as possible to allow you to transfer code with ease from the desktop to a microcontroller or embedded system. If in doubt, remember the Zen of MicroPython: Code, Hack it, Less is more, Keep it simple, Small is beautiful, Be brave! Break things! Learn and have fun! Express yourself with MicroPython. Happy hacking! :-) For more information, please visit the MicroPython Official Site .","title":"Introduction"},{"location":"micropython/#getting-started","text":"Follow this tutorial to get started with MicroPython on nRF52832-MDK.","title":"Getting Started"},{"location":"micropython/#flashing-micropython","text":"Before starting coding, you will need to program nRF52832-MDK with the MicroPython firmware. The MicroPython firmware for nRF52832-MDK is available in the directory ./nrf52832-mdk/firmware/micropython/ . Connect the nRF52832-MDK to one of your PC's USB host ports. Then drag and drop the hex file into the DAPLINK removable drive. When programming is completed, the unit will be re-detected by the computer. Espruino will run after pressing the RESET button.","title":"Flashing MicroPython"},{"location":"micropython/#running-your-first-script","text":"Connect the nRF52832-MDK to your PC and then start a terminal application (for example PuTTY or screen ). Will use the screen application here, you will get a MicroPython REPL prompt: $ screen /dev/cu.usbmodem1412 115200 Tip REPL stands for Read Evaluate Print Loop. Using the REPL is by far the easiest way to test out your code and run commands. Once you have a prompt you can start experimenting! Anything you type at the prompt will be executed after you press the Enter key. MicroPython will run the code that you enter and print the result (if there is one). If there is an error with the text that you enter then an error message is printed. Try typing the following at the prompt: print ( hello micropython! ) Try typing help() at the prompt to get more helpful information:","title":"Running your first script"},{"location":"micropython/#blinking-an-led","text":"Now you can try to make a real LED blink using the following Python code: from machine import Pin import time led = Pin ( PA22 , Pin . OUT ) for i in range ( 0 , 10 ): led . value ( 1 ) time . sleep_ms ( 500 ) led . value ( 0 ) time . sleep_ms ( 500 ) print ( Done! ) Observe that the GREEN LED is blinking. That's it. Now you've got an idea of how to use MicroPython.","title":"Blinking an LED"},{"location":"micropython/#next-steps","text":"There are many features that were not covered in this tutorial. The best way to learn about them is to read the full documentation of the modules, and to experiment! Good luck creating your Internet of Things devices!","title":"Next steps"},{"location":"micropython/#how-to-build-micropython","text":"This section will show you how to build your own MicroPython firmware.","title":"How to build MicroPython"},{"location":"micropython/#setting-up-the-development-environment","text":"The GNU Arm Embedded toolchains is needed to build Espruino. Download and install the GNU Arm Embedded toolchains. Then make sure to add the path to your toolchain to your OS PATH environment variable: path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal: $ arm-none-eabi-gcc --version Note The latest version of GNU Arm Embedded toolchain maybe not work fine, but you can just have a try.","title":"Setting up the development environment"},{"location":"micropython/#compiling-and-flashing-micropython","text":"Prerequisite steps for building the nrf port: $ git clone https://github.com/makerdiary/micropython.git $ cd micropython $ git submodule update --init $ make -C mpy-cross Change directory to nrf and prepare the bluetooth folder by downloading Bluetooth LE stacks and headers: micropython$ cd nrf nrf$ ./drivers/bluetooth/download_ble_stack.sh After the Bluetooth stacks has been downloaded, connect nRF52832-MDK to your current PC. Now you can compile the target with the following command: $ make BOARD = nrf52832_mdk SD = s132 sd FLASHER = pyocd Note The make sd will trigger a flash of the bluetooth stack before that application is flashed. Set FLASHER to pyocd if DAPLink is available.","title":"Compiling and flashing MicroPython"},{"location":"micropython/#bluetooth-le-repl","text":"The nrf port also implements a BLE REPL driver. This feature is disabled by default, as it will deactivate the UART REPL when activated. As nRF52832 only have one UART, using the BLE REPL free's the UART instance such that it can be used as a general UART peripheral not bound to REPL. The configuration can be enabled by editing the bluetooth_conf.h and set MICROPY_PY_BLE_NUS to 1 . WebBluetooth mode can also be configured by editing bluetooth_conf.h and set BLUETOOTH_WEBBLUETOOTH_REPL to 1 . This will alternate advertisement between Eddystone URL and regular connectable advertisement. The Eddystone URL will point the phone or PC to download WebBluetooth REPL (experimental), which subsequently can be used to connect to the Bluetooth REPL from the PC or Phone browser.","title":"Bluetooth LE REPL"},{"location":"micropython/#status","text":"The nrf port is NOT stable and some APIs may be changed over time. So, be brave! Break things! Learn and have fun! Happy hacking! :-)","title":"Status"},{"location":"micropython/#reference","text":"MicroPython Official site MicroPython Documentation MicroPython Official Repo MicroPython forked by makerdiary","title":"Reference"},{"location":"micropython/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"mynewt/","text":"Mynewt An OS to build, deploy and securely manage billions of devices Introduction Apache Mynewt is an operating system that makes it easy to develop applications for microcontroller environments where power and cost are driving factors. Examples of these devices are connected locks, lights, and wearables. As more and more devices get connected, these interconnected devices perform complex tasks. To perform these tasks, you need low-level operational functionality built into the operating system. Typically, connected devices built with these microcontrollers perform a myriad of functions: Networking Stacks: Bluetooth Low Energy and Thread Peripherals: PWM to drive motors, ADCs to measure sensor data, and RTCs to keep time. Scheduled Processing: actions must happen on a calendared or periodic basis. Apache Mynewt accomplishes all the above easily, by providing a complete operating system for constrained devices, including: A fully open-source Bluetooth Low Energy stack with both Host and Controller implementations. A pre-emptive, multi-tasking Real Time operating system kernel A Hardware Abstraction Layer (HAL) that abstracts the MCU's peripheral functions, allowing developers to easily write cross-platform code. Newt In order to provide all this functionality, and operate in an extremely low resource environment, Mynewt provides a very fine-grained source package management and build system tool, called newt . You can install newt for macOS , Linux , or Windows . Installing Newt on macOS Newt is supported on macOS 64 bit platforms and has been tested on macOS Sierra. If this is your first time installing newt, add the runtimeco/homebrew-mynewt tap: $ brew tap runtimeco/homebrew-mynewt $ brew update Run the following command to install the latest release version of newt: $ brew update $ brew install mynewt-newt Installing Newt on Linux Run the following commands to upgrade or install the latest version of newt: $ sudo apt-get update $ sudo apt-get install newt Note If you encounter build errors (such as missing sys/mman.h ), please make sure you have a 32-bit glibc: $ sudo apt-get install gcc-multilib Installing Newt on Windows On Windows, we use MSYS2 as the development environment to build and run Mynewt OS applications for target boards. You can do so by performing the following steps: Download Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Update the package database and core system packages with: $ pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: $ pacman -Su Install dependencies: $ pacman -S git tar Download and unpack the newt source: $ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz $ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz Run the build.sh to build the newt tool. $ cd mynewt-newt-mynewt_1_3_0_tag $ ./build.sh $ rm /tmp/mynewt_1_3_0_tag.tar.gz You should see the newt/newt.exe executable. Move the executable to a bin directory in your PATH: $ mv newt/newt.exe /usr/bin Blinky on nRF52832-MDK Now you can try to build one of the examples. Will use the blinky example here to keep it simple. Open terminal and change directory to: $ cd ./nrf52832-mdk/examples/mynewt/blinky Install project dependencies using the newt install command: blinky$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none Several targets are already created for the Blinky application. You can run the newt target show command to verify the target settings: blinky$ newt target show targets/my_blinky_sim app = apps/blinky bsp = @apache-mynewt-core/hw/bsp/native build_profile = debug targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized Now you can try to build the target executables. Run the newt build nrf52_boot command to build the bootloader: blinky$ newt build nrf52_boot Building target targets/nrf52_boot Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c Compiling repos/apache-mynewt-core/apps/boot/src/boot.c Compiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c Compiling repos/apache-mynewt-core/boot/bootutil/src/loader.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c ... Archiving nrf52_boot-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf Target successfully built: targets/nrf52_boot Run the newt build nrf52_blinky command to build the Blinky application: blinky$ newt build nrf52_blinky Building target targets/nrf52_blinky Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52.s Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/sbrk.c Compiling apps/blinky/src/main.c Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/hal_bsp.c Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s Compiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c Compiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c Compiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_common.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_gpio.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_i2c.c ... Archiving nrf52_blinky-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf Target successfully built: targets/nrf52_blinky Run the newt create-image nrf52_blinky 1.0.0 command to create and sign the application image. You may assign an arbitrary version (e.g. 1.0.0 ) to the image. blinky$ newt create-image nrf52_blinky 1 .0.0 App image succesfully generated: ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img Everything goes well, now you can connect to the board and load the firmware: Note nRF52832-MDK supports OpenOCD debugger. OpenOCD version 0.10.0 with nrf52 support is required. A binary for this version is available to download for Mac OS, Linux, and Windows. Follow this guide to install it. Run the newt load nrf52_boot command to load the bootloader onto the board: blinky$ newt load nrf52_boot Loading bootloader Run the newt load nrf52_blinky command to load the Blinky application image onto the board. blinky$ newt load nrf52_blinky Loading app image into slot 1 Observe that the GREEN LED is blinking: Create Your first Project Creating a New Project Choose a name for your project. We name the project myproj . Run the newt new myproj command, from your dev directory, to create a new project: $cd ~/dev $ newt new myproj Downloading project skeleton from apache/mynewt-blinky... Installing skeleton in myproj... Project myproj successfully created. The newt tool creates a project base directory name myproj. All newt tool commands are run from the project base directory. The newt tool populates this new project with a base skeleton of a new Apache Mynewt project in the project base directory. It has the following structure: . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 NOTICE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 apps \u2502 \u2514\u2500\u2500 blinky \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.c \u251c\u2500\u2500 project.yml \u2514\u2500\u2500 targets \u251c\u2500\u2500 my_blinky_sim \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 target.yml \u2514\u2500\u2500 unittest \u251c\u2500\u2500 pkg.yml \u2514\u2500\u2500 target.yml 6 directories, 10 files Fetching External Packages To fetch the package with board support for nRF52832-MDK from the makerdiary/mynewt_nrf52832_mdk git repository, you need to add the repository to the project.yml file in your base project directory. Here is an example project.yml file with the mynewt_nrf52832_mdk repository added. project.name: myproj project.repositories: - apache-mynewt-core - mynewt_nrf52832_mdk # Use github s distribution mechanism for core ASF libraries. # This provides mirroring automatically for us. # repository.apache-mynewt-core: type: github vers: 1 -latest user: apache repo: mynewt-core # a special repo to hold hardware specific stuff for nRF52832-MDK repository.mynewt_nrf52832_mdk: type: github vers: 0 -dev user: makerdiary repo: mynewt_nrf52832_mdk Install project dependencies using the newt install command: myproj$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none Creating the Targets Create two targets for the nRF52832-MDK board - one for the bootloader and one for the your application. Run the following newt target commands, from your project directory, to create a bootloader target. We name the target nrf52_boot : myproj$ newt target create nrf52_boot myproj$ newt target set nrf52_boot app = @apache-mynewt-core/apps/boot myproj$ newt target set nrf52_boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_boot build_profile = optimized Run the following newt target commands to create a target for the Blinky application. We name the target nrf52_blinky . myproj$ newt target create nrf52_blinky myproj$ newt target set nrf52_blinky app = apps/blinky myproj$ newt target set nrf52_blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_blinky build_profile = debug You can run the newt target show command to verify the target settings: myproj$ newt target show targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized Building the Target Executables Run the following commands to build the bootloader and application: myproj$ newt build nrf52_boot myproj$ newt build nrf52_blinky Loading the images First run the newt create-image nrf52_blinky 1.0.0 command to create and sign the application image. You may assign an arbitrary version (e.g. 1.0.0 ) to the image. myproj$ newt create-image nrf52_blinky 1 .0.0 Run the newt load nrf52_boot command to load the bootloader onto the board: myproj$ newt load nrf52_boot Loading bootloader Run the newt load nrf52_blinky command to load the Blinky application image onto the board. myproj$ newt load nrf52_blinky Loading app image into slot 1 Now observe if the application is running in the right way. Explore other Mynewt OS Features Congratulations, you have created your first project! Apache Mynewt has a lot more functionality. Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date. Happy Hacking! Reference Apache Mynewt Official site Apache Mynewt Documentation Apache/mynewt-core repository Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Mynewt"},{"location":"mynewt/#mynewt-an-os-to-build-deploy-and-securely-manage-billions-of-devices","text":"","title":"Mynewt An OS to build, deploy and securely manage billions of devices"},{"location":"mynewt/#introduction","text":"Apache Mynewt is an operating system that makes it easy to develop applications for microcontroller environments where power and cost are driving factors. Examples of these devices are connected locks, lights, and wearables. As more and more devices get connected, these interconnected devices perform complex tasks. To perform these tasks, you need low-level operational functionality built into the operating system. Typically, connected devices built with these microcontrollers perform a myriad of functions: Networking Stacks: Bluetooth Low Energy and Thread Peripherals: PWM to drive motors, ADCs to measure sensor data, and RTCs to keep time. Scheduled Processing: actions must happen on a calendared or periodic basis. Apache Mynewt accomplishes all the above easily, by providing a complete operating system for constrained devices, including: A fully open-source Bluetooth Low Energy stack with both Host and Controller implementations. A pre-emptive, multi-tasking Real Time operating system kernel A Hardware Abstraction Layer (HAL) that abstracts the MCU's peripheral functions, allowing developers to easily write cross-platform code.","title":"Introduction"},{"location":"mynewt/#newt","text":"In order to provide all this functionality, and operate in an extremely low resource environment, Mynewt provides a very fine-grained source package management and build system tool, called newt . You can install newt for macOS , Linux , or Windows .","title":"Newt"},{"location":"mynewt/#installing-newt-on-macos","text":"Newt is supported on macOS 64 bit platforms and has been tested on macOS Sierra. If this is your first time installing newt, add the runtimeco/homebrew-mynewt tap: $ brew tap runtimeco/homebrew-mynewt $ brew update Run the following command to install the latest release version of newt: $ brew update $ brew install mynewt-newt","title":"Installing Newt on macOS"},{"location":"mynewt/#installing-newt-on-linux","text":"Run the following commands to upgrade or install the latest version of newt: $ sudo apt-get update $ sudo apt-get install newt Note If you encounter build errors (such as missing sys/mman.h ), please make sure you have a 32-bit glibc: $ sudo apt-get install gcc-multilib","title":"Installing Newt on Linux"},{"location":"mynewt/#installing-newt-on-windows","text":"On Windows, we use MSYS2 as the development environment to build and run Mynewt OS applications for target boards. You can do so by performing the following steps: Download Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Update the package database and core system packages with: $ pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: $ pacman -Su Install dependencies: $ pacman -S git tar Download and unpack the newt source: $ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz $ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz Run the build.sh to build the newt tool. $ cd mynewt-newt-mynewt_1_3_0_tag $ ./build.sh $ rm /tmp/mynewt_1_3_0_tag.tar.gz You should see the newt/newt.exe executable. Move the executable to a bin directory in your PATH: $ mv newt/newt.exe /usr/bin","title":"Installing Newt on Windows"},{"location":"mynewt/#blinky-on-nrf52832-mdk","text":"Now you can try to build one of the examples. Will use the blinky example here to keep it simple. Open terminal and change directory to: $ cd ./nrf52832-mdk/examples/mynewt/blinky Install project dependencies using the newt install command: blinky$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none Several targets are already created for the Blinky application. You can run the newt target show command to verify the target settings: blinky$ newt target show targets/my_blinky_sim app = apps/blinky bsp = @apache-mynewt-core/hw/bsp/native build_profile = debug targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized Now you can try to build the target executables. Run the newt build nrf52_boot command to build the bootloader: blinky$ newt build nrf52_boot Building target targets/nrf52_boot Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c Compiling repos/apache-mynewt-core/apps/boot/src/boot.c Compiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c Compiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c Compiling repos/apache-mynewt-core/boot/bootutil/src/loader.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c Compiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c ... Archiving nrf52_boot-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf Target successfully built: targets/nrf52_boot Run the newt build nrf52_blinky command to build the Blinky application: blinky$ newt build nrf52_blinky Building target targets/nrf52_blinky Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52.s Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/sbrk.c Compiling apps/blinky/src/main.c Compiling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/hal_bsp.c Assembling repos/mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s Compiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c Compiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c Compiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_common.c Compiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_flash.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_gpio.c Compiling repos/apache-mynewt-core/hw/mcu/nordic/nrf52xxx/src/hal_i2c.c ... Archiving nrf52_blinky-sysinit-app.a Archiving sys_flash_map.a Archiving sys_mfg.a Archiving sys_sysinit.a Archiving util_mem.a Linking ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf Target successfully built: targets/nrf52_blinky Run the newt create-image nrf52_blinky 1.0.0 command to create and sign the application image. You may assign an arbitrary version (e.g. 1.0.0 ) to the image. blinky$ newt create-image nrf52_blinky 1 .0.0 App image succesfully generated: ~/makerdiary/nrf52832-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img Everything goes well, now you can connect to the board and load the firmware: Note nRF52832-MDK supports OpenOCD debugger. OpenOCD version 0.10.0 with nrf52 support is required. A binary for this version is available to download for Mac OS, Linux, and Windows. Follow this guide to install it. Run the newt load nrf52_boot command to load the bootloader onto the board: blinky$ newt load nrf52_boot Loading bootloader Run the newt load nrf52_blinky command to load the Blinky application image onto the board. blinky$ newt load nrf52_blinky Loading app image into slot 1 Observe that the GREEN LED is blinking:","title":"Blinky on nRF52832-MDK"},{"location":"mynewt/#create-your-first-project","text":"","title":"Create Your first Project"},{"location":"mynewt/#creating-a-new-project","text":"Choose a name for your project. We name the project myproj . Run the newt new myproj command, from your dev directory, to create a new project: $cd ~/dev $ newt new myproj Downloading project skeleton from apache/mynewt-blinky... Installing skeleton in myproj... Project myproj successfully created. The newt tool creates a project base directory name myproj. All newt tool commands are run from the project base directory. The newt tool populates this new project with a base skeleton of a new Apache Mynewt project in the project base directory. It has the following structure: . \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 NOTICE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 apps \u2502 \u2514\u2500\u2500 blinky \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.c \u251c\u2500\u2500 project.yml \u2514\u2500\u2500 targets \u251c\u2500\u2500 my_blinky_sim \u2502 \u251c\u2500\u2500 pkg.yml \u2502 \u2514\u2500\u2500 target.yml \u2514\u2500\u2500 unittest \u251c\u2500\u2500 pkg.yml \u2514\u2500\u2500 target.yml 6 directories, 10 files","title":"Creating a New Project"},{"location":"mynewt/#fetching-external-packages","text":"To fetch the package with board support for nRF52832-MDK from the makerdiary/mynewt_nrf52832_mdk git repository, you need to add the repository to the project.yml file in your base project directory. Here is an example project.yml file with the mynewt_nrf52832_mdk repository added. project.name: myproj project.repositories: - apache-mynewt-core - mynewt_nrf52832_mdk # Use github s distribution mechanism for core ASF libraries. # This provides mirroring automatically for us. # repository.apache-mynewt-core: type: github vers: 1 -latest user: apache repo: mynewt-core # a special repo to hold hardware specific stuff for nRF52832-MDK repository.mynewt_nrf52832_mdk: type: github vers: 0 -dev user: makerdiary repo: mynewt_nrf52832_mdk Install project dependencies using the newt install command: myproj$ newt install apache-mynewt-core successfully installed version 1 .3.0-none mynewt_nrf52832_mdk successfully installed version 0 .0.0-none","title":"Fetching External Packages"},{"location":"mynewt/#creating-the-targets","text":"Create two targets for the nRF52832-MDK board - one for the bootloader and one for the your application. Run the following newt target commands, from your project directory, to create a bootloader target. We name the target nrf52_boot : myproj$ newt target create nrf52_boot myproj$ newt target set nrf52_boot app = @apache-mynewt-core/apps/boot myproj$ newt target set nrf52_boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_boot build_profile = optimized Run the following newt target commands to create a target for the Blinky application. We name the target nrf52_blinky . myproj$ newt target create nrf52_blinky myproj$ newt target set nrf52_blinky app = apps/blinky myproj$ newt target set nrf52_blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk myproj$ newt target set nrf52_blinky build_profile = debug You can run the newt target show command to verify the target settings: myproj$ newt target show targets/nrf52_blinky app = apps/blinky bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = debug targets/nrf52_boot app = @apache-mynewt-core/apps/boot bsp = @mynewt_nrf52832_mdk/hw/bsp/nrf52832_mdk build_profile = optimized","title":"Creating the Targets"},{"location":"mynewt/#building-the-target-executables","text":"Run the following commands to build the bootloader and application: myproj$ newt build nrf52_boot myproj$ newt build nrf52_blinky","title":"Building the Target Executables"},{"location":"mynewt/#loading-the-images","text":"First run the newt create-image nrf52_blinky 1.0.0 command to create and sign the application image. You may assign an arbitrary version (e.g. 1.0.0 ) to the image. myproj$ newt create-image nrf52_blinky 1 .0.0 Run the newt load nrf52_boot command to load the bootloader onto the board: myproj$ newt load nrf52_boot Loading bootloader Run the newt load nrf52_blinky command to load the Blinky application image onto the board. myproj$ newt load nrf52_blinky Loading app image into slot 1 Now observe if the application is running in the right way.","title":"Loading the images"},{"location":"mynewt/#explore-other-mynewt-os-features","text":"Congratulations, you have created your first project! Apache Mynewt has a lot more functionality. Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date. Happy Hacking!","title":"Explore other Mynewt OS Features"},{"location":"mynewt/#reference","text":"Apache Mynewt Official site Apache Mynewt Documentation Apache/mynewt-core repository","title":"Reference"},{"location":"mynewt/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/","text":"nRF5 SDK Software Development Kit for nRF51 and nRF52 Series Introduction The nRF5 SDK provides a rich developing environment for nRF5 Series devices by including a broad selection of drivers, libraries, examples for peripherals, SoftDevices, and proprietary radio protocols. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. We provide example applications that you can run on your nRF52832-MDK to ensure that everything is set up correctly. After these tests, you can use the examples as starting point to develop your own applications. Before we begin, we need to install some software components to build our example applications. Here we recommend GNU Arm Embedded Toolchains as they are free and open-source. Installing GNU Arm Embedded Toolchain The GNU Arm Embedded toolchains are integrated and validated packages featuring the Arm Embedded GCC compiler, libraries and other GNU tools necessary for bare-metal software development on devices based on the Arm Cortex-M and Cortex-R processors. The toolchains are available for cross-compilation on Microsoft Windows, Linux and macOS host operating systems. These toolchains are based on Free Software Foundation 's (FSF) GNU Open source tools and newlib. The pre-built GNU Arm Embedded Toolchain can be downloaded using the following link: Download Download and install the latest version. Then make sure to add the path to your toolchain to your OS PATH environment variable: path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal: $ arm-none-eabi-gcc --version Installing GNU make Now with the toolchain installed we can build object files from source code, but to build projects based on makefiles, which can be seen as a recipes for the builds, we need to have GNU make installed on the system. On Windows the easiest way to install the dependencies is to use the MSYS2 . You can do so by performing the following steps: Download Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Update the package database and core system packages with: $ pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: $ pacman -Su Install dependencies: $ pacman -S git make python2 Linux and macOS already have the necessary shell commands, but GNU make may not be a part of the standard distro. Call make -v from the terminal to check whether it is installed or not. GNU make would need to be installed if it's not recognized as a command. GNU make is bundled with Xcode tools if working on macOS. On Linux it may be different ways to obtain GNU make depending on your distro, if not installed already. On Ubuntu you can get by entering this command: $ sudo apt-get install build-essential checkinstall Installing the nRF5 SDK Download the SDK file nRF5_SDK_x.x.x_xxxxxxx (for example, nRF5_SDK_15.2.0_9412b96 ) from www.nordicsemi.com . The latest version is 15.2.0 , it can be downloaded directly here: Download Extract the zip file to the nrf52832-mdk repository. This should give you the following folder structure: ./nrf52832-mdk/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 firmware \u251c\u2500\u2500 examples \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u2514\u2500\u2500 nRF5_SDK_v15.2.0_9412b96 \u2514\u2500\u2500 tools To build an example application you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if your are working on either Linux or macOS. These files are located in: SDK /components/toolchain/gcc Open the file in a text editor ( Sublime is recommended), and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/ GNU_VERSION ? = 6 .3.1 GNU_PREFIX ? = arm-none-eabi Compiling and running blinky example Now you can try to build one of the examples. Will use the blinky example here to keep it simple. Open terminal and change directory to: $ cd ./nrf52832-mdk/examples/nrf5-sdk/blinky/armgcc/ Connect the nRF52832-MDK to one of your PC's USB host ports. Compile and program the example: $ make flash Observe that the LEDs are blinking: Running examples that use a SoftDevice Before you can run more advanced examples that use Bluetooth or ANT , you must program the SoftDevice on the board. The SoftDevice binary is located in folder components/softdevice/SoftDevice/hex in the SDK, where SoftDevice is the name of the SoftDevice. You can also download SoftDevices from nordicsemi.com . The easiest way to program the SoftDevice is using the GCC makefile of an example: Open a command prompt in the folder that contains the makefile of an example. The example must require a SoftDevice. For example, the ble_app_blinky example. Run the following command: # this will program SoftDevice alone $ make flash_softdevice Or # this will program the application with SoftDevice $ make flash_all More examples Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date. Reference Nordic nRF5 SDK Nordic Documentation Library makerdiary/nrf52832-mdk GNU Arm Embedded Toolchain Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"nRF5 SDK"},{"location":"nrf5-sdk/#nrf5-sdk-software-development-kit-for-nrf51-and-nrf52-series","text":"","title":"nRF5 SDK Software Development Kit for nRF51 and nRF52 Series"},{"location":"nrf5-sdk/#introduction","text":"The nRF5 SDK provides a rich developing environment for nRF5 Series devices by including a broad selection of drivers, libraries, examples for peripherals, SoftDevices, and proprietary radio protocols. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. We provide example applications that you can run on your nRF52832-MDK to ensure that everything is set up correctly. After these tests, you can use the examples as starting point to develop your own applications. Before we begin, we need to install some software components to build our example applications. Here we recommend GNU Arm Embedded Toolchains as they are free and open-source.","title":"Introduction"},{"location":"nrf5-sdk/#installing-gnu-arm-embedded-toolchain","text":"The GNU Arm Embedded toolchains are integrated and validated packages featuring the Arm Embedded GCC compiler, libraries and other GNU tools necessary for bare-metal software development on devices based on the Arm Cortex-M and Cortex-R processors. The toolchains are available for cross-compilation on Microsoft Windows, Linux and macOS host operating systems. These toolchains are based on Free Software Foundation 's (FSF) GNU Open source tools and newlib. The pre-built GNU Arm Embedded Toolchain can be downloaded using the following link: Download Download and install the latest version. Then make sure to add the path to your toolchain to your OS PATH environment variable: path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal: $ arm-none-eabi-gcc --version","title":"Installing GNU Arm Embedded Toolchain"},{"location":"nrf5-sdk/#installing-gnu-make","text":"Now with the toolchain installed we can build object files from source code, but to build projects based on makefiles, which can be seen as a recipes for the builds, we need to have GNU make installed on the system. On Windows the easiest way to install the dependencies is to use the MSYS2 . You can do so by performing the following steps: Download Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows. Update the package database and core system packages with: $ pacman -Syu If needed, close MSYS2, run it again from Start menu. Update the rest with: $ pacman -Su Install dependencies: $ pacman -S git make python2 Linux and macOS already have the necessary shell commands, but GNU make may not be a part of the standard distro. Call make -v from the terminal to check whether it is installed or not. GNU make would need to be installed if it's not recognized as a command. GNU make is bundled with Xcode tools if working on macOS. On Linux it may be different ways to obtain GNU make depending on your distro, if not installed already. On Ubuntu you can get by entering this command: $ sudo apt-get install build-essential checkinstall","title":"Installing GNU make"},{"location":"nrf5-sdk/#installing-the-nrf5-sdk","text":"Download the SDK file nRF5_SDK_x.x.x_xxxxxxx (for example, nRF5_SDK_15.2.0_9412b96 ) from www.nordicsemi.com . The latest version is 15.2.0 , it can be downloaded directly here: Download Extract the zip file to the nrf52832-mdk repository. This should give you the following folder structure: ./nrf52832-mdk/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 firmware \u251c\u2500\u2500 examples \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u2514\u2500\u2500 nRF5_SDK_v15.2.0_9412b96 \u2514\u2500\u2500 tools To build an example application you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if your are working on either Linux or macOS. These files are located in: SDK /components/toolchain/gcc Open the file in a text editor ( Sublime is recommended), and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/ GNU_VERSION ? = 6 .3.1 GNU_PREFIX ? = arm-none-eabi","title":"Installing the nRF5 SDK"},{"location":"nrf5-sdk/#compiling-and-running-blinky-example","text":"Now you can try to build one of the examples. Will use the blinky example here to keep it simple. Open terminal and change directory to: $ cd ./nrf52832-mdk/examples/nrf5-sdk/blinky/armgcc/ Connect the nRF52832-MDK to one of your PC's USB host ports. Compile and program the example: $ make flash Observe that the LEDs are blinking:","title":"Compiling and running blinky example"},{"location":"nrf5-sdk/#running-examples-that-use-a-softdevice","text":"Before you can run more advanced examples that use Bluetooth or ANT , you must program the SoftDevice on the board. The SoftDevice binary is located in folder components/softdevice/SoftDevice/hex in the SDK, where SoftDevice is the name of the SoftDevice. You can also download SoftDevices from nordicsemi.com . The easiest way to program the SoftDevice is using the GCC makefile of an example: Open a command prompt in the folder that contains the makefile of an example. The example must require a SoftDevice. For example, the ble_app_blinky example. Run the following command: # this will program SoftDevice alone $ make flash_softdevice Or # this will program the application with SoftDevice $ make flash_all","title":"Running examples that use a SoftDevice"},{"location":"nrf5-sdk/#more-examples","text":"Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date.","title":"More examples"},{"location":"nrf5-sdk/#reference","text":"Nordic nRF5 SDK Nordic Documentation Library makerdiary/nrf52832-mdk GNU Arm Embedded Toolchain","title":"Reference"},{"location":"nrf5-sdk/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/","text":"Zephyr A scalable RTOS supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind Introduction The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways. The Zephyr kernel supports multiple architectures, including ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, and RISC-V. Distinguishing Features The Zephyr kernel offers a number of features that distinguish it from other small-footprint OSes: Single address-space Highly configurable / Modular for flexibility Cross Architecture Compile-time resource definition Minimal and Configurable error checking Memory Protection Native Networking Stack supporting multiple protocols Native Linux, macOS, and Windows Development Extensive suite of services For more details, please visit Zephyr Project site. Getting Started Checking out the repository Clone the Zephyr Project repository on GitHub or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/zephyrproject-rtos/zephyr.git Setting up the development environment The Zephyr project uses CMake as a tool for managing the building of the project. CMake is able to generate build files in different formats (also known as \u201cgenerators\u201d), and the following ones are currently supported by Zephyr: make : Supported on UNIX-like platforms (Linux, macOS). ninja : Supported on all platforms. The setup process for the development environment depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to set up the development environment. Windows The easiest way to install the dependencies natively on Microsoft Windows is to use the Chocolatey package manager ( Chocolatey website ). Install Chocolatey by following the instructions on the Chocolatey install website. Open a Command Prompt (cmd.exe) as an Administrator . Optionally disable global confirmation to avoid having to add -y to all commands: $ choco feature enable -n allowGlobalConfirmation Install CMake: $ choco install cmake --installargs ADD_CMAKE_TO_PATH=System Install the rest of the tools: $ choco install git python ninja dtc-msys2 gperf doxygen.install Optionally install the tools required to build the documentation in .pdf format: $ choco install strawberryperl miktex rsvg-convert Close the Command Prompt window. Open a Command Prompt (cmd.exe) as a regular user. Install the required Python modules: $ cd ./zephyr $ pip3 install -r scripts/requirements.txt Download and install the GNU Arm Embedded Toolchain (install to c:\\gnuarmemb ). Within the Command Prompt, set up environment variables for the installed tools and for the Zephyr environment: $ set ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb $ set GNUARMEMB_TOOLCHAIN_PATH = c: \\g nuarmemb macOS First, install the Homebrew (The missing package manager for macOS). Homebrew is a free and open-source software package management system that simplifies the installation of software on Apple\u2019s macOS operating system. To install Homebrew, visit the Homebrew site and follow the installation instructions on the site. After Homebrew was successfully installed, install the following tools using the brew command line: $ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf $ cd ~/zephyr # or to the folder where you cloned the zephyr repo $ pip3 install --user -r scripts/requirements.txt Download and install the GNU Arm Embedded Toolchain . Then make sure to add the path to your toolchain to your OS PATH environment variable: # add the following scripts to ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb Linux Before proceeding with the build, ensure your OS is up to date. On Ubuntu, you\u2019ll first need to update the local database list of available packages before upgrading: $ sudo apt-get update $ sudo apt-get upgrade Install the required packages in a Ubuntu host system with: $ sudo apt-get install --no-install-recommends git cmake ninja-build gperf \\ ccache doxygen dfu-util device-tree-compiler \\ python3-ply python3-pip python3-setuptools python3-wheel xz-utils file \\ make gcc-multilib autoconf automake libtool librsvg2-bin \\ texlive-latex-base texlive-latex-extra latexmk texlive-fonts-recommended Install additional packages required for development with Zephyr: $ cd ~/zephyr # or to your directory where zephyr is cloned $ pip3 install --user -r scripts/requirements.txt Download and install the GNU Arm Embedded Toolchain . Then make sure to add the path to your toolchain to your OS PATH environment variable: # add the following scripts to ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb Compiling and running an example Now you can try to build one of the examples. Will use the hello_world example here to keep it simple. Set up your build environment: $ cd zephyr git clone location # On Linux/macOS $ source zephyr-env.sh # On Windows $ source zephyr-env.cmd Create a build folder in the example directory, where all artifacts generated by the Ninja build system are stored, such as: $ cd nrf52832-mdk/examples/zephyr/hello_world/ $ mkdir build cd build build$ cmake -GNinja -DBOARD = nrf52832_mdk .. build$ ninja build$ ninja flash Check the board output from serial port, you will see the following messages: ***** Booting Zephyr OS zephyr-v1.13.0-1166-g8b20f9dba ***** Hello World! nrf52832_mdk That's it! You can also try other examples in the path nrf52832-mdk/examples/zephyr/ or zephyr/samples/ . More examples Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date. Reference Zephyr Project site Zephyr Project Documentation zephyrproject-rtos/zephyr repository Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Zephyr"},{"location":"zephyr/#zephyr-a-scalable-rtos-supporting-multiple-hardware-architectures-optimized-for-resource-constrained-devices-and-built-with-security-in-mind","text":"","title":"Zephyr A scalable RTOS supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind"},{"location":"zephyr/#introduction","text":"The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways. The Zephyr kernel supports multiple architectures, including ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, and RISC-V.","title":"Introduction"},{"location":"zephyr/#distinguishing-features","text":"The Zephyr kernel offers a number of features that distinguish it from other small-footprint OSes: Single address-space Highly configurable / Modular for flexibility Cross Architecture Compile-time resource definition Minimal and Configurable error checking Memory Protection Native Networking Stack supporting multiple protocols Native Linux, macOS, and Windows Development Extensive suite of services For more details, please visit Zephyr Project site.","title":"Distinguishing Features"},{"location":"zephyr/#getting-started","text":"","title":"Getting Started"},{"location":"zephyr/#checking-out-the-repository","text":"Clone the Zephyr Project repository on GitHub or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/zephyrproject-rtos/zephyr.git","title":"Checking out the repository"},{"location":"zephyr/#setting-up-the-development-environment","text":"The Zephyr project uses CMake as a tool for managing the building of the project. CMake is able to generate build files in different formats (also known as \u201cgenerators\u201d), and the following ones are currently supported by Zephyr: make : Supported on UNIX-like platforms (Linux, macOS). ninja : Supported on all platforms. The setup process for the development environment depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to set up the development environment.","title":"Setting up the development environment"},{"location":"zephyr/#windows","text":"The easiest way to install the dependencies natively on Microsoft Windows is to use the Chocolatey package manager ( Chocolatey website ). Install Chocolatey by following the instructions on the Chocolatey install website. Open a Command Prompt (cmd.exe) as an Administrator . Optionally disable global confirmation to avoid having to add -y to all commands: $ choco feature enable -n allowGlobalConfirmation Install CMake: $ choco install cmake --installargs ADD_CMAKE_TO_PATH=System Install the rest of the tools: $ choco install git python ninja dtc-msys2 gperf doxygen.install Optionally install the tools required to build the documentation in .pdf format: $ choco install strawberryperl miktex rsvg-convert Close the Command Prompt window. Open a Command Prompt (cmd.exe) as a regular user. Install the required Python modules: $ cd ./zephyr $ pip3 install -r scripts/requirements.txt Download and install the GNU Arm Embedded Toolchain (install to c:\\gnuarmemb ). Within the Command Prompt, set up environment variables for the installed tools and for the Zephyr environment: $ set ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb $ set GNUARMEMB_TOOLCHAIN_PATH = c: \\g nuarmemb","title":"Windows"},{"location":"zephyr/#macos","text":"First, install the Homebrew (The missing package manager for macOS). Homebrew is a free and open-source software package management system that simplifies the installation of software on Apple\u2019s macOS operating system. To install Homebrew, visit the Homebrew site and follow the installation instructions on the site. After Homebrew was successfully installed, install the following tools using the brew command line: $ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf $ cd ~/zephyr # or to the folder where you cloned the zephyr repo $ pip3 install --user -r scripts/requirements.txt Download and install the GNU Arm Embedded Toolchain . Then make sure to add the path to your toolchain to your OS PATH environment variable: # add the following scripts to ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb","title":"macOS"},{"location":"zephyr/#linux","text":"Before proceeding with the build, ensure your OS is up to date. On Ubuntu, you\u2019ll first need to update the local database list of available packages before upgrading: $ sudo apt-get update $ sudo apt-get upgrade Install the required packages in a Ubuntu host system with: $ sudo apt-get install --no-install-recommends git cmake ninja-build gperf \\ ccache doxygen dfu-util device-tree-compiler \\ python3-ply python3-pip python3-setuptools python3-wheel xz-utils file \\ make gcc-multilib autoconf automake libtool librsvg2-bin \\ texlive-latex-base texlive-latex-extra latexmk texlive-fonts-recommended Install additional packages required for development with Zephyr: $ cd ~/zephyr # or to your directory where zephyr is cloned $ pip3 install --user -r scripts/requirements.txt Download and install the GNU Arm Embedded Toolchain . Then make sure to add the path to your toolchain to your OS PATH environment variable: # add the following scripts to ~/.bash_profile export GNUARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update export ZEPHYR_TOOLCHAIN_VARIANT = gnuarmemb","title":"Linux"},{"location":"zephyr/#compiling-and-running-an-example","text":"Now you can try to build one of the examples. Will use the hello_world example here to keep it simple. Set up your build environment: $ cd zephyr git clone location # On Linux/macOS $ source zephyr-env.sh # On Windows $ source zephyr-env.cmd Create a build folder in the example directory, where all artifacts generated by the Ninja build system are stored, such as: $ cd nrf52832-mdk/examples/zephyr/hello_world/ $ mkdir build cd build build$ cmake -GNinja -DBOARD = nrf52832_mdk .. build$ ninja build$ ninja flash Check the board output from serial port, you will see the following messages: ***** Booting Zephyr OS zephyr-v1.13.0-1166-g8b20f9dba ***** Hello World! nrf52832_mdk That's it! You can also try other examples in the path nrf52832-mdk/examples/zephyr/ or zephyr/samples/ .","title":"Compiling and running an example"},{"location":"zephyr/#more-examples","text":"Over time, more example applications will be added to the repository. You can star or watch the nrf52832-mdk repository to stay up to date.","title":"More examples"},{"location":"zephyr/#reference","text":"Zephyr Project site Zephyr Project Documentation zephyrproject-rtos/zephyr repository","title":"Reference"},{"location":"zephyr/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"}]}